/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.dealer.registration.model.impl;

import bd.gov.dgfood.dealer.registration.model.DgfDlrRegAddlDtls;
import bd.gov.dgfood.dealer.registration.model.DgfDlrRegAddlDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfDlrRegAddlDtls service. Represents a row in the &quot;dgf_dlr_reg_addl_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfDlrRegAddlDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfDlrRegAddlDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfDlrRegAddlDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfDlrRegAddlDtlsModelImpl
	extends BaseModelImpl<DgfDlrRegAddlDtls> implements DgfDlrRegAddlDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf dlr reg addl dtls model instance should use the <code>DgfDlrRegAddlDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_dlr_reg_addl_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"dlr_reg_addl_dtls_id", Types.BIGINT}, {"national_id", Types.VARCHAR},
		{"dlr_reg_appl_no", Types.BIGINT}, {"dlr_reg_no", Types.BIGINT},
		{"pblc_rep", Types.INTEGER}, {"wrk_in_govt", Types.INTEGER},
		{"physcly_chlngd", Types.INTEGER},
		{"phscly_chln_gd_attch_id", Types.BIGINT},
		{"license_type", Types.VARCHAR}, {"third_party_ops_flg", Types.BIGINT},
		{"fmly_dlr_shp_no", Types.BIGINT},
		{"dlrshp_fmly_mmbr_name", Types.VARCHAR},
		{"dlrshp_fmly_mmbr_type", Types.VARCHAR},
		{"dlr_shp_trck_typ_flg", Types.INTEGER},
		{"trck_licns_plat_no", Types.VARCHAR}, {"trck_cpcty", Types.BIGINT},
		{"trck_make", Types.VARCHAR}, {"trck_model", Types.VARCHAR},
		{"trck_rent_own_flg", Types.VARCHAR}, {"trck_mfg_yr", Types.BIGINT},
		{"shp_length", Types.BIGINT}, {"shp_height", Types.BIGINT},
		{"shp_width", Types.BIGINT}, {"shp_strg_cpcty", Types.BIGINT},
		{"shp_flr_cmntd", Types.INTEGER}, {"shp_sign_brd", Types.INTEGER},
		{"dlr_licns_posses", Types.INTEGER},
		{"dlr_run_shp_himself", Types.INTEGER},
		{"dlr_fmly_dlr_shp_flg", Types.BIGINT}, {"version", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dlr_reg_addl_dtls_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("national_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_reg_appl_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_reg_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pblc_rep", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("wrk_in_govt", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("physcly_chlngd", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("phscly_chln_gd_attch_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("license_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("third_party_ops_flg", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fmly_dlr_shp_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlrshp_fmly_mmbr_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlrshp_fmly_mmbr_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_shp_trck_typ_flg", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trck_licns_plat_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_cpcty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trck_make", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_model", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_rent_own_flg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_mfg_yr", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_length", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_height", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_width", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_strg_cpcty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_flr_cmntd", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("shp_sign_brd", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dlr_licns_posses", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dlr_run_shp_himself", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dlr_fmly_dlr_shp_flg", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_dlr_reg_addl_dtls (dlr_reg_addl_dtls_id LONG not null primary key,national_id VARCHAR(75) null,dlr_reg_appl_no LONG,dlr_reg_no LONG,pblc_rep INTEGER,wrk_in_govt INTEGER,physcly_chlngd INTEGER,phscly_chln_gd_attch_id LONG,license_type VARCHAR(75) null,third_party_ops_flg LONG,fmly_dlr_shp_no LONG,dlrshp_fmly_mmbr_name VARCHAR(75) null,dlrshp_fmly_mmbr_type VARCHAR(75) null,dlr_shp_trck_typ_flg INTEGER,trck_licns_plat_no VARCHAR(75) null,trck_cpcty LONG,trck_make VARCHAR(75) null,trck_model VARCHAR(75) null,trck_rent_own_flg VARCHAR(75) null,trck_mfg_yr LONG,shp_length LONG,shp_height LONG,shp_width LONG,shp_strg_cpcty LONG,shp_flr_cmntd INTEGER,shp_sign_brd INTEGER,dlr_licns_posses INTEGER,dlr_run_shp_himself INTEGER,dlr_fmly_dlr_shp_flg LONG,version LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_dlr_reg_addl_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfDlrRegAddlDtls.dlrRegAddlDtlsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_dlr_reg_addl_dtls.dlr_reg_addl_dtls_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLRREGNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLRREGADDLDTLSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfDlrRegAddlDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dlrRegAddlDtlsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDlrRegAddlDtlsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dlrRegAddlDtlsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfDlrRegAddlDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfDlrRegAddlDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfDlrRegAddlDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfDlrRegAddlDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrRegAddlDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfDlrRegAddlDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfDlrRegAddlDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfDlrRegAddlDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfDlrRegAddlDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfDlrRegAddlDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfDlrRegAddlDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfDlrRegAddlDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfDlrRegAddlDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfDlrRegAddlDtls, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DgfDlrRegAddlDtls, Object>>();
		Map<String, BiConsumer<DgfDlrRegAddlDtls, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DgfDlrRegAddlDtls, ?>>();

		attributeGetterFunctions.put(
			"dlrRegAddlDtlsId", DgfDlrRegAddlDtls::getDlrRegAddlDtlsId);
		attributeSetterBiConsumers.put(
			"dlrRegAddlDtlsId",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setDlrRegAddlDtlsId);
		attributeGetterFunctions.put(
			"nationalId", DgfDlrRegAddlDtls::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setNationalId);
		attributeGetterFunctions.put(
			"dlrRegAppLNo", DgfDlrRegAddlDtls::getDlrRegAppLNo);
		attributeSetterBiConsumers.put(
			"dlrRegAppLNo",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setDlrRegAppLNo);
		attributeGetterFunctions.put(
			"dlrRegNo", DgfDlrRegAddlDtls::getDlrRegNo);
		attributeSetterBiConsumers.put(
			"dlrRegNo",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setDlrRegNo);
		attributeGetterFunctions.put("pblcRep", DgfDlrRegAddlDtls::getPblcRep);
		attributeSetterBiConsumers.put(
			"pblcRep",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setPblcRep);
		attributeGetterFunctions.put(
			"wrkInGovt", DgfDlrRegAddlDtls::getWrkInGovt);
		attributeSetterBiConsumers.put(
			"wrkInGovt",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setWrkInGovt);
		attributeGetterFunctions.put(
			"physclyChlngd", DgfDlrRegAddlDtls::getPhysclyChlngd);
		attributeSetterBiConsumers.put(
			"physclyChlngd",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setPhysclyChlngd);
		attributeGetterFunctions.put(
			"phsclyChlnGdAttchId", DgfDlrRegAddlDtls::getPhsclyChlnGdAttchId);
		attributeSetterBiConsumers.put(
			"phsclyChlnGdAttchId",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setPhsclyChlnGdAttchId);
		attributeGetterFunctions.put(
			"licenseType", DgfDlrRegAddlDtls::getLicenseType);
		attributeSetterBiConsumers.put(
			"licenseType",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setLicenseType);
		attributeGetterFunctions.put(
			"thirdPartyOpsFlg", DgfDlrRegAddlDtls::getThirdPartyOpsFlg);
		attributeSetterBiConsumers.put(
			"thirdPartyOpsFlg",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setThirdPartyOpsFlg);
		attributeGetterFunctions.put(
			"fmlyDlrShpNo", DgfDlrRegAddlDtls::getFmlyDlrShpNo);
		attributeSetterBiConsumers.put(
			"fmlyDlrShpNo",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setFmlyDlrShpNo);
		attributeGetterFunctions.put(
			"dlrshpFmlyMmbrName", DgfDlrRegAddlDtls::getDlrshpFmlyMmbrName);
		attributeSetterBiConsumers.put(
			"dlrshpFmlyMmbrName",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setDlrshpFmlyMmbrName);
		attributeGetterFunctions.put(
			"dlrshpFmlyMmbrType", DgfDlrRegAddlDtls::getDlrshpFmlyMmbrType);
		attributeSetterBiConsumers.put(
			"dlrshpFmlyMmbrType",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setDlrshpFmlyMmbrType);
		attributeGetterFunctions.put(
			"dlrShpTrckTypFlg", DgfDlrRegAddlDtls::getDlrShpTrckTypFlg);
		attributeSetterBiConsumers.put(
			"dlrShpTrckTypFlg",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setDlrShpTrckTypFlg);
		attributeGetterFunctions.put(
			"trckLicnsPlatNo", DgfDlrRegAddlDtls::getTrckLicnsPlatNo);
		attributeSetterBiConsumers.put(
			"trckLicnsPlatNo",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setTrckLicnsPlatNo);
		attributeGetterFunctions.put(
			"trckCpcty", DgfDlrRegAddlDtls::getTrckCpcty);
		attributeSetterBiConsumers.put(
			"trckCpcty",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setTrckCpcty);
		attributeGetterFunctions.put(
			"trckMake", DgfDlrRegAddlDtls::getTrckMake);
		attributeSetterBiConsumers.put(
			"trckMake",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setTrckMake);
		attributeGetterFunctions.put(
			"trckModel", DgfDlrRegAddlDtls::getTrckModel);
		attributeSetterBiConsumers.put(
			"trckModel",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setTrckModel);
		attributeGetterFunctions.put(
			"trckRentOwnFlg", DgfDlrRegAddlDtls::getTrckRentOwnFlg);
		attributeSetterBiConsumers.put(
			"trckRentOwnFlg",
			(BiConsumer<DgfDlrRegAddlDtls, String>)
				DgfDlrRegAddlDtls::setTrckRentOwnFlg);
		attributeGetterFunctions.put(
			"trckMfgYr", DgfDlrRegAddlDtls::getTrckMfgYr);
		attributeSetterBiConsumers.put(
			"trckMfgYr",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setTrckMfgYr);
		attributeGetterFunctions.put(
			"shpLength", DgfDlrRegAddlDtls::getShpLength);
		attributeSetterBiConsumers.put(
			"shpLength",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setShpLength);
		attributeGetterFunctions.put(
			"shpHeight", DgfDlrRegAddlDtls::getShpHeight);
		attributeSetterBiConsumers.put(
			"shpHeight",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setShpHeight);
		attributeGetterFunctions.put(
			"shpWidth", DgfDlrRegAddlDtls::getShpWidth);
		attributeSetterBiConsumers.put(
			"shpWidth",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setShpWidth);
		attributeGetterFunctions.put(
			"shpStrgCpcty", DgfDlrRegAddlDtls::getShpStrgCpcty);
		attributeSetterBiConsumers.put(
			"shpStrgCpcty",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setShpStrgCpcty);
		attributeGetterFunctions.put(
			"shpFlrCmntd", DgfDlrRegAddlDtls::getShpFlrCmntd);
		attributeSetterBiConsumers.put(
			"shpFlrCmntd",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setShpFlrCmntd);
		attributeGetterFunctions.put(
			"shpSignBrd", DgfDlrRegAddlDtls::getShpSignBrd);
		attributeSetterBiConsumers.put(
			"shpSignBrd",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setShpSignBrd);
		attributeGetterFunctions.put(
			"dlrLicnsPosses", DgfDlrRegAddlDtls::getDlrLicnsPosses);
		attributeSetterBiConsumers.put(
			"dlrLicnsPosses",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setDlrLicnsPosses);
		attributeGetterFunctions.put(
			"dlrRunShpHimself", DgfDlrRegAddlDtls::getDlrRunShpHimself);
		attributeSetterBiConsumers.put(
			"dlrRunShpHimself",
			(BiConsumer<DgfDlrRegAddlDtls, Integer>)
				DgfDlrRegAddlDtls::setDlrRunShpHimself);
		attributeGetterFunctions.put(
			"dlrFmlyDlrShpFlg", DgfDlrRegAddlDtls::getDlrFmlyDlrShpFlg);
		attributeSetterBiConsumers.put(
			"dlrFmlyDlrShpFlg",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)
				DgfDlrRegAddlDtls::setDlrFmlyDlrShpFlg);
		attributeGetterFunctions.put("version", DgfDlrRegAddlDtls::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<DgfDlrRegAddlDtls, Long>)DgfDlrRegAddlDtls::setVersion);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDlrRegAddlDtlsId() {
		return _dlrRegAddlDtlsId;
	}

	@Override
	public void setDlrRegAddlDtlsId(long dlrRegAddlDtlsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegAddlDtlsId = dlrRegAddlDtlsId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("national_id");
	}

	@JSON
	@Override
	public long getDlrRegAppLNo() {
		return _dlrRegAppLNo;
	}

	@Override
	public void setDlrRegAppLNo(long dlrRegAppLNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegAppLNo = dlrRegAppLNo;
	}

	@JSON
	@Override
	public long getDlrRegNo() {
		return _dlrRegNo;
	}

	@Override
	public void setDlrRegNo(long dlrRegNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegNo = dlrRegNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDlrRegNo() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
	}

	@JSON
	@Override
	public int getPblcRep() {
		return _pblcRep;
	}

	@Override
	public void setPblcRep(int pblcRep) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pblcRep = pblcRep;
	}

	@JSON
	@Override
	public int getWrkInGovt() {
		return _wrkInGovt;
	}

	@Override
	public void setWrkInGovt(int wrkInGovt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wrkInGovt = wrkInGovt;
	}

	@JSON
	@Override
	public int getPhysclyChlngd() {
		return _physclyChlngd;
	}

	@Override
	public void setPhysclyChlngd(int physclyChlngd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_physclyChlngd = physclyChlngd;
	}

	@JSON
	@Override
	public long getPhsclyChlnGdAttchId() {
		return _phsclyChlnGdAttchId;
	}

	@Override
	public void setPhsclyChlnGdAttchId(long phsclyChlnGdAttchId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phsclyChlnGdAttchId = phsclyChlnGdAttchId;
	}

	@JSON
	@Override
	public String getLicenseType() {
		if (_licenseType == null) {
			return "";
		}
		else {
			return _licenseType;
		}
	}

	@Override
	public void setLicenseType(String licenseType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseType = licenseType;
	}

	@JSON
	@Override
	public long getThirdPartyOpsFlg() {
		return _thirdPartyOpsFlg;
	}

	@Override
	public void setThirdPartyOpsFlg(long thirdPartyOpsFlg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thirdPartyOpsFlg = thirdPartyOpsFlg;
	}

	@JSON
	@Override
	public long getFmlyDlrShpNo() {
		return _fmlyDlrShpNo;
	}

	@Override
	public void setFmlyDlrShpNo(long fmlyDlrShpNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fmlyDlrShpNo = fmlyDlrShpNo;
	}

	@JSON
	@Override
	public String getDlrshpFmlyMmbrName() {
		if (_dlrshpFmlyMmbrName == null) {
			return "";
		}
		else {
			return _dlrshpFmlyMmbrName;
		}
	}

	@Override
	public void setDlrshpFmlyMmbrName(String dlrshpFmlyMmbrName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrshpFmlyMmbrName = dlrshpFmlyMmbrName;
	}

	@JSON
	@Override
	public String getDlrshpFmlyMmbrType() {
		if (_dlrshpFmlyMmbrType == null) {
			return "";
		}
		else {
			return _dlrshpFmlyMmbrType;
		}
	}

	@Override
	public void setDlrshpFmlyMmbrType(String dlrshpFmlyMmbrType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrshpFmlyMmbrType = dlrshpFmlyMmbrType;
	}

	@JSON
	@Override
	public int getDlrShpTrckTypFlg() {
		return _dlrShpTrckTypFlg;
	}

	@Override
	public void setDlrShpTrckTypFlg(int dlrShpTrckTypFlg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrShpTrckTypFlg = dlrShpTrckTypFlg;
	}

	@JSON
	@Override
	public String getTrckLicnsPlatNo() {
		if (_trckLicnsPlatNo == null) {
			return "";
		}
		else {
			return _trckLicnsPlatNo;
		}
	}

	@Override
	public void setTrckLicnsPlatNo(String trckLicnsPlatNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckLicnsPlatNo = trckLicnsPlatNo;
	}

	@JSON
	@Override
	public long getTrckCpcty() {
		return _trckCpcty;
	}

	@Override
	public void setTrckCpcty(long trckCpcty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckCpcty = trckCpcty;
	}

	@JSON
	@Override
	public String getTrckMake() {
		if (_trckMake == null) {
			return "";
		}
		else {
			return _trckMake;
		}
	}

	@Override
	public void setTrckMake(String trckMake) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckMake = trckMake;
	}

	@JSON
	@Override
	public String getTrckModel() {
		if (_trckModel == null) {
			return "";
		}
		else {
			return _trckModel;
		}
	}

	@Override
	public void setTrckModel(String trckModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckModel = trckModel;
	}

	@JSON
	@Override
	public String getTrckRentOwnFlg() {
		if (_trckRentOwnFlg == null) {
			return "";
		}
		else {
			return _trckRentOwnFlg;
		}
	}

	@Override
	public void setTrckRentOwnFlg(String trckRentOwnFlg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckRentOwnFlg = trckRentOwnFlg;
	}

	@JSON
	@Override
	public long getTrckMfgYr() {
		return _trckMfgYr;
	}

	@Override
	public void setTrckMfgYr(long trckMfgYr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckMfgYr = trckMfgYr;
	}

	@JSON
	@Override
	public long getShpLength() {
		return _shpLength;
	}

	@Override
	public void setShpLength(long shpLength) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpLength = shpLength;
	}

	@JSON
	@Override
	public long getShpHeight() {
		return _shpHeight;
	}

	@Override
	public void setShpHeight(long shpHeight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpHeight = shpHeight;
	}

	@JSON
	@Override
	public long getShpWidth() {
		return _shpWidth;
	}

	@Override
	public void setShpWidth(long shpWidth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpWidth = shpWidth;
	}

	@JSON
	@Override
	public long getShpStrgCpcty() {
		return _shpStrgCpcty;
	}

	@Override
	public void setShpStrgCpcty(long shpStrgCpcty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpStrgCpcty = shpStrgCpcty;
	}

	@JSON
	@Override
	public int getShpFlrCmntd() {
		return _shpFlrCmntd;
	}

	@Override
	public void setShpFlrCmntd(int shpFlrCmntd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpFlrCmntd = shpFlrCmntd;
	}

	@JSON
	@Override
	public int getShpSignBrd() {
		return _shpSignBrd;
	}

	@Override
	public void setShpSignBrd(int shpSignBrd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpSignBrd = shpSignBrd;
	}

	@JSON
	@Override
	public int getDlrLicnsPosses() {
		return _dlrLicnsPosses;
	}

	@Override
	public void setDlrLicnsPosses(int dlrLicnsPosses) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrLicnsPosses = dlrLicnsPosses;
	}

	@JSON
	@Override
	public int getDlrRunShpHimself() {
		return _dlrRunShpHimself;
	}

	@Override
	public void setDlrRunShpHimself(int dlrRunShpHimself) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRunShpHimself = dlrRunShpHimself;
	}

	@JSON
	@Override
	public long getDlrFmlyDlrShpFlg() {
		return _dlrFmlyDlrShpFlg;
	}

	@Override
	public void setDlrFmlyDlrShpFlg(long dlrFmlyDlrShpFlg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrFmlyDlrShpFlg = dlrFmlyDlrShpFlg;
	}

	@JSON
	@Override
	public long getVersion() {
		return _version;
	}

	@Override
	public void setVersion(long version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfDlrRegAddlDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfDlrRegAddlDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfDlrRegAddlDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfDlrRegAddlDtlsImpl dgfDlrRegAddlDtlsImpl =
			new DgfDlrRegAddlDtlsImpl();

		dgfDlrRegAddlDtlsImpl.setDlrRegAddlDtlsId(getDlrRegAddlDtlsId());
		dgfDlrRegAddlDtlsImpl.setNationalId(getNationalId());
		dgfDlrRegAddlDtlsImpl.setDlrRegAppLNo(getDlrRegAppLNo());
		dgfDlrRegAddlDtlsImpl.setDlrRegNo(getDlrRegNo());
		dgfDlrRegAddlDtlsImpl.setPblcRep(getPblcRep());
		dgfDlrRegAddlDtlsImpl.setWrkInGovt(getWrkInGovt());
		dgfDlrRegAddlDtlsImpl.setPhysclyChlngd(getPhysclyChlngd());
		dgfDlrRegAddlDtlsImpl.setPhsclyChlnGdAttchId(getPhsclyChlnGdAttchId());
		dgfDlrRegAddlDtlsImpl.setLicenseType(getLicenseType());
		dgfDlrRegAddlDtlsImpl.setThirdPartyOpsFlg(getThirdPartyOpsFlg());
		dgfDlrRegAddlDtlsImpl.setFmlyDlrShpNo(getFmlyDlrShpNo());
		dgfDlrRegAddlDtlsImpl.setDlrshpFmlyMmbrName(getDlrshpFmlyMmbrName());
		dgfDlrRegAddlDtlsImpl.setDlrshpFmlyMmbrType(getDlrshpFmlyMmbrType());
		dgfDlrRegAddlDtlsImpl.setDlrShpTrckTypFlg(getDlrShpTrckTypFlg());
		dgfDlrRegAddlDtlsImpl.setTrckLicnsPlatNo(getTrckLicnsPlatNo());
		dgfDlrRegAddlDtlsImpl.setTrckCpcty(getTrckCpcty());
		dgfDlrRegAddlDtlsImpl.setTrckMake(getTrckMake());
		dgfDlrRegAddlDtlsImpl.setTrckModel(getTrckModel());
		dgfDlrRegAddlDtlsImpl.setTrckRentOwnFlg(getTrckRentOwnFlg());
		dgfDlrRegAddlDtlsImpl.setTrckMfgYr(getTrckMfgYr());
		dgfDlrRegAddlDtlsImpl.setShpLength(getShpLength());
		dgfDlrRegAddlDtlsImpl.setShpHeight(getShpHeight());
		dgfDlrRegAddlDtlsImpl.setShpWidth(getShpWidth());
		dgfDlrRegAddlDtlsImpl.setShpStrgCpcty(getShpStrgCpcty());
		dgfDlrRegAddlDtlsImpl.setShpFlrCmntd(getShpFlrCmntd());
		dgfDlrRegAddlDtlsImpl.setShpSignBrd(getShpSignBrd());
		dgfDlrRegAddlDtlsImpl.setDlrLicnsPosses(getDlrLicnsPosses());
		dgfDlrRegAddlDtlsImpl.setDlrRunShpHimself(getDlrRunShpHimself());
		dgfDlrRegAddlDtlsImpl.setDlrFmlyDlrShpFlg(getDlrFmlyDlrShpFlg());
		dgfDlrRegAddlDtlsImpl.setVersion(getVersion());

		dgfDlrRegAddlDtlsImpl.resetOriginalValues();

		return dgfDlrRegAddlDtlsImpl;
	}

	@Override
	public DgfDlrRegAddlDtls cloneWithOriginalValues() {
		DgfDlrRegAddlDtlsImpl dgfDlrRegAddlDtlsImpl =
			new DgfDlrRegAddlDtlsImpl();

		dgfDlrRegAddlDtlsImpl.setDlrRegAddlDtlsId(
			this.<Long>getColumnOriginalValue("dlr_reg_addl_dtls_id"));
		dgfDlrRegAddlDtlsImpl.setNationalId(
			this.<String>getColumnOriginalValue("national_id"));
		dgfDlrRegAddlDtlsImpl.setDlrRegAppLNo(
			this.<Long>getColumnOriginalValue("dlr_reg_appl_no"));
		dgfDlrRegAddlDtlsImpl.setDlrRegNo(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
		dgfDlrRegAddlDtlsImpl.setPblcRep(
			this.<Integer>getColumnOriginalValue("pblc_rep"));
		dgfDlrRegAddlDtlsImpl.setWrkInGovt(
			this.<Integer>getColumnOriginalValue("wrk_in_govt"));
		dgfDlrRegAddlDtlsImpl.setPhysclyChlngd(
			this.<Integer>getColumnOriginalValue("physcly_chlngd"));
		dgfDlrRegAddlDtlsImpl.setPhsclyChlnGdAttchId(
			this.<Long>getColumnOriginalValue("phscly_chln_gd_attch_id"));
		dgfDlrRegAddlDtlsImpl.setLicenseType(
			this.<String>getColumnOriginalValue("license_type"));
		dgfDlrRegAddlDtlsImpl.setThirdPartyOpsFlg(
			this.<Long>getColumnOriginalValue("third_party_ops_flg"));
		dgfDlrRegAddlDtlsImpl.setFmlyDlrShpNo(
			this.<Long>getColumnOriginalValue("fmly_dlr_shp_no"));
		dgfDlrRegAddlDtlsImpl.setDlrshpFmlyMmbrName(
			this.<String>getColumnOriginalValue("dlrshp_fmly_mmbr_name"));
		dgfDlrRegAddlDtlsImpl.setDlrshpFmlyMmbrType(
			this.<String>getColumnOriginalValue("dlrshp_fmly_mmbr_type"));
		dgfDlrRegAddlDtlsImpl.setDlrShpTrckTypFlg(
			this.<Integer>getColumnOriginalValue("dlr_shp_trck_typ_flg"));
		dgfDlrRegAddlDtlsImpl.setTrckLicnsPlatNo(
			this.<String>getColumnOriginalValue("trck_licns_plat_no"));
		dgfDlrRegAddlDtlsImpl.setTrckCpcty(
			this.<Long>getColumnOriginalValue("trck_cpcty"));
		dgfDlrRegAddlDtlsImpl.setTrckMake(
			this.<String>getColumnOriginalValue("trck_make"));
		dgfDlrRegAddlDtlsImpl.setTrckModel(
			this.<String>getColumnOriginalValue("trck_model"));
		dgfDlrRegAddlDtlsImpl.setTrckRentOwnFlg(
			this.<String>getColumnOriginalValue("trck_rent_own_flg"));
		dgfDlrRegAddlDtlsImpl.setTrckMfgYr(
			this.<Long>getColumnOriginalValue("trck_mfg_yr"));
		dgfDlrRegAddlDtlsImpl.setShpLength(
			this.<Long>getColumnOriginalValue("shp_length"));
		dgfDlrRegAddlDtlsImpl.setShpHeight(
			this.<Long>getColumnOriginalValue("shp_height"));
		dgfDlrRegAddlDtlsImpl.setShpWidth(
			this.<Long>getColumnOriginalValue("shp_width"));
		dgfDlrRegAddlDtlsImpl.setShpStrgCpcty(
			this.<Long>getColumnOriginalValue("shp_strg_cpcty"));
		dgfDlrRegAddlDtlsImpl.setShpFlrCmntd(
			this.<Integer>getColumnOriginalValue("shp_flr_cmntd"));
		dgfDlrRegAddlDtlsImpl.setShpSignBrd(
			this.<Integer>getColumnOriginalValue("shp_sign_brd"));
		dgfDlrRegAddlDtlsImpl.setDlrLicnsPosses(
			this.<Integer>getColumnOriginalValue("dlr_licns_posses"));
		dgfDlrRegAddlDtlsImpl.setDlrRunShpHimself(
			this.<Integer>getColumnOriginalValue("dlr_run_shp_himself"));
		dgfDlrRegAddlDtlsImpl.setDlrFmlyDlrShpFlg(
			this.<Long>getColumnOriginalValue("dlr_fmly_dlr_shp_flg"));
		dgfDlrRegAddlDtlsImpl.setVersion(
			this.<Long>getColumnOriginalValue("version"));

		return dgfDlrRegAddlDtlsImpl;
	}

	@Override
	public int compareTo(DgfDlrRegAddlDtls dgfDlrRegAddlDtls) {
		long primaryKey = dgfDlrRegAddlDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfDlrRegAddlDtls)) {
			return false;
		}

		DgfDlrRegAddlDtls dgfDlrRegAddlDtls = (DgfDlrRegAddlDtls)object;

		long primaryKey = dgfDlrRegAddlDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfDlrRegAddlDtls> toCacheModel() {
		DgfDlrRegAddlDtlsCacheModel dgfDlrRegAddlDtlsCacheModel =
			new DgfDlrRegAddlDtlsCacheModel();

		dgfDlrRegAddlDtlsCacheModel.dlrRegAddlDtlsId = getDlrRegAddlDtlsId();

		dgfDlrRegAddlDtlsCacheModel.nationalId = getNationalId();

		String nationalId = dgfDlrRegAddlDtlsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfDlrRegAddlDtlsCacheModel.nationalId = null;
		}

		dgfDlrRegAddlDtlsCacheModel.dlrRegAppLNo = getDlrRegAppLNo();

		dgfDlrRegAddlDtlsCacheModel.dlrRegNo = getDlrRegNo();

		dgfDlrRegAddlDtlsCacheModel.pblcRep = getPblcRep();

		dgfDlrRegAddlDtlsCacheModel.wrkInGovt = getWrkInGovt();

		dgfDlrRegAddlDtlsCacheModel.physclyChlngd = getPhysclyChlngd();

		dgfDlrRegAddlDtlsCacheModel.phsclyChlnGdAttchId =
			getPhsclyChlnGdAttchId();

		dgfDlrRegAddlDtlsCacheModel.licenseType = getLicenseType();

		String licenseType = dgfDlrRegAddlDtlsCacheModel.licenseType;

		if ((licenseType != null) && (licenseType.length() == 0)) {
			dgfDlrRegAddlDtlsCacheModel.licenseType = null;
		}

		dgfDlrRegAddlDtlsCacheModel.thirdPartyOpsFlg = getThirdPartyOpsFlg();

		dgfDlrRegAddlDtlsCacheModel.fmlyDlrShpNo = getFmlyDlrShpNo();

		dgfDlrRegAddlDtlsCacheModel.dlrshpFmlyMmbrName =
			getDlrshpFmlyMmbrName();

		String dlrshpFmlyMmbrName =
			dgfDlrRegAddlDtlsCacheModel.dlrshpFmlyMmbrName;

		if ((dlrshpFmlyMmbrName != null) &&
			(dlrshpFmlyMmbrName.length() == 0)) {

			dgfDlrRegAddlDtlsCacheModel.dlrshpFmlyMmbrName = null;
		}

		dgfDlrRegAddlDtlsCacheModel.dlrshpFmlyMmbrType =
			getDlrshpFmlyMmbrType();

		String dlrshpFmlyMmbrType =
			dgfDlrRegAddlDtlsCacheModel.dlrshpFmlyMmbrType;

		if ((dlrshpFmlyMmbrType != null) &&
			(dlrshpFmlyMmbrType.length() == 0)) {

			dgfDlrRegAddlDtlsCacheModel.dlrshpFmlyMmbrType = null;
		}

		dgfDlrRegAddlDtlsCacheModel.dlrShpTrckTypFlg = getDlrShpTrckTypFlg();

		dgfDlrRegAddlDtlsCacheModel.trckLicnsPlatNo = getTrckLicnsPlatNo();

		String trckLicnsPlatNo = dgfDlrRegAddlDtlsCacheModel.trckLicnsPlatNo;

		if ((trckLicnsPlatNo != null) && (trckLicnsPlatNo.length() == 0)) {
			dgfDlrRegAddlDtlsCacheModel.trckLicnsPlatNo = null;
		}

		dgfDlrRegAddlDtlsCacheModel.trckCpcty = getTrckCpcty();

		dgfDlrRegAddlDtlsCacheModel.trckMake = getTrckMake();

		String trckMake = dgfDlrRegAddlDtlsCacheModel.trckMake;

		if ((trckMake != null) && (trckMake.length() == 0)) {
			dgfDlrRegAddlDtlsCacheModel.trckMake = null;
		}

		dgfDlrRegAddlDtlsCacheModel.trckModel = getTrckModel();

		String trckModel = dgfDlrRegAddlDtlsCacheModel.trckModel;

		if ((trckModel != null) && (trckModel.length() == 0)) {
			dgfDlrRegAddlDtlsCacheModel.trckModel = null;
		}

		dgfDlrRegAddlDtlsCacheModel.trckRentOwnFlg = getTrckRentOwnFlg();

		String trckRentOwnFlg = dgfDlrRegAddlDtlsCacheModel.trckRentOwnFlg;

		if ((trckRentOwnFlg != null) && (trckRentOwnFlg.length() == 0)) {
			dgfDlrRegAddlDtlsCacheModel.trckRentOwnFlg = null;
		}

		dgfDlrRegAddlDtlsCacheModel.trckMfgYr = getTrckMfgYr();

		dgfDlrRegAddlDtlsCacheModel.shpLength = getShpLength();

		dgfDlrRegAddlDtlsCacheModel.shpHeight = getShpHeight();

		dgfDlrRegAddlDtlsCacheModel.shpWidth = getShpWidth();

		dgfDlrRegAddlDtlsCacheModel.shpStrgCpcty = getShpStrgCpcty();

		dgfDlrRegAddlDtlsCacheModel.shpFlrCmntd = getShpFlrCmntd();

		dgfDlrRegAddlDtlsCacheModel.shpSignBrd = getShpSignBrd();

		dgfDlrRegAddlDtlsCacheModel.dlrLicnsPosses = getDlrLicnsPosses();

		dgfDlrRegAddlDtlsCacheModel.dlrRunShpHimself = getDlrRunShpHimself();

		dgfDlrRegAddlDtlsCacheModel.dlrFmlyDlrShpFlg = getDlrFmlyDlrShpFlg();

		dgfDlrRegAddlDtlsCacheModel.version = getVersion();

		return dgfDlrRegAddlDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfDlrRegAddlDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfDlrRegAddlDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrRegAddlDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfDlrRegAddlDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfDlrRegAddlDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfDlrRegAddlDtls.class, ModelWrapper.class);

	}

	private long _dlrRegAddlDtlsId;
	private String _nationalId;
	private long _dlrRegAppLNo;
	private long _dlrRegNo;
	private int _pblcRep;
	private int _wrkInGovt;
	private int _physclyChlngd;
	private long _phsclyChlnGdAttchId;
	private String _licenseType;
	private long _thirdPartyOpsFlg;
	private long _fmlyDlrShpNo;
	private String _dlrshpFmlyMmbrName;
	private String _dlrshpFmlyMmbrType;
	private int _dlrShpTrckTypFlg;
	private String _trckLicnsPlatNo;
	private long _trckCpcty;
	private String _trckMake;
	private String _trckModel;
	private String _trckRentOwnFlg;
	private long _trckMfgYr;
	private long _shpLength;
	private long _shpHeight;
	private long _shpWidth;
	private long _shpStrgCpcty;
	private int _shpFlrCmntd;
	private int _shpSignBrd;
	private int _dlrLicnsPosses;
	private int _dlrRunShpHimself;
	private long _dlrFmlyDlrShpFlg;
	private long _version;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfDlrRegAddlDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfDlrRegAddlDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("dlr_reg_addl_dtls_id", _dlrRegAddlDtlsId);
		_columnOriginalValues.put("national_id", _nationalId);
		_columnOriginalValues.put("dlr_reg_appl_no", _dlrRegAppLNo);
		_columnOriginalValues.put("dlr_reg_no", _dlrRegNo);
		_columnOriginalValues.put("pblc_rep", _pblcRep);
		_columnOriginalValues.put("wrk_in_govt", _wrkInGovt);
		_columnOriginalValues.put("physcly_chlngd", _physclyChlngd);
		_columnOriginalValues.put(
			"phscly_chln_gd_attch_id", _phsclyChlnGdAttchId);
		_columnOriginalValues.put("license_type", _licenseType);
		_columnOriginalValues.put("third_party_ops_flg", _thirdPartyOpsFlg);
		_columnOriginalValues.put("fmly_dlr_shp_no", _fmlyDlrShpNo);
		_columnOriginalValues.put("dlrshp_fmly_mmbr_name", _dlrshpFmlyMmbrName);
		_columnOriginalValues.put("dlrshp_fmly_mmbr_type", _dlrshpFmlyMmbrType);
		_columnOriginalValues.put("dlr_shp_trck_typ_flg", _dlrShpTrckTypFlg);
		_columnOriginalValues.put("trck_licns_plat_no", _trckLicnsPlatNo);
		_columnOriginalValues.put("trck_cpcty", _trckCpcty);
		_columnOriginalValues.put("trck_make", _trckMake);
		_columnOriginalValues.put("trck_model", _trckModel);
		_columnOriginalValues.put("trck_rent_own_flg", _trckRentOwnFlg);
		_columnOriginalValues.put("trck_mfg_yr", _trckMfgYr);
		_columnOriginalValues.put("shp_length", _shpLength);
		_columnOriginalValues.put("shp_height", _shpHeight);
		_columnOriginalValues.put("shp_width", _shpWidth);
		_columnOriginalValues.put("shp_strg_cpcty", _shpStrgCpcty);
		_columnOriginalValues.put("shp_flr_cmntd", _shpFlrCmntd);
		_columnOriginalValues.put("shp_sign_brd", _shpSignBrd);
		_columnOriginalValues.put("dlr_licns_posses", _dlrLicnsPosses);
		_columnOriginalValues.put("dlr_run_shp_himself", _dlrRunShpHimself);
		_columnOriginalValues.put("dlr_fmly_dlr_shp_flg", _dlrFmlyDlrShpFlg);
		_columnOriginalValues.put("version", _version);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("dlr_reg_addl_dtls_id", "dlrRegAddlDtlsId");
		attributeNames.put("national_id", "nationalId");
		attributeNames.put("dlr_reg_appl_no", "dlrRegAppLNo");
		attributeNames.put("dlr_reg_no", "dlrRegNo");
		attributeNames.put("pblc_rep", "pblcRep");
		attributeNames.put("wrk_in_govt", "wrkInGovt");
		attributeNames.put("physcly_chlngd", "physclyChlngd");
		attributeNames.put("phscly_chln_gd_attch_id", "phsclyChlnGdAttchId");
		attributeNames.put("license_type", "licenseType");
		attributeNames.put("third_party_ops_flg", "thirdPartyOpsFlg");
		attributeNames.put("fmly_dlr_shp_no", "fmlyDlrShpNo");
		attributeNames.put("dlrshp_fmly_mmbr_name", "dlrshpFmlyMmbrName");
		attributeNames.put("dlrshp_fmly_mmbr_type", "dlrshpFmlyMmbrType");
		attributeNames.put("dlr_shp_trck_typ_flg", "dlrShpTrckTypFlg");
		attributeNames.put("trck_licns_plat_no", "trckLicnsPlatNo");
		attributeNames.put("trck_cpcty", "trckCpcty");
		attributeNames.put("trck_make", "trckMake");
		attributeNames.put("trck_model", "trckModel");
		attributeNames.put("trck_rent_own_flg", "trckRentOwnFlg");
		attributeNames.put("trck_mfg_yr", "trckMfgYr");
		attributeNames.put("shp_length", "shpLength");
		attributeNames.put("shp_height", "shpHeight");
		attributeNames.put("shp_width", "shpWidth");
		attributeNames.put("shp_strg_cpcty", "shpStrgCpcty");
		attributeNames.put("shp_flr_cmntd", "shpFlrCmntd");
		attributeNames.put("shp_sign_brd", "shpSignBrd");
		attributeNames.put("dlr_licns_posses", "dlrLicnsPosses");
		attributeNames.put("dlr_run_shp_himself", "dlrRunShpHimself");
		attributeNames.put("dlr_fmly_dlr_shp_flg", "dlrFmlyDlrShpFlg");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("dlr_reg_addl_dtls_id", 1L);

		columnBitmasks.put("national_id", 2L);

		columnBitmasks.put("dlr_reg_appl_no", 4L);

		columnBitmasks.put("dlr_reg_no", 8L);

		columnBitmasks.put("pblc_rep", 16L);

		columnBitmasks.put("wrk_in_govt", 32L);

		columnBitmasks.put("physcly_chlngd", 64L);

		columnBitmasks.put("phscly_chln_gd_attch_id", 128L);

		columnBitmasks.put("license_type", 256L);

		columnBitmasks.put("third_party_ops_flg", 512L);

		columnBitmasks.put("fmly_dlr_shp_no", 1024L);

		columnBitmasks.put("dlrshp_fmly_mmbr_name", 2048L);

		columnBitmasks.put("dlrshp_fmly_mmbr_type", 4096L);

		columnBitmasks.put("dlr_shp_trck_typ_flg", 8192L);

		columnBitmasks.put("trck_licns_plat_no", 16384L);

		columnBitmasks.put("trck_cpcty", 32768L);

		columnBitmasks.put("trck_make", 65536L);

		columnBitmasks.put("trck_model", 131072L);

		columnBitmasks.put("trck_rent_own_flg", 262144L);

		columnBitmasks.put("trck_mfg_yr", 524288L);

		columnBitmasks.put("shp_length", 1048576L);

		columnBitmasks.put("shp_height", 2097152L);

		columnBitmasks.put("shp_width", 4194304L);

		columnBitmasks.put("shp_strg_cpcty", 8388608L);

		columnBitmasks.put("shp_flr_cmntd", 16777216L);

		columnBitmasks.put("shp_sign_brd", 33554432L);

		columnBitmasks.put("dlr_licns_posses", 67108864L);

		columnBitmasks.put("dlr_run_shp_himself", 134217728L);

		columnBitmasks.put("dlr_fmly_dlr_shp_flg", 268435456L);

		columnBitmasks.put("version", 536870912L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfDlrRegAddlDtls _escapedModel;

}