/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.dealer.registration.model.impl;

import bd.gov.dgfood.dealer.registration.model.DgfDlrRegDtls;
import bd.gov.dgfood.dealer.registration.model.DgfDlrRegDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfDlrRegDtls service. Represents a row in the &quot;dgf_dlr_reg_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfDlrRegDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfDlrRegDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfDlrRegDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfDlrRegDtlsModelImpl
	extends BaseModelImpl<DgfDlrRegDtls> implements DgfDlrRegDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf dlr reg dtls model instance should use the <code>DgfDlrRegDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_dlr_reg_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"dlr_reg_no", Types.BIGINT}, {"national_id", Types.VARCHAR},
		{"user_id", Types.BIGINT}, {"group_id", Types.BIGINT},
		{"company_id", Types.BIGINT}, {"dlr_reg_appl_no", Types.BIGINT},
		{"fgl_licns_no", Types.VARCHAR},
		{"fgl_licns_issue_date", Types.TIMESTAMP},
		{"trd_licns_no", Types.BIGINT}, {"trd_licns_exp_date", Types.TIMESTAMP},
		{"dlr_type_id", Types.VARCHAR}, {"marital_status", Types.VARCHAR},
		{"spouse_name", Types.VARCHAR}, {"spouse_fthr_name", Types.VARCHAR},
		{"spouse_nid", Types.VARCHAR}, {"spouse_brth_date", Types.TIMESTAMP},
		{"dlr_reg_expiry_date", Types.TIMESTAMP},
		{"sap_bu_code", Types.VARCHAR}, {"dlr_reg_appl_status", Types.VARCHAR},
		{"dlr_reg_crtd_date", Types.TIMESTAMP},
		{"pymnt_trn_ref_no", Types.BIGINT}, {"pymnt_trn_status", Types.VARCHAR},
		{"challan_doc_id", Types.BIGINT}, {"incm_tax_attch_id", Types.BIGINT},
		{"bnk_solvncy_cert_id", Types.BIGINT},
		{"shp_ownship_docu_id", Types.BIGINT},
		{"shp_rented_docu_id", Types.BIGINT}, {"signature_id", Types.BIGINT},
		{"dlr_appr_rjct_comments", Types.VARCHAR},
		{"dlr_reg_appr_rej_rmrk", Types.VARCHAR}, {"status", Types.INTEGER},
		{"status_by_user_id", Types.BIGINT},
		{"status_by_user_name", Types.VARCHAR},
		{"status_date", Types.TIMESTAMP}, {"version", Types.BIGINT},
		{"dlr_reg_crtd_by", Types.VARCHAR}, {"create_date", Types.TIMESTAMP},
		{"last_updtd_by", Types.BIGINT}, {"modifed_date", Types.TIMESTAMP},
		{"dlr_oms_sub_type", Types.VARCHAR}, {"division", Types.BIGINT},
		{"district", Types.BIGINT}, {"upzilla", Types.BIGINT},
		{"union_name", Types.BIGINT}, {"dlr_brth_date", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dlr_reg_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("national_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_reg_appl_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fgl_licns_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fgl_licns_issue_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("trd_licns_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trd_licns_exp_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dlr_type_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("marital_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_fthr_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_nid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_brth_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dlr_reg_expiry_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sap_bu_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_reg_appl_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_reg_crtd_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pymnt_trn_ref_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pymnt_trn_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("challan_doc_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("incm_tax_attch_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bnk_solvncy_cert_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_ownship_docu_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_rented_docu_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("signature_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_appr_rjct_comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_reg_appr_rej_rmrk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status_by_user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status_by_user_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("version", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_reg_crtd_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("last_updtd_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifed_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dlr_oms_sub_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("division", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("district", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("upzilla", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("union_name", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_brth_date", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_dlr_reg_dtls (dlr_reg_no LONG not null primary key,national_id VARCHAR(75) null,user_id LONG,group_id LONG,company_id LONG,dlr_reg_appl_no LONG,fgl_licns_no VARCHAR(75) null,fgl_licns_issue_date DATE null,trd_licns_no LONG,trd_licns_exp_date DATE null,dlr_type_id VARCHAR(75) null,marital_status VARCHAR(75) null,spouse_name VARCHAR(75) null,spouse_fthr_name VARCHAR(75) null,spouse_nid VARCHAR(75) null,spouse_brth_date DATE null,dlr_reg_expiry_date DATE null,sap_bu_code VARCHAR(75) null,dlr_reg_appl_status VARCHAR(75) null,dlr_reg_crtd_date DATE null,pymnt_trn_ref_no LONG,pymnt_trn_status VARCHAR(75) null,challan_doc_id LONG,incm_tax_attch_id LONG,bnk_solvncy_cert_id LONG,shp_ownship_docu_id LONG,shp_rented_docu_id LONG,signature_id LONG,dlr_appr_rjct_comments VARCHAR(75) null,dlr_reg_appr_rej_rmrk VARCHAR(75) null,status INTEGER,status_by_user_id LONG,status_by_user_name VARCHAR(75) null,status_date DATE null,version LONG,dlr_reg_crtd_by VARCHAR(75) null,create_date DATE null,last_updtd_by LONG,modifed_date DATE null,dlr_oms_sub_type VARCHAR(75) null,division LONG,district LONG,upzilla LONG,union_name LONG,dlr_brth_date DATE null)";

	public static final String TABLE_SQL_DROP = "drop table dgf_dlr_reg_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfDlrRegDtls.dlrRegNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_dlr_reg_dtls.dlr_reg_no ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLRREGNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLLICNSNO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfDlrRegDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dlrRegNo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDlrRegNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dlrRegNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfDlrRegDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfDlrRegDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfDlrRegDtls, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfDlrRegDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrRegDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfDlrRegDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfDlrRegDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfDlrRegDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfDlrRegDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfDlrRegDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfDlrRegDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfDlrRegDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfDlrRegDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfDlrRegDtls, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DgfDlrRegDtls, Object>>();
		Map<String, BiConsumer<DgfDlrRegDtls, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DgfDlrRegDtls, ?>>();

		attributeGetterFunctions.put("dlrRegNo", DgfDlrRegDtls::getDlrRegNo);
		attributeSetterBiConsumers.put(
			"dlrRegNo",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setDlrRegNo);
		attributeGetterFunctions.put(
			"nationalId", DgfDlrRegDtls::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setNationalId);
		attributeGetterFunctions.put("userId", DgfDlrRegDtls::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setUserId);
		attributeGetterFunctions.put("groupId", DgfDlrRegDtls::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setGroupId);
		attributeGetterFunctions.put("companyId", DgfDlrRegDtls::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setCompanyId);
		attributeGetterFunctions.put(
			"dlrRegApplNo", DgfDlrRegDtls::getDlrRegApplNo);
		attributeSetterBiConsumers.put(
			"dlrRegApplNo",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setDlrRegApplNo);
		attributeGetterFunctions.put(
			"fglLicnsNo", DgfDlrRegDtls::getFglLicnsNo);
		attributeSetterBiConsumers.put(
			"fglLicnsNo",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setFglLicnsNo);
		attributeGetterFunctions.put(
			"fglLicnsIssueDate", DgfDlrRegDtls::getFglLicnsIssueDate);
		attributeSetterBiConsumers.put(
			"fglLicnsIssueDate",
			(BiConsumer<DgfDlrRegDtls, Date>)
				DgfDlrRegDtls::setFglLicnsIssueDate);
		attributeGetterFunctions.put(
			"trdLicnsNo", DgfDlrRegDtls::getTrdLicnsNo);
		attributeSetterBiConsumers.put(
			"trdLicnsNo",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setTrdLicnsNo);
		attributeGetterFunctions.put(
			"trdLicnsExpDate", DgfDlrRegDtls::getTrdLicnsExpDate);
		attributeSetterBiConsumers.put(
			"trdLicnsExpDate",
			(BiConsumer<DgfDlrRegDtls, Date>)DgfDlrRegDtls::setTrdLicnsExpDate);
		attributeGetterFunctions.put("dlrTypeId", DgfDlrRegDtls::getDlrTypeId);
		attributeSetterBiConsumers.put(
			"dlrTypeId",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setDlrTypeId);
		attributeGetterFunctions.put(
			"maritalStatus", DgfDlrRegDtls::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setMaritalStatus);
		attributeGetterFunctions.put(
			"spouseName", DgfDlrRegDtls::getSpouseName);
		attributeSetterBiConsumers.put(
			"spouseName",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setSpouseName);
		attributeGetterFunctions.put(
			"spouseFthrName", DgfDlrRegDtls::getSpouseFthrName);
		attributeSetterBiConsumers.put(
			"spouseFthrName",
			(BiConsumer<DgfDlrRegDtls, String>)
				DgfDlrRegDtls::setSpouseFthrName);
		attributeGetterFunctions.put("spouseNid", DgfDlrRegDtls::getSpouseNid);
		attributeSetterBiConsumers.put(
			"spouseNid",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setSpouseNid);
		attributeGetterFunctions.put(
			"spouseBrthDate", DgfDlrRegDtls::getSpouseBrthDate);
		attributeSetterBiConsumers.put(
			"spouseBrthDate",
			(BiConsumer<DgfDlrRegDtls, Date>)DgfDlrRegDtls::setSpouseBrthDate);
		attributeGetterFunctions.put(
			"dlrRegExpiryDate", DgfDlrRegDtls::getDlrRegExpiryDate);
		attributeSetterBiConsumers.put(
			"dlrRegExpiryDate",
			(BiConsumer<DgfDlrRegDtls, Date>)
				DgfDlrRegDtls::setDlrRegExpiryDate);
		attributeGetterFunctions.put("sapBuCode", DgfDlrRegDtls::getSapBuCode);
		attributeSetterBiConsumers.put(
			"sapBuCode",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setSapBuCode);
		attributeGetterFunctions.put(
			"dlrRegApplStatus", DgfDlrRegDtls::getDlrRegApplStatus);
		attributeSetterBiConsumers.put(
			"dlrRegApplStatus",
			(BiConsumer<DgfDlrRegDtls, String>)
				DgfDlrRegDtls::setDlrRegApplStatus);
		attributeGetterFunctions.put(
			"dlrRegCrtdDate", DgfDlrRegDtls::getDlrRegCrtdDate);
		attributeSetterBiConsumers.put(
			"dlrRegCrtdDate",
			(BiConsumer<DgfDlrRegDtls, Date>)DgfDlrRegDtls::setDlrRegCrtdDate);
		attributeGetterFunctions.put(
			"pymntTrnRefNo", DgfDlrRegDtls::getPymntTrnRefNo);
		attributeSetterBiConsumers.put(
			"pymntTrnRefNo",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setPymntTrnRefNo);
		attributeGetterFunctions.put(
			"pymntTrnStatus", DgfDlrRegDtls::getPymntTrnStatus);
		attributeSetterBiConsumers.put(
			"pymntTrnStatus",
			(BiConsumer<DgfDlrRegDtls, String>)
				DgfDlrRegDtls::setPymntTrnStatus);
		attributeGetterFunctions.put(
			"challanDocId", DgfDlrRegDtls::getChallanDocId);
		attributeSetterBiConsumers.put(
			"challanDocId",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setChallanDocId);
		attributeGetterFunctions.put(
			"incmTaxAttchID", DgfDlrRegDtls::getIncmTaxAttchID);
		attributeSetterBiConsumers.put(
			"incmTaxAttchID",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setIncmTaxAttchID);
		attributeGetterFunctions.put(
			"bnkSolvncyCertId", DgfDlrRegDtls::getBnkSolvncyCertId);
		attributeSetterBiConsumers.put(
			"bnkSolvncyCertId",
			(BiConsumer<DgfDlrRegDtls, Long>)
				DgfDlrRegDtls::setBnkSolvncyCertId);
		attributeGetterFunctions.put(
			"shpOwnshipDocuId", DgfDlrRegDtls::getShpOwnshipDocuId);
		attributeSetterBiConsumers.put(
			"shpOwnshipDocuId",
			(BiConsumer<DgfDlrRegDtls, Long>)
				DgfDlrRegDtls::setShpOwnshipDocuId);
		attributeGetterFunctions.put(
			"shpRentedDocuId", DgfDlrRegDtls::getShpRentedDocuId);
		attributeSetterBiConsumers.put(
			"shpRentedDocuId",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setShpRentedDocuId);
		attributeGetterFunctions.put(
			"signatureId", DgfDlrRegDtls::getSignatureId);
		attributeSetterBiConsumers.put(
			"signatureId",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setSignatureId);
		attributeGetterFunctions.put(
			"dlrApprRjctComments", DgfDlrRegDtls::getDlrApprRjctComments);
		attributeSetterBiConsumers.put(
			"dlrApprRjctComments",
			(BiConsumer<DgfDlrRegDtls, String>)
				DgfDlrRegDtls::setDlrApprRjctComments);
		attributeGetterFunctions.put(
			"dlrRegApprRejRmrk", DgfDlrRegDtls::getDlrRegApprRejRmrk);
		attributeSetterBiConsumers.put(
			"dlrRegApprRejRmrk",
			(BiConsumer<DgfDlrRegDtls, String>)
				DgfDlrRegDtls::setDlrRegApprRejRmrk);
		attributeGetterFunctions.put("status", DgfDlrRegDtls::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<DgfDlrRegDtls, Integer>)DgfDlrRegDtls::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", DgfDlrRegDtls::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", DgfDlrRegDtls::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<DgfDlrRegDtls, String>)
				DgfDlrRegDtls::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", DgfDlrRegDtls::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<DgfDlrRegDtls, Date>)DgfDlrRegDtls::setStatusDate);
		attributeGetterFunctions.put("version", DgfDlrRegDtls::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setVersion);
		attributeGetterFunctions.put(
			"dlrRegCrtdBy", DgfDlrRegDtls::getDlrRegCrtdBy);
		attributeSetterBiConsumers.put(
			"dlrRegCrtdBy",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setDlrRegCrtdBy);
		attributeGetterFunctions.put(
			"createDate", DgfDlrRegDtls::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DgfDlrRegDtls, Date>)DgfDlrRegDtls::setCreateDate);
		attributeGetterFunctions.put(
			"lastUpdtdBy", DgfDlrRegDtls::getLastUpdtdBy);
		attributeSetterBiConsumers.put(
			"lastUpdtdBy",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setLastUpdtdBy);
		attributeGetterFunctions.put(
			"modifedDate", DgfDlrRegDtls::getModifedDate);
		attributeSetterBiConsumers.put(
			"modifedDate",
			(BiConsumer<DgfDlrRegDtls, Date>)DgfDlrRegDtls::setModifedDate);
		attributeGetterFunctions.put(
			"dlrOmsSubType", DgfDlrRegDtls::getDlrOmsSubType);
		attributeSetterBiConsumers.put(
			"dlrOmsSubType",
			(BiConsumer<DgfDlrRegDtls, String>)DgfDlrRegDtls::setDlrOmsSubType);
		attributeGetterFunctions.put("division", DgfDlrRegDtls::getDivision);
		attributeSetterBiConsumers.put(
			"division",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setDivision);
		attributeGetterFunctions.put("district", DgfDlrRegDtls::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setDistrict);
		attributeGetterFunctions.put("upzilla", DgfDlrRegDtls::getUpzilla);
		attributeSetterBiConsumers.put(
			"upzilla",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setUpzilla);
		attributeGetterFunctions.put("unionName", DgfDlrRegDtls::getUnionName);
		attributeSetterBiConsumers.put(
			"unionName",
			(BiConsumer<DgfDlrRegDtls, Long>)DgfDlrRegDtls::setUnionName);
		attributeGetterFunctions.put(
			"dlrBrthDate", DgfDlrRegDtls::getDlrBrthDate);
		attributeSetterBiConsumers.put(
			"dlrBrthDate",
			(BiConsumer<DgfDlrRegDtls, Date>)DgfDlrRegDtls::setDlrBrthDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDlrRegNo() {
		return _dlrRegNo;
	}

	@Override
	public void setDlrRegNo(long dlrRegNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegNo = dlrRegNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDlrRegNo() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("national_id");
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("user_id"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getDlrRegApplNo() {
		return _dlrRegApplNo;
	}

	@Override
	public void setDlrRegApplNo(long dlrRegApplNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegApplNo = dlrRegApplNo;
	}

	@JSON
	@Override
	public String getFglLicnsNo() {
		if (_fglLicnsNo == null) {
			return "";
		}
		else {
			return _fglLicnsNo;
		}
	}

	@Override
	public void setFglLicnsNo(String fglLicnsNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglLicnsNo = fglLicnsNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFglLicnsNo() {
		return getColumnOriginalValue("fgl_licns_no");
	}

	@JSON
	@Override
	public Date getFglLicnsIssueDate() {
		return _fglLicnsIssueDate;
	}

	@Override
	public void setFglLicnsIssueDate(Date fglLicnsIssueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglLicnsIssueDate = fglLicnsIssueDate;
	}

	@JSON
	@Override
	public long getTrdLicnsNo() {
		return _trdLicnsNo;
	}

	@Override
	public void setTrdLicnsNo(long trdLicnsNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trdLicnsNo = trdLicnsNo;
	}

	@JSON
	@Override
	public Date getTrdLicnsExpDate() {
		return _trdLicnsExpDate;
	}

	@Override
	public void setTrdLicnsExpDate(Date trdLicnsExpDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trdLicnsExpDate = trdLicnsExpDate;
	}

	@JSON
	@Override
	public String getDlrTypeId() {
		if (_dlrTypeId == null) {
			return "";
		}
		else {
			return _dlrTypeId;
		}
	}

	@Override
	public void setDlrTypeId(String dlrTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrTypeId = dlrTypeId;
	}

	@JSON
	@Override
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return "";
		}
		else {
			return _maritalStatus;
		}
	}

	@Override
	public void setMaritalStatus(String maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getSpouseName() {
		if (_spouseName == null) {
			return "";
		}
		else {
			return _spouseName;
		}
	}

	@Override
	public void setSpouseName(String spouseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseName = spouseName;
	}

	@JSON
	@Override
	public String getSpouseFthrName() {
		if (_spouseFthrName == null) {
			return "";
		}
		else {
			return _spouseFthrName;
		}
	}

	@Override
	public void setSpouseFthrName(String spouseFthrName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseFthrName = spouseFthrName;
	}

	@JSON
	@Override
	public String getSpouseNid() {
		if (_spouseNid == null) {
			return "";
		}
		else {
			return _spouseNid;
		}
	}

	@Override
	public void setSpouseNid(String spouseNid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseNid = spouseNid;
	}

	@JSON
	@Override
	public Date getSpouseBrthDate() {
		return _spouseBrthDate;
	}

	@Override
	public void setSpouseBrthDate(Date spouseBrthDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseBrthDate = spouseBrthDate;
	}

	@JSON
	@Override
	public Date getDlrRegExpiryDate() {
		return _dlrRegExpiryDate;
	}

	@Override
	public void setDlrRegExpiryDate(Date dlrRegExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegExpiryDate = dlrRegExpiryDate;
	}

	@JSON
	@Override
	public String getSapBuCode() {
		if (_sapBuCode == null) {
			return "";
		}
		else {
			return _sapBuCode;
		}
	}

	@Override
	public void setSapBuCode(String sapBuCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sapBuCode = sapBuCode;
	}

	@JSON
	@Override
	public String getDlrRegApplStatus() {
		if (_dlrRegApplStatus == null) {
			return "";
		}
		else {
			return _dlrRegApplStatus;
		}
	}

	@Override
	public void setDlrRegApplStatus(String dlrRegApplStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegApplStatus = dlrRegApplStatus;
	}

	@JSON
	@Override
	public Date getDlrRegCrtdDate() {
		return _dlrRegCrtdDate;
	}

	@Override
	public void setDlrRegCrtdDate(Date dlrRegCrtdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegCrtdDate = dlrRegCrtdDate;
	}

	@JSON
	@Override
	public long getPymntTrnRefNo() {
		return _pymntTrnRefNo;
	}

	@Override
	public void setPymntTrnRefNo(long pymntTrnRefNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pymntTrnRefNo = pymntTrnRefNo;
	}

	@JSON
	@Override
	public String getPymntTrnStatus() {
		if (_pymntTrnStatus == null) {
			return "";
		}
		else {
			return _pymntTrnStatus;
		}
	}

	@Override
	public void setPymntTrnStatus(String pymntTrnStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pymntTrnStatus = pymntTrnStatus;
	}

	@JSON
	@Override
	public long getChallanDocId() {
		return _challanDocId;
	}

	@Override
	public void setChallanDocId(long challanDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_challanDocId = challanDocId;
	}

	@JSON
	@Override
	public long getIncmTaxAttchID() {
		return _incmTaxAttchID;
	}

	@Override
	public void setIncmTaxAttchID(long incmTaxAttchID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_incmTaxAttchID = incmTaxAttchID;
	}

	@JSON
	@Override
	public long getBnkSolvncyCertId() {
		return _bnkSolvncyCertId;
	}

	@Override
	public void setBnkSolvncyCertId(long bnkSolvncyCertId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bnkSolvncyCertId = bnkSolvncyCertId;
	}

	@JSON
	@Override
	public long getShpOwnshipDocuId() {
		return _shpOwnshipDocuId;
	}

	@Override
	public void setShpOwnshipDocuId(long shpOwnshipDocuId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpOwnshipDocuId = shpOwnshipDocuId;
	}

	@JSON
	@Override
	public long getShpRentedDocuId() {
		return _shpRentedDocuId;
	}

	@Override
	public void setShpRentedDocuId(long shpRentedDocuId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpRentedDocuId = shpRentedDocuId;
	}

	@JSON
	@Override
	public long getSignatureId() {
		return _signatureId;
	}

	@Override
	public void setSignatureId(long signatureId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatureId = signatureId;
	}

	@JSON
	@Override
	public String getDlrApprRjctComments() {
		if (_dlrApprRjctComments == null) {
			return "";
		}
		else {
			return _dlrApprRjctComments;
		}
	}

	@Override
	public void setDlrApprRjctComments(String dlrApprRjctComments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrApprRjctComments = dlrApprRjctComments;
	}

	@JSON
	@Override
	public String getDlrRegApprRejRmrk() {
		if (_dlrRegApprRejRmrk == null) {
			return "";
		}
		else {
			return _dlrRegApprRejRmrk;
		}
	}

	@Override
	public void setDlrRegApprRejRmrk(String dlrRegApprRejRmrk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegApprRejRmrk = dlrRegApprRejRmrk;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getVersion() {
		return _version;
	}

	@Override
	public void setVersion(long version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public String getDlrRegCrtdBy() {
		if (_dlrRegCrtdBy == null) {
			return "";
		}
		else {
			return _dlrRegCrtdBy;
		}
	}

	@Override
	public void setDlrRegCrtdBy(String dlrRegCrtdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegCrtdBy = dlrRegCrtdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getLastUpdtdBy() {
		return _lastUpdtdBy;
	}

	@Override
	public void setLastUpdtdBy(long lastUpdtdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastUpdtdBy = lastUpdtdBy;
	}

	@JSON
	@Override
	public Date getModifedDate() {
		return _modifedDate;
	}

	@Override
	public void setModifedDate(Date modifedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifedDate = modifedDate;
	}

	@JSON
	@Override
	public String getDlrOmsSubType() {
		if (_dlrOmsSubType == null) {
			return "";
		}
		else {
			return _dlrOmsSubType;
		}
	}

	@Override
	public void setDlrOmsSubType(String dlrOmsSubType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrOmsSubType = dlrOmsSubType;
	}

	@JSON
	@Override
	public long getDivision() {
		return _division;
	}

	@Override
	public void setDivision(long division) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_division = division;
	}

	@JSON
	@Override
	public long getDistrict() {
		return _district;
	}

	@Override
	public void setDistrict(long district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public long getUpzilla() {
		return _upzilla;
	}

	@Override
	public void setUpzilla(long upzilla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_upzilla = upzilla;
	}

	@JSON
	@Override
	public long getUnionName() {
		return _unionName;
	}

	@Override
	public void setUnionName(long unionName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unionName = unionName;
	}

	@JSON
	@Override
	public Date getDlrBrthDate() {
		return _dlrBrthDate;
	}

	@Override
	public void setDlrBrthDate(Date dlrBrthDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrBrthDate = dlrBrthDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DgfDlrRegDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfDlrRegDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfDlrRegDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfDlrRegDtlsImpl dgfDlrRegDtlsImpl = new DgfDlrRegDtlsImpl();

		dgfDlrRegDtlsImpl.setDlrRegNo(getDlrRegNo());
		dgfDlrRegDtlsImpl.setNationalId(getNationalId());
		dgfDlrRegDtlsImpl.setUserId(getUserId());
		dgfDlrRegDtlsImpl.setGroupId(getGroupId());
		dgfDlrRegDtlsImpl.setCompanyId(getCompanyId());
		dgfDlrRegDtlsImpl.setDlrRegApplNo(getDlrRegApplNo());
		dgfDlrRegDtlsImpl.setFglLicnsNo(getFglLicnsNo());
		dgfDlrRegDtlsImpl.setFglLicnsIssueDate(getFglLicnsIssueDate());
		dgfDlrRegDtlsImpl.setTrdLicnsNo(getTrdLicnsNo());
		dgfDlrRegDtlsImpl.setTrdLicnsExpDate(getTrdLicnsExpDate());
		dgfDlrRegDtlsImpl.setDlrTypeId(getDlrTypeId());
		dgfDlrRegDtlsImpl.setMaritalStatus(getMaritalStatus());
		dgfDlrRegDtlsImpl.setSpouseName(getSpouseName());
		dgfDlrRegDtlsImpl.setSpouseFthrName(getSpouseFthrName());
		dgfDlrRegDtlsImpl.setSpouseNid(getSpouseNid());
		dgfDlrRegDtlsImpl.setSpouseBrthDate(getSpouseBrthDate());
		dgfDlrRegDtlsImpl.setDlrRegExpiryDate(getDlrRegExpiryDate());
		dgfDlrRegDtlsImpl.setSapBuCode(getSapBuCode());
		dgfDlrRegDtlsImpl.setDlrRegApplStatus(getDlrRegApplStatus());
		dgfDlrRegDtlsImpl.setDlrRegCrtdDate(getDlrRegCrtdDate());
		dgfDlrRegDtlsImpl.setPymntTrnRefNo(getPymntTrnRefNo());
		dgfDlrRegDtlsImpl.setPymntTrnStatus(getPymntTrnStatus());
		dgfDlrRegDtlsImpl.setChallanDocId(getChallanDocId());
		dgfDlrRegDtlsImpl.setIncmTaxAttchID(getIncmTaxAttchID());
		dgfDlrRegDtlsImpl.setBnkSolvncyCertId(getBnkSolvncyCertId());
		dgfDlrRegDtlsImpl.setShpOwnshipDocuId(getShpOwnshipDocuId());
		dgfDlrRegDtlsImpl.setShpRentedDocuId(getShpRentedDocuId());
		dgfDlrRegDtlsImpl.setSignatureId(getSignatureId());
		dgfDlrRegDtlsImpl.setDlrApprRjctComments(getDlrApprRjctComments());
		dgfDlrRegDtlsImpl.setDlrRegApprRejRmrk(getDlrRegApprRejRmrk());
		dgfDlrRegDtlsImpl.setStatus(getStatus());
		dgfDlrRegDtlsImpl.setStatusByUserId(getStatusByUserId());
		dgfDlrRegDtlsImpl.setStatusByUserName(getStatusByUserName());
		dgfDlrRegDtlsImpl.setStatusDate(getStatusDate());
		dgfDlrRegDtlsImpl.setVersion(getVersion());
		dgfDlrRegDtlsImpl.setDlrRegCrtdBy(getDlrRegCrtdBy());
		dgfDlrRegDtlsImpl.setCreateDate(getCreateDate());
		dgfDlrRegDtlsImpl.setLastUpdtdBy(getLastUpdtdBy());
		dgfDlrRegDtlsImpl.setModifedDate(getModifedDate());
		dgfDlrRegDtlsImpl.setDlrOmsSubType(getDlrOmsSubType());
		dgfDlrRegDtlsImpl.setDivision(getDivision());
		dgfDlrRegDtlsImpl.setDistrict(getDistrict());
		dgfDlrRegDtlsImpl.setUpzilla(getUpzilla());
		dgfDlrRegDtlsImpl.setUnionName(getUnionName());
		dgfDlrRegDtlsImpl.setDlrBrthDate(getDlrBrthDate());

		dgfDlrRegDtlsImpl.resetOriginalValues();

		return dgfDlrRegDtlsImpl;
	}

	@Override
	public DgfDlrRegDtls cloneWithOriginalValues() {
		DgfDlrRegDtlsImpl dgfDlrRegDtlsImpl = new DgfDlrRegDtlsImpl();

		dgfDlrRegDtlsImpl.setDlrRegNo(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
		dgfDlrRegDtlsImpl.setNationalId(
			this.<String>getColumnOriginalValue("national_id"));
		dgfDlrRegDtlsImpl.setUserId(
			this.<Long>getColumnOriginalValue("user_id"));
		dgfDlrRegDtlsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		dgfDlrRegDtlsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		dgfDlrRegDtlsImpl.setDlrRegApplNo(
			this.<Long>getColumnOriginalValue("dlr_reg_appl_no"));
		dgfDlrRegDtlsImpl.setFglLicnsNo(
			this.<String>getColumnOriginalValue("fgl_licns_no"));
		dgfDlrRegDtlsImpl.setFglLicnsIssueDate(
			this.<Date>getColumnOriginalValue("fgl_licns_issue_date"));
		dgfDlrRegDtlsImpl.setTrdLicnsNo(
			this.<Long>getColumnOriginalValue("trd_licns_no"));
		dgfDlrRegDtlsImpl.setTrdLicnsExpDate(
			this.<Date>getColumnOriginalValue("trd_licns_exp_date"));
		dgfDlrRegDtlsImpl.setDlrTypeId(
			this.<String>getColumnOriginalValue("dlr_type_id"));
		dgfDlrRegDtlsImpl.setMaritalStatus(
			this.<String>getColumnOriginalValue("marital_status"));
		dgfDlrRegDtlsImpl.setSpouseName(
			this.<String>getColumnOriginalValue("spouse_name"));
		dgfDlrRegDtlsImpl.setSpouseFthrName(
			this.<String>getColumnOriginalValue("spouse_fthr_name"));
		dgfDlrRegDtlsImpl.setSpouseNid(
			this.<String>getColumnOriginalValue("spouse_nid"));
		dgfDlrRegDtlsImpl.setSpouseBrthDate(
			this.<Date>getColumnOriginalValue("spouse_brth_date"));
		dgfDlrRegDtlsImpl.setDlrRegExpiryDate(
			this.<Date>getColumnOriginalValue("dlr_reg_expiry_date"));
		dgfDlrRegDtlsImpl.setSapBuCode(
			this.<String>getColumnOriginalValue("sap_bu_code"));
		dgfDlrRegDtlsImpl.setDlrRegApplStatus(
			this.<String>getColumnOriginalValue("dlr_reg_appl_status"));
		dgfDlrRegDtlsImpl.setDlrRegCrtdDate(
			this.<Date>getColumnOriginalValue("dlr_reg_crtd_date"));
		dgfDlrRegDtlsImpl.setPymntTrnRefNo(
			this.<Long>getColumnOriginalValue("pymnt_trn_ref_no"));
		dgfDlrRegDtlsImpl.setPymntTrnStatus(
			this.<String>getColumnOriginalValue("pymnt_trn_status"));
		dgfDlrRegDtlsImpl.setChallanDocId(
			this.<Long>getColumnOriginalValue("challan_doc_id"));
		dgfDlrRegDtlsImpl.setIncmTaxAttchID(
			this.<Long>getColumnOriginalValue("incm_tax_attch_id"));
		dgfDlrRegDtlsImpl.setBnkSolvncyCertId(
			this.<Long>getColumnOriginalValue("bnk_solvncy_cert_id"));
		dgfDlrRegDtlsImpl.setShpOwnshipDocuId(
			this.<Long>getColumnOriginalValue("shp_ownship_docu_id"));
		dgfDlrRegDtlsImpl.setShpRentedDocuId(
			this.<Long>getColumnOriginalValue("shp_rented_docu_id"));
		dgfDlrRegDtlsImpl.setSignatureId(
			this.<Long>getColumnOriginalValue("signature_id"));
		dgfDlrRegDtlsImpl.setDlrApprRjctComments(
			this.<String>getColumnOriginalValue("dlr_appr_rjct_comments"));
		dgfDlrRegDtlsImpl.setDlrRegApprRejRmrk(
			this.<String>getColumnOriginalValue("dlr_reg_appr_rej_rmrk"));
		dgfDlrRegDtlsImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		dgfDlrRegDtlsImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("status_by_user_id"));
		dgfDlrRegDtlsImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("status_by_user_name"));
		dgfDlrRegDtlsImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("status_date"));
		dgfDlrRegDtlsImpl.setVersion(
			this.<Long>getColumnOriginalValue("version"));
		dgfDlrRegDtlsImpl.setDlrRegCrtdBy(
			this.<String>getColumnOriginalValue("dlr_reg_crtd_by"));
		dgfDlrRegDtlsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		dgfDlrRegDtlsImpl.setLastUpdtdBy(
			this.<Long>getColumnOriginalValue("last_updtd_by"));
		dgfDlrRegDtlsImpl.setModifedDate(
			this.<Date>getColumnOriginalValue("modifed_date"));
		dgfDlrRegDtlsImpl.setDlrOmsSubType(
			this.<String>getColumnOriginalValue("dlr_oms_sub_type"));
		dgfDlrRegDtlsImpl.setDivision(
			this.<Long>getColumnOriginalValue("division"));
		dgfDlrRegDtlsImpl.setDistrict(
			this.<Long>getColumnOriginalValue("district"));
		dgfDlrRegDtlsImpl.setUpzilla(
			this.<Long>getColumnOriginalValue("upzilla"));
		dgfDlrRegDtlsImpl.setUnionName(
			this.<Long>getColumnOriginalValue("union_name"));
		dgfDlrRegDtlsImpl.setDlrBrthDate(
			this.<Date>getColumnOriginalValue("dlr_brth_date"));

		return dgfDlrRegDtlsImpl;
	}

	@Override
	public int compareTo(DgfDlrRegDtls dgfDlrRegDtls) {
		long primaryKey = dgfDlrRegDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfDlrRegDtls)) {
			return false;
		}

		DgfDlrRegDtls dgfDlrRegDtls = (DgfDlrRegDtls)object;

		long primaryKey = dgfDlrRegDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfDlrRegDtls> toCacheModel() {
		DgfDlrRegDtlsCacheModel dgfDlrRegDtlsCacheModel =
			new DgfDlrRegDtlsCacheModel();

		dgfDlrRegDtlsCacheModel.dlrRegNo = getDlrRegNo();

		dgfDlrRegDtlsCacheModel.nationalId = getNationalId();

		String nationalId = dgfDlrRegDtlsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfDlrRegDtlsCacheModel.nationalId = null;
		}

		dgfDlrRegDtlsCacheModel.userId = getUserId();

		dgfDlrRegDtlsCacheModel.groupId = getGroupId();

		dgfDlrRegDtlsCacheModel.companyId = getCompanyId();

		dgfDlrRegDtlsCacheModel.dlrRegApplNo = getDlrRegApplNo();

		dgfDlrRegDtlsCacheModel.fglLicnsNo = getFglLicnsNo();

		String fglLicnsNo = dgfDlrRegDtlsCacheModel.fglLicnsNo;

		if ((fglLicnsNo != null) && (fglLicnsNo.length() == 0)) {
			dgfDlrRegDtlsCacheModel.fglLicnsNo = null;
		}

		Date fglLicnsIssueDate = getFglLicnsIssueDate();

		if (fglLicnsIssueDate != null) {
			dgfDlrRegDtlsCacheModel.fglLicnsIssueDate =
				fglLicnsIssueDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.fglLicnsIssueDate = Long.MIN_VALUE;
		}

		dgfDlrRegDtlsCacheModel.trdLicnsNo = getTrdLicnsNo();

		Date trdLicnsExpDate = getTrdLicnsExpDate();

		if (trdLicnsExpDate != null) {
			dgfDlrRegDtlsCacheModel.trdLicnsExpDate = trdLicnsExpDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.trdLicnsExpDate = Long.MIN_VALUE;
		}

		dgfDlrRegDtlsCacheModel.dlrTypeId = getDlrTypeId();

		String dlrTypeId = dgfDlrRegDtlsCacheModel.dlrTypeId;

		if ((dlrTypeId != null) && (dlrTypeId.length() == 0)) {
			dgfDlrRegDtlsCacheModel.dlrTypeId = null;
		}

		dgfDlrRegDtlsCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = dgfDlrRegDtlsCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			dgfDlrRegDtlsCacheModel.maritalStatus = null;
		}

		dgfDlrRegDtlsCacheModel.spouseName = getSpouseName();

		String spouseName = dgfDlrRegDtlsCacheModel.spouseName;

		if ((spouseName != null) && (spouseName.length() == 0)) {
			dgfDlrRegDtlsCacheModel.spouseName = null;
		}

		dgfDlrRegDtlsCacheModel.spouseFthrName = getSpouseFthrName();

		String spouseFthrName = dgfDlrRegDtlsCacheModel.spouseFthrName;

		if ((spouseFthrName != null) && (spouseFthrName.length() == 0)) {
			dgfDlrRegDtlsCacheModel.spouseFthrName = null;
		}

		dgfDlrRegDtlsCacheModel.spouseNid = getSpouseNid();

		String spouseNid = dgfDlrRegDtlsCacheModel.spouseNid;

		if ((spouseNid != null) && (spouseNid.length() == 0)) {
			dgfDlrRegDtlsCacheModel.spouseNid = null;
		}

		Date spouseBrthDate = getSpouseBrthDate();

		if (spouseBrthDate != null) {
			dgfDlrRegDtlsCacheModel.spouseBrthDate = spouseBrthDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.spouseBrthDate = Long.MIN_VALUE;
		}

		Date dlrRegExpiryDate = getDlrRegExpiryDate();

		if (dlrRegExpiryDate != null) {
			dgfDlrRegDtlsCacheModel.dlrRegExpiryDate =
				dlrRegExpiryDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.dlrRegExpiryDate = Long.MIN_VALUE;
		}

		dgfDlrRegDtlsCacheModel.sapBuCode = getSapBuCode();

		String sapBuCode = dgfDlrRegDtlsCacheModel.sapBuCode;

		if ((sapBuCode != null) && (sapBuCode.length() == 0)) {
			dgfDlrRegDtlsCacheModel.sapBuCode = null;
		}

		dgfDlrRegDtlsCacheModel.dlrRegApplStatus = getDlrRegApplStatus();

		String dlrRegApplStatus = dgfDlrRegDtlsCacheModel.dlrRegApplStatus;

		if ((dlrRegApplStatus != null) && (dlrRegApplStatus.length() == 0)) {
			dgfDlrRegDtlsCacheModel.dlrRegApplStatus = null;
		}

		Date dlrRegCrtdDate = getDlrRegCrtdDate();

		if (dlrRegCrtdDate != null) {
			dgfDlrRegDtlsCacheModel.dlrRegCrtdDate = dlrRegCrtdDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.dlrRegCrtdDate = Long.MIN_VALUE;
		}

		dgfDlrRegDtlsCacheModel.pymntTrnRefNo = getPymntTrnRefNo();

		dgfDlrRegDtlsCacheModel.pymntTrnStatus = getPymntTrnStatus();

		String pymntTrnStatus = dgfDlrRegDtlsCacheModel.pymntTrnStatus;

		if ((pymntTrnStatus != null) && (pymntTrnStatus.length() == 0)) {
			dgfDlrRegDtlsCacheModel.pymntTrnStatus = null;
		}

		dgfDlrRegDtlsCacheModel.challanDocId = getChallanDocId();

		dgfDlrRegDtlsCacheModel.incmTaxAttchID = getIncmTaxAttchID();

		dgfDlrRegDtlsCacheModel.bnkSolvncyCertId = getBnkSolvncyCertId();

		dgfDlrRegDtlsCacheModel.shpOwnshipDocuId = getShpOwnshipDocuId();

		dgfDlrRegDtlsCacheModel.shpRentedDocuId = getShpRentedDocuId();

		dgfDlrRegDtlsCacheModel.signatureId = getSignatureId();

		dgfDlrRegDtlsCacheModel.dlrApprRjctComments = getDlrApprRjctComments();

		String dlrApprRjctComments =
			dgfDlrRegDtlsCacheModel.dlrApprRjctComments;

		if ((dlrApprRjctComments != null) &&
			(dlrApprRjctComments.length() == 0)) {

			dgfDlrRegDtlsCacheModel.dlrApprRjctComments = null;
		}

		dgfDlrRegDtlsCacheModel.dlrRegApprRejRmrk = getDlrRegApprRejRmrk();

		String dlrRegApprRejRmrk = dgfDlrRegDtlsCacheModel.dlrRegApprRejRmrk;

		if ((dlrRegApprRejRmrk != null) && (dlrRegApprRejRmrk.length() == 0)) {
			dgfDlrRegDtlsCacheModel.dlrRegApprRejRmrk = null;
		}

		dgfDlrRegDtlsCacheModel.status = getStatus();

		dgfDlrRegDtlsCacheModel.statusByUserId = getStatusByUserId();

		dgfDlrRegDtlsCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = dgfDlrRegDtlsCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			dgfDlrRegDtlsCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			dgfDlrRegDtlsCacheModel.statusDate = statusDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.statusDate = Long.MIN_VALUE;
		}

		dgfDlrRegDtlsCacheModel.version = getVersion();

		dgfDlrRegDtlsCacheModel.dlrRegCrtdBy = getDlrRegCrtdBy();

		String dlrRegCrtdBy = dgfDlrRegDtlsCacheModel.dlrRegCrtdBy;

		if ((dlrRegCrtdBy != null) && (dlrRegCrtdBy.length() == 0)) {
			dgfDlrRegDtlsCacheModel.dlrRegCrtdBy = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dgfDlrRegDtlsCacheModel.createDate = createDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.createDate = Long.MIN_VALUE;
		}

		dgfDlrRegDtlsCacheModel.lastUpdtdBy = getLastUpdtdBy();

		Date modifedDate = getModifedDate();

		if (modifedDate != null) {
			dgfDlrRegDtlsCacheModel.modifedDate = modifedDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.modifedDate = Long.MIN_VALUE;
		}

		dgfDlrRegDtlsCacheModel.dlrOmsSubType = getDlrOmsSubType();

		String dlrOmsSubType = dgfDlrRegDtlsCacheModel.dlrOmsSubType;

		if ((dlrOmsSubType != null) && (dlrOmsSubType.length() == 0)) {
			dgfDlrRegDtlsCacheModel.dlrOmsSubType = null;
		}

		dgfDlrRegDtlsCacheModel.division = getDivision();

		dgfDlrRegDtlsCacheModel.district = getDistrict();

		dgfDlrRegDtlsCacheModel.upzilla = getUpzilla();

		dgfDlrRegDtlsCacheModel.unionName = getUnionName();

		Date dlrBrthDate = getDlrBrthDate();

		if (dlrBrthDate != null) {
			dgfDlrRegDtlsCacheModel.dlrBrthDate = dlrBrthDate.getTime();
		}
		else {
			dgfDlrRegDtlsCacheModel.dlrBrthDate = Long.MIN_VALUE;
		}

		return dgfDlrRegDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfDlrRegDtls, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfDlrRegDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrRegDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DgfDlrRegDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfDlrRegDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfDlrRegDtls.class, ModelWrapper.class);

	}

	private long _dlrRegNo;
	private String _nationalId;
	private long _userId;
	private long _groupId;
	private long _companyId;
	private long _dlrRegApplNo;
	private String _fglLicnsNo;
	private Date _fglLicnsIssueDate;
	private long _trdLicnsNo;
	private Date _trdLicnsExpDate;
	private String _dlrTypeId;
	private String _maritalStatus;
	private String _spouseName;
	private String _spouseFthrName;
	private String _spouseNid;
	private Date _spouseBrthDate;
	private Date _dlrRegExpiryDate;
	private String _sapBuCode;
	private String _dlrRegApplStatus;
	private Date _dlrRegCrtdDate;
	private long _pymntTrnRefNo;
	private String _pymntTrnStatus;
	private long _challanDocId;
	private long _incmTaxAttchID;
	private long _bnkSolvncyCertId;
	private long _shpOwnshipDocuId;
	private long _shpRentedDocuId;
	private long _signatureId;
	private String _dlrApprRjctComments;
	private String _dlrRegApprRejRmrk;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _version;
	private String _dlrRegCrtdBy;
	private Date _createDate;
	private long _lastUpdtdBy;
	private Date _modifedDate;
	private String _dlrOmsSubType;
	private long _division;
	private long _district;
	private long _upzilla;
	private long _unionName;
	private Date _dlrBrthDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfDlrRegDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfDlrRegDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("dlr_reg_no", _dlrRegNo);
		_columnOriginalValues.put("national_id", _nationalId);
		_columnOriginalValues.put("user_id", _userId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("dlr_reg_appl_no", _dlrRegApplNo);
		_columnOriginalValues.put("fgl_licns_no", _fglLicnsNo);
		_columnOriginalValues.put("fgl_licns_issue_date", _fglLicnsIssueDate);
		_columnOriginalValues.put("trd_licns_no", _trdLicnsNo);
		_columnOriginalValues.put("trd_licns_exp_date", _trdLicnsExpDate);
		_columnOriginalValues.put("dlr_type_id", _dlrTypeId);
		_columnOriginalValues.put("marital_status", _maritalStatus);
		_columnOriginalValues.put("spouse_name", _spouseName);
		_columnOriginalValues.put("spouse_fthr_name", _spouseFthrName);
		_columnOriginalValues.put("spouse_nid", _spouseNid);
		_columnOriginalValues.put("spouse_brth_date", _spouseBrthDate);
		_columnOriginalValues.put("dlr_reg_expiry_date", _dlrRegExpiryDate);
		_columnOriginalValues.put("sap_bu_code", _sapBuCode);
		_columnOriginalValues.put("dlr_reg_appl_status", _dlrRegApplStatus);
		_columnOriginalValues.put("dlr_reg_crtd_date", _dlrRegCrtdDate);
		_columnOriginalValues.put("pymnt_trn_ref_no", _pymntTrnRefNo);
		_columnOriginalValues.put("pymnt_trn_status", _pymntTrnStatus);
		_columnOriginalValues.put("challan_doc_id", _challanDocId);
		_columnOriginalValues.put("incm_tax_attch_id", _incmTaxAttchID);
		_columnOriginalValues.put("bnk_solvncy_cert_id", _bnkSolvncyCertId);
		_columnOriginalValues.put("shp_ownship_docu_id", _shpOwnshipDocuId);
		_columnOriginalValues.put("shp_rented_docu_id", _shpRentedDocuId);
		_columnOriginalValues.put("signature_id", _signatureId);
		_columnOriginalValues.put(
			"dlr_appr_rjct_comments", _dlrApprRjctComments);
		_columnOriginalValues.put("dlr_reg_appr_rej_rmrk", _dlrRegApprRejRmrk);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("status_by_user_id", _statusByUserId);
		_columnOriginalValues.put("status_by_user_name", _statusByUserName);
		_columnOriginalValues.put("status_date", _statusDate);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("dlr_reg_crtd_by", _dlrRegCrtdBy);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("last_updtd_by", _lastUpdtdBy);
		_columnOriginalValues.put("modifed_date", _modifedDate);
		_columnOriginalValues.put("dlr_oms_sub_type", _dlrOmsSubType);
		_columnOriginalValues.put("division", _division);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("upzilla", _upzilla);
		_columnOriginalValues.put("union_name", _unionName);
		_columnOriginalValues.put("dlr_brth_date", _dlrBrthDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("dlr_reg_no", "dlrRegNo");
		attributeNames.put("national_id", "nationalId");
		attributeNames.put("user_id", "userId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("dlr_reg_appl_no", "dlrRegApplNo");
		attributeNames.put("fgl_licns_no", "fglLicnsNo");
		attributeNames.put("fgl_licns_issue_date", "fglLicnsIssueDate");
		attributeNames.put("trd_licns_no", "trdLicnsNo");
		attributeNames.put("trd_licns_exp_date", "trdLicnsExpDate");
		attributeNames.put("dlr_type_id", "dlrTypeId");
		attributeNames.put("marital_status", "maritalStatus");
		attributeNames.put("spouse_name", "spouseName");
		attributeNames.put("spouse_fthr_name", "spouseFthrName");
		attributeNames.put("spouse_nid", "spouseNid");
		attributeNames.put("spouse_brth_date", "spouseBrthDate");
		attributeNames.put("dlr_reg_expiry_date", "dlrRegExpiryDate");
		attributeNames.put("sap_bu_code", "sapBuCode");
		attributeNames.put("dlr_reg_appl_status", "dlrRegApplStatus");
		attributeNames.put("dlr_reg_crtd_date", "dlrRegCrtdDate");
		attributeNames.put("pymnt_trn_ref_no", "pymntTrnRefNo");
		attributeNames.put("pymnt_trn_status", "pymntTrnStatus");
		attributeNames.put("challan_doc_id", "challanDocId");
		attributeNames.put("incm_tax_attch_id", "incmTaxAttchID");
		attributeNames.put("bnk_solvncy_cert_id", "bnkSolvncyCertId");
		attributeNames.put("shp_ownship_docu_id", "shpOwnshipDocuId");
		attributeNames.put("shp_rented_docu_id", "shpRentedDocuId");
		attributeNames.put("signature_id", "signatureId");
		attributeNames.put("dlr_appr_rjct_comments", "dlrApprRjctComments");
		attributeNames.put("dlr_reg_appr_rej_rmrk", "dlrRegApprRejRmrk");
		attributeNames.put("status_by_user_id", "statusByUserId");
		attributeNames.put("status_by_user_name", "statusByUserName");
		attributeNames.put("status_date", "statusDate");
		attributeNames.put("dlr_reg_crtd_by", "dlrRegCrtdBy");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("last_updtd_by", "lastUpdtdBy");
		attributeNames.put("modifed_date", "modifedDate");
		attributeNames.put("dlr_oms_sub_type", "dlrOmsSubType");
		attributeNames.put("union_name", "unionName");
		attributeNames.put("dlr_brth_date", "dlrBrthDate");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("dlr_reg_no", 1L);

		columnBitmasks.put("national_id", 2L);

		columnBitmasks.put("user_id", 4L);

		columnBitmasks.put("group_id", 8L);

		columnBitmasks.put("company_id", 16L);

		columnBitmasks.put("dlr_reg_appl_no", 32L);

		columnBitmasks.put("fgl_licns_no", 64L);

		columnBitmasks.put("fgl_licns_issue_date", 128L);

		columnBitmasks.put("trd_licns_no", 256L);

		columnBitmasks.put("trd_licns_exp_date", 512L);

		columnBitmasks.put("dlr_type_id", 1024L);

		columnBitmasks.put("marital_status", 2048L);

		columnBitmasks.put("spouse_name", 4096L);

		columnBitmasks.put("spouse_fthr_name", 8192L);

		columnBitmasks.put("spouse_nid", 16384L);

		columnBitmasks.put("spouse_brth_date", 32768L);

		columnBitmasks.put("dlr_reg_expiry_date", 65536L);

		columnBitmasks.put("sap_bu_code", 131072L);

		columnBitmasks.put("dlr_reg_appl_status", 262144L);

		columnBitmasks.put("dlr_reg_crtd_date", 524288L);

		columnBitmasks.put("pymnt_trn_ref_no", 1048576L);

		columnBitmasks.put("pymnt_trn_status", 2097152L);

		columnBitmasks.put("challan_doc_id", 4194304L);

		columnBitmasks.put("incm_tax_attch_id", 8388608L);

		columnBitmasks.put("bnk_solvncy_cert_id", 16777216L);

		columnBitmasks.put("shp_ownship_docu_id", 33554432L);

		columnBitmasks.put("shp_rented_docu_id", 67108864L);

		columnBitmasks.put("signature_id", 134217728L);

		columnBitmasks.put("dlr_appr_rjct_comments", 268435456L);

		columnBitmasks.put("dlr_reg_appr_rej_rmrk", 536870912L);

		columnBitmasks.put("status", 1073741824L);

		columnBitmasks.put("status_by_user_id", 2147483648L);

		columnBitmasks.put("status_by_user_name", 4294967296L);

		columnBitmasks.put("status_date", 8589934592L);

		columnBitmasks.put("version", 17179869184L);

		columnBitmasks.put("dlr_reg_crtd_by", 34359738368L);

		columnBitmasks.put("create_date", 68719476736L);

		columnBitmasks.put("last_updtd_by", 137438953472L);

		columnBitmasks.put("modifed_date", 274877906944L);

		columnBitmasks.put("dlr_oms_sub_type", 549755813888L);

		columnBitmasks.put("division", 1099511627776L);

		columnBitmasks.put("district", 2199023255552L);

		columnBitmasks.put("upzilla", 4398046511104L);

		columnBitmasks.put("union_name", 8796093022208L);

		columnBitmasks.put("dlr_brth_date", 17592186044416L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfDlrRegDtls _escapedModel;

}