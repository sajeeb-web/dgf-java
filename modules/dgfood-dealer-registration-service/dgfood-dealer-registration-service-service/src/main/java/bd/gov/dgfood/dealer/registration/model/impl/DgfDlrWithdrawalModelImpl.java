/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.dealer.registration.model.impl;

import bd.gov.dgfood.dealer.registration.model.DgfDlrWithdrawal;
import bd.gov.dgfood.dealer.registration.model.DgfDlrWithdrawalModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfDlrWithdrawal service. Represents a row in the &quot;dgf_dlr_withdrawal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfDlrWithdrawalModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfDlrWithdrawalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfDlrWithdrawalImpl
 * @generated
 */
@JSON(strict = true)
public class DgfDlrWithdrawalModelImpl
	extends BaseModelImpl<DgfDlrWithdrawal> implements DgfDlrWithdrawalModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf dlr withdrawal model instance should use the <code>DgfDlrWithdrawal</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_dlr_withdrawal";

	public static final Object[][] TABLE_COLUMNS = {
		{"dlr_withdrawal_id", Types.BIGINT}, {"national_id", Types.VARCHAR},
		{"license_no", Types.VARCHAR}, {"dealer_name", Types.VARCHAR},
		{"mobile_no", Types.VARCHAR}, {"reason", Types.VARCHAR},
		{"program_type", Types.VARCHAR}, {"oms_sub_type", Types.VARCHAR},
		{"created_date", Types.TIMESTAMP}, {"modified_by", Types.BIGINT},
		{"modified_date", Types.TIMESTAMP}, {"user_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"dlr_reg_no", Types.BIGINT}, {"reg_appl_no", Types.BIGINT},
		{"status", Types.INTEGER}, {"status_by_user_id", Types.BIGINT},
		{"status_by_user_name", Types.VARCHAR}, {"status_date", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dlr_withdrawal_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("national_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("license_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dealer_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oms_sub_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("created_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_reg_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reg_appl_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status_by_user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status_by_user_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status_date", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_dlr_withdrawal (dlr_withdrawal_id LONG not null primary key,national_id VARCHAR(75) null,license_no VARCHAR(75) null,dealer_name VARCHAR(75) null,mobile_no VARCHAR(75) null,reason VARCHAR(75) null,program_type VARCHAR(75) null,oms_sub_type VARCHAR(75) null,created_date DATE null,modified_by LONG,modified_date DATE null,user_id LONG,group_id LONG,company_id LONG,dlr_reg_no LONG,reg_appl_no LONG,status INTEGER,status_by_user_id LONG,status_by_user_name VARCHAR(75) null,status_date DATE null)";

	public static final String TABLE_SQL_DROP = "drop table dgf_dlr_withdrawal";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfDlrWithdrawal.dlrWithdrawalId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_dlr_withdrawal.dlr_withdrawal_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLRREGNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICENSENO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLRWITHDRAWALID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfDlrWithdrawalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dlrWithdrawalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDlrWithdrawalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dlrWithdrawalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfDlrWithdrawal.class;
	}

	@Override
	public String getModelClassName() {
		return DgfDlrWithdrawal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfDlrWithdrawal, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfDlrWithdrawal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrWithdrawal, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfDlrWithdrawal)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfDlrWithdrawal, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfDlrWithdrawal, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfDlrWithdrawal)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfDlrWithdrawal, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfDlrWithdrawal, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfDlrWithdrawal, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfDlrWithdrawal, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfDlrWithdrawal, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<DgfDlrWithdrawal, Object>>();
		Map<String, BiConsumer<DgfDlrWithdrawal, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DgfDlrWithdrawal, ?>>();

		attributeGetterFunctions.put(
			"dlrWithdrawalId", DgfDlrWithdrawal::getDlrWithdrawalId);
		attributeSetterBiConsumers.put(
			"dlrWithdrawalId",
			(BiConsumer<DgfDlrWithdrawal, Long>)
				DgfDlrWithdrawal::setDlrWithdrawalId);
		attributeGetterFunctions.put(
			"nationalId", DgfDlrWithdrawal::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfDlrWithdrawal, String>)
				DgfDlrWithdrawal::setNationalId);
		attributeGetterFunctions.put(
			"licenseNo", DgfDlrWithdrawal::getLicenseNo);
		attributeSetterBiConsumers.put(
			"licenseNo",
			(BiConsumer<DgfDlrWithdrawal, String>)
				DgfDlrWithdrawal::setLicenseNo);
		attributeGetterFunctions.put(
			"dealerName", DgfDlrWithdrawal::getDealerName);
		attributeSetterBiConsumers.put(
			"dealerName",
			(BiConsumer<DgfDlrWithdrawal, String>)
				DgfDlrWithdrawal::setDealerName);
		attributeGetterFunctions.put("mobileNo", DgfDlrWithdrawal::getMobileNo);
		attributeSetterBiConsumers.put(
			"mobileNo",
			(BiConsumer<DgfDlrWithdrawal, String>)
				DgfDlrWithdrawal::setMobileNo);
		attributeGetterFunctions.put("reason", DgfDlrWithdrawal::getReason);
		attributeSetterBiConsumers.put(
			"reason",
			(BiConsumer<DgfDlrWithdrawal, String>)DgfDlrWithdrawal::setReason);
		attributeGetterFunctions.put(
			"programType", DgfDlrWithdrawal::getProgramType);
		attributeSetterBiConsumers.put(
			"programType",
			(BiConsumer<DgfDlrWithdrawal, String>)
				DgfDlrWithdrawal::setProgramType);
		attributeGetterFunctions.put(
			"omsSubType", DgfDlrWithdrawal::getOmsSubType);
		attributeSetterBiConsumers.put(
			"omsSubType",
			(BiConsumer<DgfDlrWithdrawal, String>)
				DgfDlrWithdrawal::setOmsSubType);
		attributeGetterFunctions.put(
			"createdDate", DgfDlrWithdrawal::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<DgfDlrWithdrawal, Date>)
				DgfDlrWithdrawal::setCreatedDate);
		attributeGetterFunctions.put(
			"modifiedBy", DgfDlrWithdrawal::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<DgfDlrWithdrawal, Long>)
				DgfDlrWithdrawal::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedDate", DgfDlrWithdrawal::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DgfDlrWithdrawal, Date>)
				DgfDlrWithdrawal::setModifiedDate);
		attributeGetterFunctions.put("userId", DgfDlrWithdrawal::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DgfDlrWithdrawal, Long>)DgfDlrWithdrawal::setUserId);
		attributeGetterFunctions.put("groupId", DgfDlrWithdrawal::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DgfDlrWithdrawal, Long>)DgfDlrWithdrawal::setGroupId);
		attributeGetterFunctions.put(
			"companyId", DgfDlrWithdrawal::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DgfDlrWithdrawal, Long>)DgfDlrWithdrawal::setCompanyId);
		attributeGetterFunctions.put("dlrRegNo", DgfDlrWithdrawal::getDlrRegNo);
		attributeSetterBiConsumers.put(
			"dlrRegNo",
			(BiConsumer<DgfDlrWithdrawal, Long>)DgfDlrWithdrawal::setDlrRegNo);
		attributeGetterFunctions.put(
			"regApplNo", DgfDlrWithdrawal::getRegApplNo);
		attributeSetterBiConsumers.put(
			"regApplNo",
			(BiConsumer<DgfDlrWithdrawal, Long>)DgfDlrWithdrawal::setRegApplNo);
		attributeGetterFunctions.put("status", DgfDlrWithdrawal::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<DgfDlrWithdrawal, Integer>)DgfDlrWithdrawal::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", DgfDlrWithdrawal::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<DgfDlrWithdrawal, Long>)
				DgfDlrWithdrawal::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", DgfDlrWithdrawal::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<DgfDlrWithdrawal, String>)
				DgfDlrWithdrawal::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", DgfDlrWithdrawal::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<DgfDlrWithdrawal, Date>)
				DgfDlrWithdrawal::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDlrWithdrawalId() {
		return _dlrWithdrawalId;
	}

	@Override
	public void setDlrWithdrawalId(long dlrWithdrawalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrWithdrawalId = dlrWithdrawalId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("national_id");
	}

	@JSON
	@Override
	public String getLicenseNo() {
		if (_licenseNo == null) {
			return "";
		}
		else {
			return _licenseNo;
		}
	}

	@Override
	public void setLicenseNo(String licenseNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseNo = licenseNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLicenseNo() {
		return getColumnOriginalValue("license_no");
	}

	@JSON
	@Override
	public String getDealerName() {
		if (_dealerName == null) {
			return "";
		}
		else {
			return _dealerName;
		}
	}

	@Override
	public void setDealerName(String dealerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealerName = dealerName;
	}

	@JSON
	@Override
	public String getMobileNo() {
		if (_mobileNo == null) {
			return "";
		}
		else {
			return _mobileNo;
		}
	}

	@Override
	public void setMobileNo(String mobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNo = mobileNo;
	}

	@JSON
	@Override
	public String getReason() {
		if (_reason == null) {
			return "";
		}
		else {
			return _reason;
		}
	}

	@Override
	public void setReason(String reason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reason = reason;
	}

	@JSON
	@Override
	public String getProgramType() {
		if (_programType == null) {
			return "";
		}
		else {
			return _programType;
		}
	}

	@Override
	public void setProgramType(String programType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_programType = programType;
	}

	@JSON
	@Override
	public String getOmsSubType() {
		if (_omsSubType == null) {
			return "";
		}
		else {
			return _omsSubType;
		}
	}

	@Override
	public void setOmsSubType(String omsSubType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_omsSubType = omsSubType;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getDlrRegNo() {
		return _dlrRegNo;
	}

	@Override
	public void setDlrRegNo(long dlrRegNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegNo = dlrRegNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDlrRegNo() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
	}

	@JSON
	@Override
	public long getRegApplNo() {
		return _regApplNo;
	}

	@Override
	public void setRegApplNo(long regApplNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_regApplNo = regApplNo;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DgfDlrWithdrawal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfDlrWithdrawal toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfDlrWithdrawal>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfDlrWithdrawalImpl dgfDlrWithdrawalImpl = new DgfDlrWithdrawalImpl();

		dgfDlrWithdrawalImpl.setDlrWithdrawalId(getDlrWithdrawalId());
		dgfDlrWithdrawalImpl.setNationalId(getNationalId());
		dgfDlrWithdrawalImpl.setLicenseNo(getLicenseNo());
		dgfDlrWithdrawalImpl.setDealerName(getDealerName());
		dgfDlrWithdrawalImpl.setMobileNo(getMobileNo());
		dgfDlrWithdrawalImpl.setReason(getReason());
		dgfDlrWithdrawalImpl.setProgramType(getProgramType());
		dgfDlrWithdrawalImpl.setOmsSubType(getOmsSubType());
		dgfDlrWithdrawalImpl.setCreatedDate(getCreatedDate());
		dgfDlrWithdrawalImpl.setModifiedBy(getModifiedBy());
		dgfDlrWithdrawalImpl.setModifiedDate(getModifiedDate());
		dgfDlrWithdrawalImpl.setUserId(getUserId());
		dgfDlrWithdrawalImpl.setGroupId(getGroupId());
		dgfDlrWithdrawalImpl.setCompanyId(getCompanyId());
		dgfDlrWithdrawalImpl.setDlrRegNo(getDlrRegNo());
		dgfDlrWithdrawalImpl.setRegApplNo(getRegApplNo());
		dgfDlrWithdrawalImpl.setStatus(getStatus());
		dgfDlrWithdrawalImpl.setStatusByUserId(getStatusByUserId());
		dgfDlrWithdrawalImpl.setStatusByUserName(getStatusByUserName());
		dgfDlrWithdrawalImpl.setStatusDate(getStatusDate());

		dgfDlrWithdrawalImpl.resetOriginalValues();

		return dgfDlrWithdrawalImpl;
	}

	@Override
	public DgfDlrWithdrawal cloneWithOriginalValues() {
		DgfDlrWithdrawalImpl dgfDlrWithdrawalImpl = new DgfDlrWithdrawalImpl();

		dgfDlrWithdrawalImpl.setDlrWithdrawalId(
			this.<Long>getColumnOriginalValue("dlr_withdrawal_id"));
		dgfDlrWithdrawalImpl.setNationalId(
			this.<String>getColumnOriginalValue("national_id"));
		dgfDlrWithdrawalImpl.setLicenseNo(
			this.<String>getColumnOriginalValue("license_no"));
		dgfDlrWithdrawalImpl.setDealerName(
			this.<String>getColumnOriginalValue("dealer_name"));
		dgfDlrWithdrawalImpl.setMobileNo(
			this.<String>getColumnOriginalValue("mobile_no"));
		dgfDlrWithdrawalImpl.setReason(
			this.<String>getColumnOriginalValue("reason"));
		dgfDlrWithdrawalImpl.setProgramType(
			this.<String>getColumnOriginalValue("program_type"));
		dgfDlrWithdrawalImpl.setOmsSubType(
			this.<String>getColumnOriginalValue("oms_sub_type"));
		dgfDlrWithdrawalImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("created_date"));
		dgfDlrWithdrawalImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modified_by"));
		dgfDlrWithdrawalImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		dgfDlrWithdrawalImpl.setUserId(
			this.<Long>getColumnOriginalValue("user_id"));
		dgfDlrWithdrawalImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		dgfDlrWithdrawalImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		dgfDlrWithdrawalImpl.setDlrRegNo(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
		dgfDlrWithdrawalImpl.setRegApplNo(
			this.<Long>getColumnOriginalValue("reg_appl_no"));
		dgfDlrWithdrawalImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		dgfDlrWithdrawalImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("status_by_user_id"));
		dgfDlrWithdrawalImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("status_by_user_name"));
		dgfDlrWithdrawalImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("status_date"));

		return dgfDlrWithdrawalImpl;
	}

	@Override
	public int compareTo(DgfDlrWithdrawal dgfDlrWithdrawal) {
		long primaryKey = dgfDlrWithdrawal.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfDlrWithdrawal)) {
			return false;
		}

		DgfDlrWithdrawal dgfDlrWithdrawal = (DgfDlrWithdrawal)object;

		long primaryKey = dgfDlrWithdrawal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfDlrWithdrawal> toCacheModel() {
		DgfDlrWithdrawalCacheModel dgfDlrWithdrawalCacheModel =
			new DgfDlrWithdrawalCacheModel();

		dgfDlrWithdrawalCacheModel.dlrWithdrawalId = getDlrWithdrawalId();

		dgfDlrWithdrawalCacheModel.nationalId = getNationalId();

		String nationalId = dgfDlrWithdrawalCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfDlrWithdrawalCacheModel.nationalId = null;
		}

		dgfDlrWithdrawalCacheModel.licenseNo = getLicenseNo();

		String licenseNo = dgfDlrWithdrawalCacheModel.licenseNo;

		if ((licenseNo != null) && (licenseNo.length() == 0)) {
			dgfDlrWithdrawalCacheModel.licenseNo = null;
		}

		dgfDlrWithdrawalCacheModel.dealerName = getDealerName();

		String dealerName = dgfDlrWithdrawalCacheModel.dealerName;

		if ((dealerName != null) && (dealerName.length() == 0)) {
			dgfDlrWithdrawalCacheModel.dealerName = null;
		}

		dgfDlrWithdrawalCacheModel.mobileNo = getMobileNo();

		String mobileNo = dgfDlrWithdrawalCacheModel.mobileNo;

		if ((mobileNo != null) && (mobileNo.length() == 0)) {
			dgfDlrWithdrawalCacheModel.mobileNo = null;
		}

		dgfDlrWithdrawalCacheModel.reason = getReason();

		String reason = dgfDlrWithdrawalCacheModel.reason;

		if ((reason != null) && (reason.length() == 0)) {
			dgfDlrWithdrawalCacheModel.reason = null;
		}

		dgfDlrWithdrawalCacheModel.programType = getProgramType();

		String programType = dgfDlrWithdrawalCacheModel.programType;

		if ((programType != null) && (programType.length() == 0)) {
			dgfDlrWithdrawalCacheModel.programType = null;
		}

		dgfDlrWithdrawalCacheModel.omsSubType = getOmsSubType();

		String omsSubType = dgfDlrWithdrawalCacheModel.omsSubType;

		if ((omsSubType != null) && (omsSubType.length() == 0)) {
			dgfDlrWithdrawalCacheModel.omsSubType = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			dgfDlrWithdrawalCacheModel.createdDate = createdDate.getTime();
		}
		else {
			dgfDlrWithdrawalCacheModel.createdDate = Long.MIN_VALUE;
		}

		dgfDlrWithdrawalCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dgfDlrWithdrawalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dgfDlrWithdrawalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dgfDlrWithdrawalCacheModel.userId = getUserId();

		dgfDlrWithdrawalCacheModel.groupId = getGroupId();

		dgfDlrWithdrawalCacheModel.companyId = getCompanyId();

		dgfDlrWithdrawalCacheModel.dlrRegNo = getDlrRegNo();

		dgfDlrWithdrawalCacheModel.regApplNo = getRegApplNo();

		dgfDlrWithdrawalCacheModel.status = getStatus();

		dgfDlrWithdrawalCacheModel.statusByUserId = getStatusByUserId();

		dgfDlrWithdrawalCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = dgfDlrWithdrawalCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			dgfDlrWithdrawalCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			dgfDlrWithdrawalCacheModel.statusDate = statusDate.getTime();
		}
		else {
			dgfDlrWithdrawalCacheModel.statusDate = Long.MIN_VALUE;
		}

		return dgfDlrWithdrawalCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfDlrWithdrawal, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfDlrWithdrawal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrWithdrawal, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfDlrWithdrawal)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfDlrWithdrawal>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfDlrWithdrawal.class, ModelWrapper.class);

	}

	private long _dlrWithdrawalId;
	private String _nationalId;
	private String _licenseNo;
	private String _dealerName;
	private String _mobileNo;
	private String _reason;
	private String _programType;
	private String _omsSubType;
	private Date _createdDate;
	private long _modifiedBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _userId;
	private long _groupId;
	private long _companyId;
	private long _dlrRegNo;
	private long _regApplNo;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfDlrWithdrawal, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfDlrWithdrawal)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("dlr_withdrawal_id", _dlrWithdrawalId);
		_columnOriginalValues.put("national_id", _nationalId);
		_columnOriginalValues.put("license_no", _licenseNo);
		_columnOriginalValues.put("dealer_name", _dealerName);
		_columnOriginalValues.put("mobile_no", _mobileNo);
		_columnOriginalValues.put("reason", _reason);
		_columnOriginalValues.put("program_type", _programType);
		_columnOriginalValues.put("oms_sub_type", _omsSubType);
		_columnOriginalValues.put("created_date", _createdDate);
		_columnOriginalValues.put("modified_by", _modifiedBy);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("user_id", _userId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("dlr_reg_no", _dlrRegNo);
		_columnOriginalValues.put("reg_appl_no", _regApplNo);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("status_by_user_id", _statusByUserId);
		_columnOriginalValues.put("status_by_user_name", _statusByUserName);
		_columnOriginalValues.put("status_date", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("dlr_withdrawal_id", "dlrWithdrawalId");
		attributeNames.put("national_id", "nationalId");
		attributeNames.put("license_no", "licenseNo");
		attributeNames.put("dealer_name", "dealerName");
		attributeNames.put("mobile_no", "mobileNo");
		attributeNames.put("program_type", "programType");
		attributeNames.put("oms_sub_type", "omsSubType");
		attributeNames.put("created_date", "createdDate");
		attributeNames.put("modified_by", "modifiedBy");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("user_id", "userId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("dlr_reg_no", "dlrRegNo");
		attributeNames.put("reg_appl_no", "regApplNo");
		attributeNames.put("status_by_user_id", "statusByUserId");
		attributeNames.put("status_by_user_name", "statusByUserName");
		attributeNames.put("status_date", "statusDate");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("dlr_withdrawal_id", 1L);

		columnBitmasks.put("national_id", 2L);

		columnBitmasks.put("license_no", 4L);

		columnBitmasks.put("dealer_name", 8L);

		columnBitmasks.put("mobile_no", 16L);

		columnBitmasks.put("reason", 32L);

		columnBitmasks.put("program_type", 64L);

		columnBitmasks.put("oms_sub_type", 128L);

		columnBitmasks.put("created_date", 256L);

		columnBitmasks.put("modified_by", 512L);

		columnBitmasks.put("modified_date", 1024L);

		columnBitmasks.put("user_id", 2048L);

		columnBitmasks.put("group_id", 4096L);

		columnBitmasks.put("company_id", 8192L);

		columnBitmasks.put("dlr_reg_no", 16384L);

		columnBitmasks.put("reg_appl_no", 32768L);

		columnBitmasks.put("status", 65536L);

		columnBitmasks.put("status_by_user_id", 131072L);

		columnBitmasks.put("status_by_user_name", 262144L);

		columnBitmasks.put("status_date", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfDlrWithdrawal _escapedModel;

}