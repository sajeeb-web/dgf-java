/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.dealer.registration.model.impl;

import bd.gov.dgfood.dealer.registration.model.DgfDlrUpdtTempDtls;
import bd.gov.dgfood.dealer.registration.model.DgfDlrUpdtTempDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfDlrUpdtTempDtls service. Represents a row in the &quot;dgf_dlr_updt_temp_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfDlrUpdtTempDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfDlrUpdtTempDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfDlrUpdtTempDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfDlrUpdtTempDtlsModelImpl
	extends BaseModelImpl<DgfDlrUpdtTempDtls>
	implements DgfDlrUpdtTempDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf dlr updt temp dtls model instance should use the <code>DgfDlrUpdtTempDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_dlr_updt_temp_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"dgf_dlr_update_req_id", Types.BIGINT}, {"national_id", Types.VARCHAR},
		{"dlr_reg_no", Types.BIGINT}, {"marital_status", Types.VARCHAR},
		{"spouse_name", Types.VARCHAR}, {"spouse_fthr_name", Types.VARCHAR},
		{"spouse_nid", Types.VARCHAR}, {"spouse_brth_date", Types.TIMESTAMP},
		{"pblc_rep", Types.INTEGER}, {"wrk_in_govt", Types.INTEGER},
		{"physcly_chlngd", Types.INTEGER},
		{"phscly_chlngd_attch_id", Types.BIGINT},
		{"shp_division", Types.BIGINT}, {"shp_district", Types.BIGINT},
		{"shp_upzilla", Types.BIGINT}, {"shp_union", Types.BIGINT},
		{"shp_village", Types.VARCHAR}, {"shp_ward", Types.VARCHAR},
		{"shp_zip_code", Types.VARCHAR}, {"shp_pst_offc", Types.VARCHAR},
		{"shp_present_address", Types.VARCHAR}, {"shp_location", Types.VARCHAR},
		{"shp_length", Types.BIGINT}, {"shp_height", Types.BIGINT},
		{"shp_width", Types.BIGINT}, {"shp_strg_cpcty", Types.BIGINT},
		{"shp_flr_cmntd", Types.INTEGER}, {"shp_sign_brd", Types.INTEGER},
		{"license_type", Types.VARCHAR}, {"thrd_party_ops_flg", Types.BIGINT},
		{"dlrshp_fmly_mmbr_name", Types.VARCHAR},
		{"dlrshp_fmly_mmbr_type", Types.VARCHAR},
		{"dlr_perf_yr1", Types.BIGINT},
		{"dlr_perf_yr1_alloc_qty", Types.BIGINT},
		{"dlr_perf_yr1_comdty_qty", Types.BIGINT},
		{"dlr_perf_yr1_dlr_ctgry", Types.VARCHAR},
		{"dlr_perf_yr1_rmrk", Types.VARCHAR}, {"dlr_perf_yr2", Types.BIGINT},
		{"dlr_perf_yr2_alloc_qty", Types.BIGINT},
		{"dlr_perf_yr2_comdty_qty", Types.BIGINT},
		{"dlr_perf_yr2_dlr_ctgry", Types.VARCHAR},
		{"dlr_perf_yr2_rmrk", Types.VARCHAR}, {"dlr_perf_yr3", Types.BIGINT},
		{"dlr_perf_yr3_alloc_qty", Types.BIGINT},
		{"dlr_perf_yr3_comdty_qty", Types.BIGINT},
		{"dlr_perf_yr3_dlr_ctgry", Types.VARCHAR},
		{"dlr_perf_yr3_rmrk", Types.VARCHAR},
		{"trck_licns_plat_no", Types.VARCHAR}, {"trck_cpcty", Types.BIGINT},
		{"trck_make", Types.VARCHAR}, {"trck_model", Types.VARCHAR},
		{"trck_rent_own_flg", Types.VARCHAR}, {"trck_mfg_yr", Types.BIGINT},
		{"version", Types.BIGINT}, {"status", Types.INTEGER},
		{"status_by_user_id", Types.BIGINT},
		{"status_by_user_name", Types.VARCHAR},
		{"status_date", Types.TIMESTAMP}, {"create_date", Types.TIMESTAMP},
		{"last_updtd_by", Types.BIGINT}, {"modified_date", Types.TIMESTAMP},
		{"foodgrain_license", Types.INTEGER}, {"trade_license", Types.INTEGER},
		{"tcv_dlr_license", Types.INTEGER}, {"import_license", Types.INTEGER},
		{"license_essential_goods", Types.INTEGER},
		{"trade_license_agriculture", Types.INTEGER},
		{"dlr_oms_sub_type", Types.VARCHAR}, {"user_id", Types.BIGINT},
		{"group_id", Types.BIGINT}, {"company_id", Types.BIGINT},
		{"dlr_run_shp_himself", Types.INTEGER},
		{"dlr_shp_trck_typ_flg", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dgf_dlr_update_req_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("national_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_reg_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("marital_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_fthr_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_nid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_brth_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("pblc_rep", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("wrk_in_govt", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("physcly_chlngd", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("phscly_chlngd_attch_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_division", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_district", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_upzilla", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_union", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_village", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shp_ward", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shp_zip_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shp_pst_offc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shp_present_address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shp_location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shp_length", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_height", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_width", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_strg_cpcty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shp_flr_cmntd", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("shp_sign_brd", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("license_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thrd_party_ops_flg", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlrshp_fmly_mmbr_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlrshp_fmly_mmbr_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr1", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr1_alloc_qty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr1_comdty_qty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr1_dlr_ctgry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr1_rmrk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr2", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr2_alloc_qty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr2_comdty_qty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr2_dlr_ctgry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr2_rmrk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr3", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr3_alloc_qty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr3_comdty_qty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr3_dlr_ctgry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlr_perf_yr3_rmrk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_licns_plat_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_cpcty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trck_make", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_model", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_rent_own_flg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trck_mfg_yr", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status_by_user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status_by_user_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("last_updtd_by", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("foodgrain_license", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trade_license", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("tcv_dlr_license", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("import_license", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("license_essential_goods", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trade_license_agriculture", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dlr_oms_sub_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("company_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlr_run_shp_himself", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dlr_shp_trck_typ_flg", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_dlr_updt_temp_dtls (dgf_dlr_update_req_id LONG not null primary key,national_id VARCHAR(75) null,dlr_reg_no LONG,marital_status VARCHAR(75) null,spouse_name VARCHAR(75) null,spouse_fthr_name VARCHAR(75) null,spouse_nid VARCHAR(75) null,spouse_brth_date DATE null,pblc_rep INTEGER,wrk_in_govt INTEGER,physcly_chlngd INTEGER,phscly_chlngd_attch_id LONG,shp_division LONG,shp_district LONG,shp_upzilla LONG,shp_union LONG,shp_village VARCHAR(75) null,shp_ward VARCHAR(75) null,shp_zip_code VARCHAR(75) null,shp_pst_offc VARCHAR(75) null,shp_present_address VARCHAR(75) null,shp_location VARCHAR(75) null,shp_length LONG,shp_height LONG,shp_width LONG,shp_strg_cpcty LONG,shp_flr_cmntd INTEGER,shp_sign_brd INTEGER,license_type VARCHAR(75) null,thrd_party_ops_flg LONG,dlrshp_fmly_mmbr_name VARCHAR(75) null,dlrshp_fmly_mmbr_type VARCHAR(75) null,dlr_perf_yr1 LONG,dlr_perf_yr1_alloc_qty LONG,dlr_perf_yr1_comdty_qty LONG,dlr_perf_yr1_dlr_ctgry VARCHAR(75) null,dlr_perf_yr1_rmrk VARCHAR(75) null,dlr_perf_yr2 LONG,dlr_perf_yr2_alloc_qty LONG,dlr_perf_yr2_comdty_qty LONG,dlr_perf_yr2_dlr_ctgry VARCHAR(75) null,dlr_perf_yr2_rmrk VARCHAR(75) null,dlr_perf_yr3 LONG,dlr_perf_yr3_alloc_qty LONG,dlr_perf_yr3_comdty_qty LONG,dlr_perf_yr3_dlr_ctgry VARCHAR(75) null,dlr_perf_yr3_rmrk VARCHAR(75) null,trck_licns_plat_no VARCHAR(75) null,trck_cpcty LONG,trck_make VARCHAR(75) null,trck_model VARCHAR(75) null,trck_rent_own_flg VARCHAR(75) null,trck_mfg_yr LONG,version LONG,status INTEGER,status_by_user_id LONG,status_by_user_name VARCHAR(75) null,status_date DATE null,create_date DATE null,last_updtd_by LONG,modified_date DATE null,foodgrain_license INTEGER,trade_license INTEGER,tcv_dlr_license INTEGER,import_license INTEGER,license_essential_goods INTEGER,trade_license_agriculture INTEGER,dlr_oms_sub_type VARCHAR(75) null,user_id LONG,group_id LONG,company_id LONG,dlr_run_shp_himself INTEGER,dlr_shp_trck_typ_flg INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_dlr_updt_temp_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfDlrUpdtTempDtls.dgfDlrUpdateReqId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_dlr_updt_temp_dtls.dgf_dlr_update_req_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfDlrUpdtTempDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dgfDlrUpdateReqId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDgfDlrUpdateReqId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dgfDlrUpdateReqId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfDlrUpdtTempDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfDlrUpdtTempDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfDlrUpdtTempDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfDlrUpdtTempDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrUpdtTempDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfDlrUpdtTempDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfDlrUpdtTempDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfDlrUpdtTempDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfDlrUpdtTempDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfDlrUpdtTempDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfDlrUpdtTempDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfDlrUpdtTempDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfDlrUpdtTempDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfDlrUpdtTempDtls, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DgfDlrUpdtTempDtls, Object>>();
		Map<String, BiConsumer<DgfDlrUpdtTempDtls, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DgfDlrUpdtTempDtls, ?>>();

		attributeGetterFunctions.put(
			"dgfDlrUpdateReqId", DgfDlrUpdtTempDtls::getDgfDlrUpdateReqId);
		attributeSetterBiConsumers.put(
			"dgfDlrUpdateReqId",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDgfDlrUpdateReqId);
		attributeGetterFunctions.put(
			"nationalId", DgfDlrUpdtTempDtls::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setNationalId);
		attributeGetterFunctions.put(
			"dlrRegNo", DgfDlrUpdtTempDtls::getDlrRegNo);
		attributeSetterBiConsumers.put(
			"dlrRegNo",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrRegNo);
		attributeGetterFunctions.put(
			"maritalStatus", DgfDlrUpdtTempDtls::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setMaritalStatus);
		attributeGetterFunctions.put(
			"spouseName", DgfDlrUpdtTempDtls::getSpouseName);
		attributeSetterBiConsumers.put(
			"spouseName",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setSpouseName);
		attributeGetterFunctions.put(
			"spouseFthrName", DgfDlrUpdtTempDtls::getSpouseFthrName);
		attributeSetterBiConsumers.put(
			"spouseFthrName",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setSpouseFthrName);
		attributeGetterFunctions.put(
			"spouseNid", DgfDlrUpdtTempDtls::getSpouseNid);
		attributeSetterBiConsumers.put(
			"spouseNid",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setSpouseNid);
		attributeGetterFunctions.put(
			"spouseBrthDate", DgfDlrUpdtTempDtls::getSpouseBrthDate);
		attributeSetterBiConsumers.put(
			"spouseBrthDate",
			(BiConsumer<DgfDlrUpdtTempDtls, Date>)
				DgfDlrUpdtTempDtls::setSpouseBrthDate);
		attributeGetterFunctions.put("pblcRep", DgfDlrUpdtTempDtls::getPblcRep);
		attributeSetterBiConsumers.put(
			"pblcRep",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setPblcRep);
		attributeGetterFunctions.put(
			"wrkInGovt", DgfDlrUpdtTempDtls::getWrkInGovt);
		attributeSetterBiConsumers.put(
			"wrkInGovt",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setWrkInGovt);
		attributeGetterFunctions.put(
			"physclyChlngd", DgfDlrUpdtTempDtls::getPhysclyChlngd);
		attributeSetterBiConsumers.put(
			"physclyChlngd",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setPhysclyChlngd);
		attributeGetterFunctions.put(
			"phsclyChlngdAttchId", DgfDlrUpdtTempDtls::getPhsclyChlngdAttchId);
		attributeSetterBiConsumers.put(
			"phsclyChlngdAttchId",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setPhsclyChlngdAttchId);
		attributeGetterFunctions.put(
			"shpDivision", DgfDlrUpdtTempDtls::getShpDivision);
		attributeSetterBiConsumers.put(
			"shpDivision",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpDivision);
		attributeGetterFunctions.put(
			"shpDistrict", DgfDlrUpdtTempDtls::getShpDistrict);
		attributeSetterBiConsumers.put(
			"shpDistrict",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpDistrict);
		attributeGetterFunctions.put(
			"shpUpzilla", DgfDlrUpdtTempDtls::getShpUpzilla);
		attributeSetterBiConsumers.put(
			"shpUpzilla",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpUpzilla);
		attributeGetterFunctions.put(
			"shpUnion", DgfDlrUpdtTempDtls::getShpUnion);
		attributeSetterBiConsumers.put(
			"shpUnion",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpUnion);
		attributeGetterFunctions.put(
			"shpVillage", DgfDlrUpdtTempDtls::getShpVillage);
		attributeSetterBiConsumers.put(
			"shpVillage",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setShpVillage);
		attributeGetterFunctions.put("shpWard", DgfDlrUpdtTempDtls::getShpWard);
		attributeSetterBiConsumers.put(
			"shpWard",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setShpWard);
		attributeGetterFunctions.put(
			"shpZipCode", DgfDlrUpdtTempDtls::getShpZipCode);
		attributeSetterBiConsumers.put(
			"shpZipCode",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setShpZipCode);
		attributeGetterFunctions.put(
			"shpPstOffc", DgfDlrUpdtTempDtls::getShpPstOffc);
		attributeSetterBiConsumers.put(
			"shpPstOffc",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setShpPstOffc);
		attributeGetterFunctions.put(
			"shpPresentAddress", DgfDlrUpdtTempDtls::getShpPresentAddress);
		attributeSetterBiConsumers.put(
			"shpPresentAddress",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setShpPresentAddress);
		attributeGetterFunctions.put(
			"shpLocation", DgfDlrUpdtTempDtls::getShpLocation);
		attributeSetterBiConsumers.put(
			"shpLocation",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setShpLocation);
		attributeGetterFunctions.put(
			"shpLength", DgfDlrUpdtTempDtls::getShpLength);
		attributeSetterBiConsumers.put(
			"shpLength",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpLength);
		attributeGetterFunctions.put(
			"shpHeight", DgfDlrUpdtTempDtls::getShpHeight);
		attributeSetterBiConsumers.put(
			"shpHeight",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpHeight);
		attributeGetterFunctions.put(
			"shpWidth", DgfDlrUpdtTempDtls::getShpWidth);
		attributeSetterBiConsumers.put(
			"shpWidth",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpWidth);
		attributeGetterFunctions.put(
			"shpStrgCpcty", DgfDlrUpdtTempDtls::getShpStrgCpcty);
		attributeSetterBiConsumers.put(
			"shpStrgCpcty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setShpStrgCpcty);
		attributeGetterFunctions.put(
			"shpFlrCmntd", DgfDlrUpdtTempDtls::getShpFlrCmntd);
		attributeSetterBiConsumers.put(
			"shpFlrCmntd",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setShpFlrCmntd);
		attributeGetterFunctions.put(
			"shpSignBrd", DgfDlrUpdtTempDtls::getShpSignBrd);
		attributeSetterBiConsumers.put(
			"shpSignBrd",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setShpSignBrd);
		attributeGetterFunctions.put(
			"licenseType", DgfDlrUpdtTempDtls::getLicenseType);
		attributeSetterBiConsumers.put(
			"licenseType",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setLicenseType);
		attributeGetterFunctions.put(
			"thrdPartyOpsFlg", DgfDlrUpdtTempDtls::getThrdPartyOpsFlg);
		attributeSetterBiConsumers.put(
			"thrdPartyOpsFlg",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setThrdPartyOpsFlg);
		attributeGetterFunctions.put(
			"dlrshpFmlyMmbrName", DgfDlrUpdtTempDtls::getDlrshpFmlyMmbrName);
		attributeSetterBiConsumers.put(
			"dlrshpFmlyMmbrName",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrshpFmlyMmbrName);
		attributeGetterFunctions.put(
			"dlrshpFmlyMmbrType", DgfDlrUpdtTempDtls::getDlrshpFmlyMmbrType);
		attributeSetterBiConsumers.put(
			"dlrshpFmlyMmbrType",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrshpFmlyMmbrType);
		attributeGetterFunctions.put(
			"dlrPerfYr1", DgfDlrUpdtTempDtls::getDlrPerfYr1);
		attributeSetterBiConsumers.put(
			"dlrPerfYr1",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr1);
		attributeGetterFunctions.put(
			"dlrPerfYr1AllocQty", DgfDlrUpdtTempDtls::getDlrPerfYr1AllocQty);
		attributeSetterBiConsumers.put(
			"dlrPerfYr1AllocQty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr1AllocQty);
		attributeGetterFunctions.put(
			"dlrPerfYr1ComdtyQty", DgfDlrUpdtTempDtls::getDlrPerfYr1ComdtyQty);
		attributeSetterBiConsumers.put(
			"dlrPerfYr1ComdtyQty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr1ComdtyQty);
		attributeGetterFunctions.put(
			"dlrPerfYr1DlrCtgry", DgfDlrUpdtTempDtls::getDlrPerfYr1DlrCtgry);
		attributeSetterBiConsumers.put(
			"dlrPerfYr1DlrCtgry",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrPerfYr1DlrCtgry);
		attributeGetterFunctions.put(
			"dlrPerfYr1Rmrk", DgfDlrUpdtTempDtls::getDlrPerfYr1Rmrk);
		attributeSetterBiConsumers.put(
			"dlrPerfYr1Rmrk",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrPerfYr1Rmrk);
		attributeGetterFunctions.put(
			"dlrPerfYr2", DgfDlrUpdtTempDtls::getDlrPerfYr2);
		attributeSetterBiConsumers.put(
			"dlrPerfYr2",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr2);
		attributeGetterFunctions.put(
			"dlrPerfYr2AllocQty", DgfDlrUpdtTempDtls::getDlrPerfYr2AllocQty);
		attributeSetterBiConsumers.put(
			"dlrPerfYr2AllocQty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr2AllocQty);
		attributeGetterFunctions.put(
			"dlrPerfYr2ComdtyQty", DgfDlrUpdtTempDtls::getDlrPerfYr2ComdtyQty);
		attributeSetterBiConsumers.put(
			"dlrPerfYr2ComdtyQty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr2ComdtyQty);
		attributeGetterFunctions.put(
			"dlrPerfYr2DlrCtgry", DgfDlrUpdtTempDtls::getDlrPerfYr2DlrCtgry);
		attributeSetterBiConsumers.put(
			"dlrPerfYr2DlrCtgry",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrPerfYr2DlrCtgry);
		attributeGetterFunctions.put(
			"dlrPerfYr2Rmrk", DgfDlrUpdtTempDtls::getDlrPerfYr2Rmrk);
		attributeSetterBiConsumers.put(
			"dlrPerfYr2Rmrk",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrPerfYr2Rmrk);
		attributeGetterFunctions.put(
			"dlrPerfYr3", DgfDlrUpdtTempDtls::getDlrPerfYr3);
		attributeSetterBiConsumers.put(
			"dlrPerfYr3",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr3);
		attributeGetterFunctions.put(
			"dlrPerfYr3AllocQty", DgfDlrUpdtTempDtls::getDlrPerfYr3AllocQty);
		attributeSetterBiConsumers.put(
			"dlrPerfYr3AllocQty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr3AllocQty);
		attributeGetterFunctions.put(
			"dlrPerfYr3ComdtyQty", DgfDlrUpdtTempDtls::getDlrPerfYr3ComdtyQty);
		attributeSetterBiConsumers.put(
			"dlrPerfYr3ComdtyQty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setDlrPerfYr3ComdtyQty);
		attributeGetterFunctions.put(
			"dlrPerfYr3DlrCtgry", DgfDlrUpdtTempDtls::getDlrPerfYr3DlrCtgry);
		attributeSetterBiConsumers.put(
			"dlrPerfYr3DlrCtgry",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrPerfYr3DlrCtgry);
		attributeGetterFunctions.put(
			"dlrPerfYr3Rmrk", DgfDlrUpdtTempDtls::getDlrPerfYr3Rmrk);
		attributeSetterBiConsumers.put(
			"dlrPerfYr3Rmrk",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrPerfYr3Rmrk);
		attributeGetterFunctions.put(
			"trckLicnsPlatNo", DgfDlrUpdtTempDtls::getTrckLicnsPlatNo);
		attributeSetterBiConsumers.put(
			"trckLicnsPlatNo",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setTrckLicnsPlatNo);
		attributeGetterFunctions.put(
			"trckCpcty", DgfDlrUpdtTempDtls::getTrckCpcty);
		attributeSetterBiConsumers.put(
			"trckCpcty",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setTrckCpcty);
		attributeGetterFunctions.put(
			"trckMake", DgfDlrUpdtTempDtls::getTrckMake);
		attributeSetterBiConsumers.put(
			"trckMake",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setTrckMake);
		attributeGetterFunctions.put(
			"trckModel", DgfDlrUpdtTempDtls::getTrckModel);
		attributeSetterBiConsumers.put(
			"trckModel",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setTrckModel);
		attributeGetterFunctions.put(
			"trckRentOwnFlg", DgfDlrUpdtTempDtls::getTrckRentOwnFlg);
		attributeSetterBiConsumers.put(
			"trckRentOwnFlg",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setTrckRentOwnFlg);
		attributeGetterFunctions.put(
			"trckMfgYr", DgfDlrUpdtTempDtls::getTrckMfgYr);
		attributeSetterBiConsumers.put(
			"trckMfgYr",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setTrckMfgYr);
		attributeGetterFunctions.put("version", DgfDlrUpdtTempDtls::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setVersion);
		attributeGetterFunctions.put("status", DgfDlrUpdtTempDtls::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", DgfDlrUpdtTempDtls::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", DgfDlrUpdtTempDtls::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", DgfDlrUpdtTempDtls::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<DgfDlrUpdtTempDtls, Date>)
				DgfDlrUpdtTempDtls::setStatusDate);
		attributeGetterFunctions.put(
			"createDate", DgfDlrUpdtTempDtls::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DgfDlrUpdtTempDtls, Date>)
				DgfDlrUpdtTempDtls::setCreateDate);
		attributeGetterFunctions.put(
			"lastUpdtdBy", DgfDlrUpdtTempDtls::getLastUpdtdBy);
		attributeSetterBiConsumers.put(
			"lastUpdtdBy",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setLastUpdtdBy);
		attributeGetterFunctions.put(
			"modifiedDate", DgfDlrUpdtTempDtls::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DgfDlrUpdtTempDtls, Date>)
				DgfDlrUpdtTempDtls::setModifiedDate);
		attributeGetterFunctions.put(
			"foodgrainLicense", DgfDlrUpdtTempDtls::getFoodgrainLicense);
		attributeSetterBiConsumers.put(
			"foodgrainLicense",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setFoodgrainLicense);
		attributeGetterFunctions.put(
			"tradeLicense", DgfDlrUpdtTempDtls::getTradeLicense);
		attributeSetterBiConsumers.put(
			"tradeLicense",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setTradeLicense);
		attributeGetterFunctions.put(
			"tcvDlrLicense", DgfDlrUpdtTempDtls::getTcvDlrLicense);
		attributeSetterBiConsumers.put(
			"tcvDlrLicense",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setTcvDlrLicense);
		attributeGetterFunctions.put(
			"importLicense", DgfDlrUpdtTempDtls::getImportLicense);
		attributeSetterBiConsumers.put(
			"importLicense",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setImportLicense);
		attributeGetterFunctions.put(
			"licenseEssentialGoods",
			DgfDlrUpdtTempDtls::getLicenseEssentialGoods);
		attributeSetterBiConsumers.put(
			"licenseEssentialGoods",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setLicenseEssentialGoods);
		attributeGetterFunctions.put(
			"tradeLicenseAgriculture",
			DgfDlrUpdtTempDtls::getTradeLicenseAgriculture);
		attributeSetterBiConsumers.put(
			"tradeLicenseAgriculture",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setTradeLicenseAgriculture);
		attributeGetterFunctions.put(
			"dlrOmsSubType", DgfDlrUpdtTempDtls::getDlrOmsSubType);
		attributeSetterBiConsumers.put(
			"dlrOmsSubType",
			(BiConsumer<DgfDlrUpdtTempDtls, String>)
				DgfDlrUpdtTempDtls::setDlrOmsSubType);
		attributeGetterFunctions.put("userId", DgfDlrUpdtTempDtls::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setUserId);
		attributeGetterFunctions.put("groupId", DgfDlrUpdtTempDtls::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setGroupId);
		attributeGetterFunctions.put(
			"companyId", DgfDlrUpdtTempDtls::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DgfDlrUpdtTempDtls, Long>)
				DgfDlrUpdtTempDtls::setCompanyId);
		attributeGetterFunctions.put(
			"dlrRunShpHimself", DgfDlrUpdtTempDtls::getDlrRunShpHimself);
		attributeSetterBiConsumers.put(
			"dlrRunShpHimself",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setDlrRunShpHimself);
		attributeGetterFunctions.put(
			"dlrShpTrckTypFlg", DgfDlrUpdtTempDtls::getDlrShpTrckTypFlg);
		attributeSetterBiConsumers.put(
			"dlrShpTrckTypFlg",
			(BiConsumer<DgfDlrUpdtTempDtls, Integer>)
				DgfDlrUpdtTempDtls::setDlrShpTrckTypFlg);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDgfDlrUpdateReqId() {
		return _dgfDlrUpdateReqId;
	}

	@Override
	public void setDgfDlrUpdateReqId(long dgfDlrUpdateReqId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dgfDlrUpdateReqId = dgfDlrUpdateReqId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("national_id");
	}

	@JSON
	@Override
	public long getDlrRegNo() {
		return _dlrRegNo;
	}

	@Override
	public void setDlrRegNo(long dlrRegNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegNo = dlrRegNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDlrRegNo() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
	}

	@JSON
	@Override
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return "";
		}
		else {
			return _maritalStatus;
		}
	}

	@Override
	public void setMaritalStatus(String maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getSpouseName() {
		if (_spouseName == null) {
			return "";
		}
		else {
			return _spouseName;
		}
	}

	@Override
	public void setSpouseName(String spouseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseName = spouseName;
	}

	@JSON
	@Override
	public String getSpouseFthrName() {
		if (_spouseFthrName == null) {
			return "";
		}
		else {
			return _spouseFthrName;
		}
	}

	@Override
	public void setSpouseFthrName(String spouseFthrName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseFthrName = spouseFthrName;
	}

	@JSON
	@Override
	public String getSpouseNid() {
		if (_spouseNid == null) {
			return "";
		}
		else {
			return _spouseNid;
		}
	}

	@Override
	public void setSpouseNid(String spouseNid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseNid = spouseNid;
	}

	@JSON
	@Override
	public Date getSpouseBrthDate() {
		return _spouseBrthDate;
	}

	@Override
	public void setSpouseBrthDate(Date spouseBrthDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseBrthDate = spouseBrthDate;
	}

	@JSON
	@Override
	public int getPblcRep() {
		return _pblcRep;
	}

	@Override
	public void setPblcRep(int pblcRep) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pblcRep = pblcRep;
	}

	@JSON
	@Override
	public int getWrkInGovt() {
		return _wrkInGovt;
	}

	@Override
	public void setWrkInGovt(int wrkInGovt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wrkInGovt = wrkInGovt;
	}

	@JSON
	@Override
	public int getPhysclyChlngd() {
		return _physclyChlngd;
	}

	@Override
	public void setPhysclyChlngd(int physclyChlngd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_physclyChlngd = physclyChlngd;
	}

	@JSON
	@Override
	public long getPhsclyChlngdAttchId() {
		return _phsclyChlngdAttchId;
	}

	@Override
	public void setPhsclyChlngdAttchId(long phsclyChlngdAttchId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phsclyChlngdAttchId = phsclyChlngdAttchId;
	}

	@JSON
	@Override
	public long getShpDivision() {
		return _shpDivision;
	}

	@Override
	public void setShpDivision(long shpDivision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpDivision = shpDivision;
	}

	@JSON
	@Override
	public long getShpDistrict() {
		return _shpDistrict;
	}

	@Override
	public void setShpDistrict(long shpDistrict) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpDistrict = shpDistrict;
	}

	@JSON
	@Override
	public long getShpUpzilla() {
		return _shpUpzilla;
	}

	@Override
	public void setShpUpzilla(long shpUpzilla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpUpzilla = shpUpzilla;
	}

	@JSON
	@Override
	public long getShpUnion() {
		return _shpUnion;
	}

	@Override
	public void setShpUnion(long shpUnion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpUnion = shpUnion;
	}

	@JSON
	@Override
	public String getShpVillage() {
		if (_shpVillage == null) {
			return "";
		}
		else {
			return _shpVillage;
		}
	}

	@Override
	public void setShpVillage(String shpVillage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpVillage = shpVillage;
	}

	@JSON
	@Override
	public String getShpWard() {
		if (_shpWard == null) {
			return "";
		}
		else {
			return _shpWard;
		}
	}

	@Override
	public void setShpWard(String shpWard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpWard = shpWard;
	}

	@JSON
	@Override
	public String getShpZipCode() {
		if (_shpZipCode == null) {
			return "";
		}
		else {
			return _shpZipCode;
		}
	}

	@Override
	public void setShpZipCode(String shpZipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpZipCode = shpZipCode;
	}

	@JSON
	@Override
	public String getShpPstOffc() {
		if (_shpPstOffc == null) {
			return "";
		}
		else {
			return _shpPstOffc;
		}
	}

	@Override
	public void setShpPstOffc(String shpPstOffc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpPstOffc = shpPstOffc;
	}

	@JSON
	@Override
	public String getShpPresentAddress() {
		if (_shpPresentAddress == null) {
			return "";
		}
		else {
			return _shpPresentAddress;
		}
	}

	@Override
	public void setShpPresentAddress(String shpPresentAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpPresentAddress = shpPresentAddress;
	}

	@JSON
	@Override
	public String getShpLocation() {
		if (_shpLocation == null) {
			return "";
		}
		else {
			return _shpLocation;
		}
	}

	@Override
	public void setShpLocation(String shpLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpLocation = shpLocation;
	}

	@JSON
	@Override
	public long getShpLength() {
		return _shpLength;
	}

	@Override
	public void setShpLength(long shpLength) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpLength = shpLength;
	}

	@JSON
	@Override
	public long getShpHeight() {
		return _shpHeight;
	}

	@Override
	public void setShpHeight(long shpHeight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpHeight = shpHeight;
	}

	@JSON
	@Override
	public long getShpWidth() {
		return _shpWidth;
	}

	@Override
	public void setShpWidth(long shpWidth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpWidth = shpWidth;
	}

	@JSON
	@Override
	public long getShpStrgCpcty() {
		return _shpStrgCpcty;
	}

	@Override
	public void setShpStrgCpcty(long shpStrgCpcty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpStrgCpcty = shpStrgCpcty;
	}

	@JSON
	@Override
	public int getShpFlrCmntd() {
		return _shpFlrCmntd;
	}

	@Override
	public void setShpFlrCmntd(int shpFlrCmntd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpFlrCmntd = shpFlrCmntd;
	}

	@JSON
	@Override
	public int getShpSignBrd() {
		return _shpSignBrd;
	}

	@Override
	public void setShpSignBrd(int shpSignBrd) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shpSignBrd = shpSignBrd;
	}

	@JSON
	@Override
	public String getLicenseType() {
		if (_licenseType == null) {
			return "";
		}
		else {
			return _licenseType;
		}
	}

	@Override
	public void setLicenseType(String licenseType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseType = licenseType;
	}

	@JSON
	@Override
	public long getThrdPartyOpsFlg() {
		return _thrdPartyOpsFlg;
	}

	@Override
	public void setThrdPartyOpsFlg(long thrdPartyOpsFlg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thrdPartyOpsFlg = thrdPartyOpsFlg;
	}

	@JSON
	@Override
	public String getDlrshpFmlyMmbrName() {
		if (_dlrshpFmlyMmbrName == null) {
			return "";
		}
		else {
			return _dlrshpFmlyMmbrName;
		}
	}

	@Override
	public void setDlrshpFmlyMmbrName(String dlrshpFmlyMmbrName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrshpFmlyMmbrName = dlrshpFmlyMmbrName;
	}

	@JSON
	@Override
	public String getDlrshpFmlyMmbrType() {
		if (_dlrshpFmlyMmbrType == null) {
			return "";
		}
		else {
			return _dlrshpFmlyMmbrType;
		}
	}

	@Override
	public void setDlrshpFmlyMmbrType(String dlrshpFmlyMmbrType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrshpFmlyMmbrType = dlrshpFmlyMmbrType;
	}

	@JSON
	@Override
	public long getDlrPerfYr1() {
		return _dlrPerfYr1;
	}

	@Override
	public void setDlrPerfYr1(long dlrPerfYr1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr1 = dlrPerfYr1;
	}

	@JSON
	@Override
	public long getDlrPerfYr1AllocQty() {
		return _dlrPerfYr1AllocQty;
	}

	@Override
	public void setDlrPerfYr1AllocQty(long dlrPerfYr1AllocQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr1AllocQty = dlrPerfYr1AllocQty;
	}

	@JSON
	@Override
	public long getDlrPerfYr1ComdtyQty() {
		return _dlrPerfYr1ComdtyQty;
	}

	@Override
	public void setDlrPerfYr1ComdtyQty(long dlrPerfYr1ComdtyQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr1ComdtyQty = dlrPerfYr1ComdtyQty;
	}

	@JSON
	@Override
	public String getDlrPerfYr1DlrCtgry() {
		if (_dlrPerfYr1DlrCtgry == null) {
			return "";
		}
		else {
			return _dlrPerfYr1DlrCtgry;
		}
	}

	@Override
	public void setDlrPerfYr1DlrCtgry(String dlrPerfYr1DlrCtgry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr1DlrCtgry = dlrPerfYr1DlrCtgry;
	}

	@JSON
	@Override
	public String getDlrPerfYr1Rmrk() {
		if (_dlrPerfYr1Rmrk == null) {
			return "";
		}
		else {
			return _dlrPerfYr1Rmrk;
		}
	}

	@Override
	public void setDlrPerfYr1Rmrk(String dlrPerfYr1Rmrk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr1Rmrk = dlrPerfYr1Rmrk;
	}

	@JSON
	@Override
	public long getDlrPerfYr2() {
		return _dlrPerfYr2;
	}

	@Override
	public void setDlrPerfYr2(long dlrPerfYr2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr2 = dlrPerfYr2;
	}

	@JSON
	@Override
	public long getDlrPerfYr2AllocQty() {
		return _dlrPerfYr2AllocQty;
	}

	@Override
	public void setDlrPerfYr2AllocQty(long dlrPerfYr2AllocQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr2AllocQty = dlrPerfYr2AllocQty;
	}

	@JSON
	@Override
	public long getDlrPerfYr2ComdtyQty() {
		return _dlrPerfYr2ComdtyQty;
	}

	@Override
	public void setDlrPerfYr2ComdtyQty(long dlrPerfYr2ComdtyQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr2ComdtyQty = dlrPerfYr2ComdtyQty;
	}

	@JSON
	@Override
	public String getDlrPerfYr2DlrCtgry() {
		if (_dlrPerfYr2DlrCtgry == null) {
			return "";
		}
		else {
			return _dlrPerfYr2DlrCtgry;
		}
	}

	@Override
	public void setDlrPerfYr2DlrCtgry(String dlrPerfYr2DlrCtgry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr2DlrCtgry = dlrPerfYr2DlrCtgry;
	}

	@JSON
	@Override
	public String getDlrPerfYr2Rmrk() {
		if (_dlrPerfYr2Rmrk == null) {
			return "";
		}
		else {
			return _dlrPerfYr2Rmrk;
		}
	}

	@Override
	public void setDlrPerfYr2Rmrk(String dlrPerfYr2Rmrk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr2Rmrk = dlrPerfYr2Rmrk;
	}

	@JSON
	@Override
	public long getDlrPerfYr3() {
		return _dlrPerfYr3;
	}

	@Override
	public void setDlrPerfYr3(long dlrPerfYr3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr3 = dlrPerfYr3;
	}

	@JSON
	@Override
	public long getDlrPerfYr3AllocQty() {
		return _dlrPerfYr3AllocQty;
	}

	@Override
	public void setDlrPerfYr3AllocQty(long dlrPerfYr3AllocQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr3AllocQty = dlrPerfYr3AllocQty;
	}

	@JSON
	@Override
	public long getDlrPerfYr3ComdtyQty() {
		return _dlrPerfYr3ComdtyQty;
	}

	@Override
	public void setDlrPerfYr3ComdtyQty(long dlrPerfYr3ComdtyQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr3ComdtyQty = dlrPerfYr3ComdtyQty;
	}

	@JSON
	@Override
	public String getDlrPerfYr3DlrCtgry() {
		if (_dlrPerfYr3DlrCtgry == null) {
			return "";
		}
		else {
			return _dlrPerfYr3DlrCtgry;
		}
	}

	@Override
	public void setDlrPerfYr3DlrCtgry(String dlrPerfYr3DlrCtgry) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr3DlrCtgry = dlrPerfYr3DlrCtgry;
	}

	@JSON
	@Override
	public String getDlrPerfYr3Rmrk() {
		if (_dlrPerfYr3Rmrk == null) {
			return "";
		}
		else {
			return _dlrPerfYr3Rmrk;
		}
	}

	@Override
	public void setDlrPerfYr3Rmrk(String dlrPerfYr3Rmrk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrPerfYr3Rmrk = dlrPerfYr3Rmrk;
	}

	@JSON
	@Override
	public String getTrckLicnsPlatNo() {
		if (_trckLicnsPlatNo == null) {
			return "";
		}
		else {
			return _trckLicnsPlatNo;
		}
	}

	@Override
	public void setTrckLicnsPlatNo(String trckLicnsPlatNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckLicnsPlatNo = trckLicnsPlatNo;
	}

	@JSON
	@Override
	public long getTrckCpcty() {
		return _trckCpcty;
	}

	@Override
	public void setTrckCpcty(long trckCpcty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckCpcty = trckCpcty;
	}

	@JSON
	@Override
	public String getTrckMake() {
		if (_trckMake == null) {
			return "";
		}
		else {
			return _trckMake;
		}
	}

	@Override
	public void setTrckMake(String trckMake) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckMake = trckMake;
	}

	@JSON
	@Override
	public String getTrckModel() {
		if (_trckModel == null) {
			return "";
		}
		else {
			return _trckModel;
		}
	}

	@Override
	public void setTrckModel(String trckModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckModel = trckModel;
	}

	@JSON
	@Override
	public String getTrckRentOwnFlg() {
		if (_trckRentOwnFlg == null) {
			return "";
		}
		else {
			return _trckRentOwnFlg;
		}
	}

	@Override
	public void setTrckRentOwnFlg(String trckRentOwnFlg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckRentOwnFlg = trckRentOwnFlg;
	}

	@JSON
	@Override
	public long getTrckMfgYr() {
		return _trckMfgYr;
	}

	@Override
	public void setTrckMfgYr(long trckMfgYr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trckMfgYr = trckMfgYr;
	}

	@JSON
	@Override
	public long getVersion() {
		return _version;
	}

	@Override
	public void setVersion(long version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getLastUpdtdBy() {
		return _lastUpdtdBy;
	}

	@Override
	public void setLastUpdtdBy(long lastUpdtdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastUpdtdBy = lastUpdtdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getFoodgrainLicense() {
		return _foodgrainLicense;
	}

	@Override
	public void setFoodgrainLicense(int foodgrainLicense) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicense = foodgrainLicense;
	}

	@JSON
	@Override
	public int getTradeLicense() {
		return _tradeLicense;
	}

	@Override
	public void setTradeLicense(int tradeLicense) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicense = tradeLicense;
	}

	@JSON
	@Override
	public int getTcvDlrLicense() {
		return _tcvDlrLicense;
	}

	@Override
	public void setTcvDlrLicense(int tcvDlrLicense) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tcvDlrLicense = tcvDlrLicense;
	}

	@JSON
	@Override
	public int getImportLicense() {
		return _importLicense;
	}

	@Override
	public void setImportLicense(int importLicense) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_importLicense = importLicense;
	}

	@JSON
	@Override
	public int getLicenseEssentialGoods() {
		return _licenseEssentialGoods;
	}

	@Override
	public void setLicenseEssentialGoods(int licenseEssentialGoods) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseEssentialGoods = licenseEssentialGoods;
	}

	@JSON
	@Override
	public int getTradeLicenseAgriculture() {
		return _tradeLicenseAgriculture;
	}

	@Override
	public void setTradeLicenseAgriculture(int tradeLicenseAgriculture) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseAgriculture = tradeLicenseAgriculture;
	}

	@JSON
	@Override
	public String getDlrOmsSubType() {
		if (_dlrOmsSubType == null) {
			return "";
		}
		else {
			return _dlrOmsSubType;
		}
	}

	@Override
	public void setDlrOmsSubType(String dlrOmsSubType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrOmsSubType = dlrOmsSubType;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public int getDlrRunShpHimself() {
		return _dlrRunShpHimself;
	}

	@Override
	public void setDlrRunShpHimself(int dlrRunShpHimself) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRunShpHimself = dlrRunShpHimself;
	}

	@JSON
	@Override
	public int getDlrShpTrckTypFlg() {
		return _dlrShpTrckTypFlg;
	}

	@Override
	public void setDlrShpTrckTypFlg(int dlrShpTrckTypFlg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrShpTrckTypFlg = dlrShpTrckTypFlg;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DgfDlrUpdtTempDtls.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfDlrUpdtTempDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfDlrUpdtTempDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfDlrUpdtTempDtlsImpl dgfDlrUpdtTempDtlsImpl =
			new DgfDlrUpdtTempDtlsImpl();

		dgfDlrUpdtTempDtlsImpl.setDgfDlrUpdateReqId(getDgfDlrUpdateReqId());
		dgfDlrUpdtTempDtlsImpl.setNationalId(getNationalId());
		dgfDlrUpdtTempDtlsImpl.setDlrRegNo(getDlrRegNo());
		dgfDlrUpdtTempDtlsImpl.setMaritalStatus(getMaritalStatus());
		dgfDlrUpdtTempDtlsImpl.setSpouseName(getSpouseName());
		dgfDlrUpdtTempDtlsImpl.setSpouseFthrName(getSpouseFthrName());
		dgfDlrUpdtTempDtlsImpl.setSpouseNid(getSpouseNid());
		dgfDlrUpdtTempDtlsImpl.setSpouseBrthDate(getSpouseBrthDate());
		dgfDlrUpdtTempDtlsImpl.setPblcRep(getPblcRep());
		dgfDlrUpdtTempDtlsImpl.setWrkInGovt(getWrkInGovt());
		dgfDlrUpdtTempDtlsImpl.setPhysclyChlngd(getPhysclyChlngd());
		dgfDlrUpdtTempDtlsImpl.setPhsclyChlngdAttchId(getPhsclyChlngdAttchId());
		dgfDlrUpdtTempDtlsImpl.setShpDivision(getShpDivision());
		dgfDlrUpdtTempDtlsImpl.setShpDistrict(getShpDistrict());
		dgfDlrUpdtTempDtlsImpl.setShpUpzilla(getShpUpzilla());
		dgfDlrUpdtTempDtlsImpl.setShpUnion(getShpUnion());
		dgfDlrUpdtTempDtlsImpl.setShpVillage(getShpVillage());
		dgfDlrUpdtTempDtlsImpl.setShpWard(getShpWard());
		dgfDlrUpdtTempDtlsImpl.setShpZipCode(getShpZipCode());
		dgfDlrUpdtTempDtlsImpl.setShpPstOffc(getShpPstOffc());
		dgfDlrUpdtTempDtlsImpl.setShpPresentAddress(getShpPresentAddress());
		dgfDlrUpdtTempDtlsImpl.setShpLocation(getShpLocation());
		dgfDlrUpdtTempDtlsImpl.setShpLength(getShpLength());
		dgfDlrUpdtTempDtlsImpl.setShpHeight(getShpHeight());
		dgfDlrUpdtTempDtlsImpl.setShpWidth(getShpWidth());
		dgfDlrUpdtTempDtlsImpl.setShpStrgCpcty(getShpStrgCpcty());
		dgfDlrUpdtTempDtlsImpl.setShpFlrCmntd(getShpFlrCmntd());
		dgfDlrUpdtTempDtlsImpl.setShpSignBrd(getShpSignBrd());
		dgfDlrUpdtTempDtlsImpl.setLicenseType(getLicenseType());
		dgfDlrUpdtTempDtlsImpl.setThrdPartyOpsFlg(getThrdPartyOpsFlg());
		dgfDlrUpdtTempDtlsImpl.setDlrshpFmlyMmbrName(getDlrshpFmlyMmbrName());
		dgfDlrUpdtTempDtlsImpl.setDlrshpFmlyMmbrType(getDlrshpFmlyMmbrType());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1(getDlrPerfYr1());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1AllocQty(getDlrPerfYr1AllocQty());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1ComdtyQty(getDlrPerfYr1ComdtyQty());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1DlrCtgry(getDlrPerfYr1DlrCtgry());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1Rmrk(getDlrPerfYr1Rmrk());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2(getDlrPerfYr2());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2AllocQty(getDlrPerfYr2AllocQty());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2ComdtyQty(getDlrPerfYr2ComdtyQty());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2DlrCtgry(getDlrPerfYr2DlrCtgry());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2Rmrk(getDlrPerfYr2Rmrk());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3(getDlrPerfYr3());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3AllocQty(getDlrPerfYr3AllocQty());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3ComdtyQty(getDlrPerfYr3ComdtyQty());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3DlrCtgry(getDlrPerfYr3DlrCtgry());
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3Rmrk(getDlrPerfYr3Rmrk());
		dgfDlrUpdtTempDtlsImpl.setTrckLicnsPlatNo(getTrckLicnsPlatNo());
		dgfDlrUpdtTempDtlsImpl.setTrckCpcty(getTrckCpcty());
		dgfDlrUpdtTempDtlsImpl.setTrckMake(getTrckMake());
		dgfDlrUpdtTempDtlsImpl.setTrckModel(getTrckModel());
		dgfDlrUpdtTempDtlsImpl.setTrckRentOwnFlg(getTrckRentOwnFlg());
		dgfDlrUpdtTempDtlsImpl.setTrckMfgYr(getTrckMfgYr());
		dgfDlrUpdtTempDtlsImpl.setVersion(getVersion());
		dgfDlrUpdtTempDtlsImpl.setStatus(getStatus());
		dgfDlrUpdtTempDtlsImpl.setStatusByUserId(getStatusByUserId());
		dgfDlrUpdtTempDtlsImpl.setStatusByUserName(getStatusByUserName());
		dgfDlrUpdtTempDtlsImpl.setStatusDate(getStatusDate());
		dgfDlrUpdtTempDtlsImpl.setCreateDate(getCreateDate());
		dgfDlrUpdtTempDtlsImpl.setLastUpdtdBy(getLastUpdtdBy());
		dgfDlrUpdtTempDtlsImpl.setModifiedDate(getModifiedDate());
		dgfDlrUpdtTempDtlsImpl.setFoodgrainLicense(getFoodgrainLicense());
		dgfDlrUpdtTempDtlsImpl.setTradeLicense(getTradeLicense());
		dgfDlrUpdtTempDtlsImpl.setTcvDlrLicense(getTcvDlrLicense());
		dgfDlrUpdtTempDtlsImpl.setImportLicense(getImportLicense());
		dgfDlrUpdtTempDtlsImpl.setLicenseEssentialGoods(
			getLicenseEssentialGoods());
		dgfDlrUpdtTempDtlsImpl.setTradeLicenseAgriculture(
			getTradeLicenseAgriculture());
		dgfDlrUpdtTempDtlsImpl.setDlrOmsSubType(getDlrOmsSubType());
		dgfDlrUpdtTempDtlsImpl.setUserId(getUserId());
		dgfDlrUpdtTempDtlsImpl.setGroupId(getGroupId());
		dgfDlrUpdtTempDtlsImpl.setCompanyId(getCompanyId());
		dgfDlrUpdtTempDtlsImpl.setDlrRunShpHimself(getDlrRunShpHimself());
		dgfDlrUpdtTempDtlsImpl.setDlrShpTrckTypFlg(getDlrShpTrckTypFlg());

		dgfDlrUpdtTempDtlsImpl.resetOriginalValues();

		return dgfDlrUpdtTempDtlsImpl;
	}

	@Override
	public DgfDlrUpdtTempDtls cloneWithOriginalValues() {
		DgfDlrUpdtTempDtlsImpl dgfDlrUpdtTempDtlsImpl =
			new DgfDlrUpdtTempDtlsImpl();

		dgfDlrUpdtTempDtlsImpl.setDgfDlrUpdateReqId(
			this.<Long>getColumnOriginalValue("dgf_dlr_update_req_id"));
		dgfDlrUpdtTempDtlsImpl.setNationalId(
			this.<String>getColumnOriginalValue("national_id"));
		dgfDlrUpdtTempDtlsImpl.setDlrRegNo(
			this.<Long>getColumnOriginalValue("dlr_reg_no"));
		dgfDlrUpdtTempDtlsImpl.setMaritalStatus(
			this.<String>getColumnOriginalValue("marital_status"));
		dgfDlrUpdtTempDtlsImpl.setSpouseName(
			this.<String>getColumnOriginalValue("spouse_name"));
		dgfDlrUpdtTempDtlsImpl.setSpouseFthrName(
			this.<String>getColumnOriginalValue("spouse_fthr_name"));
		dgfDlrUpdtTempDtlsImpl.setSpouseNid(
			this.<String>getColumnOriginalValue("spouse_nid"));
		dgfDlrUpdtTempDtlsImpl.setSpouseBrthDate(
			this.<Date>getColumnOriginalValue("spouse_brth_date"));
		dgfDlrUpdtTempDtlsImpl.setPblcRep(
			this.<Integer>getColumnOriginalValue("pblc_rep"));
		dgfDlrUpdtTempDtlsImpl.setWrkInGovt(
			this.<Integer>getColumnOriginalValue("wrk_in_govt"));
		dgfDlrUpdtTempDtlsImpl.setPhysclyChlngd(
			this.<Integer>getColumnOriginalValue("physcly_chlngd"));
		dgfDlrUpdtTempDtlsImpl.setPhsclyChlngdAttchId(
			this.<Long>getColumnOriginalValue("phscly_chlngd_attch_id"));
		dgfDlrUpdtTempDtlsImpl.setShpDivision(
			this.<Long>getColumnOriginalValue("shp_division"));
		dgfDlrUpdtTempDtlsImpl.setShpDistrict(
			this.<Long>getColumnOriginalValue("shp_district"));
		dgfDlrUpdtTempDtlsImpl.setShpUpzilla(
			this.<Long>getColumnOriginalValue("shp_upzilla"));
		dgfDlrUpdtTempDtlsImpl.setShpUnion(
			this.<Long>getColumnOriginalValue("shp_union"));
		dgfDlrUpdtTempDtlsImpl.setShpVillage(
			this.<String>getColumnOriginalValue("shp_village"));
		dgfDlrUpdtTempDtlsImpl.setShpWard(
			this.<String>getColumnOriginalValue("shp_ward"));
		dgfDlrUpdtTempDtlsImpl.setShpZipCode(
			this.<String>getColumnOriginalValue("shp_zip_code"));
		dgfDlrUpdtTempDtlsImpl.setShpPstOffc(
			this.<String>getColumnOriginalValue("shp_pst_offc"));
		dgfDlrUpdtTempDtlsImpl.setShpPresentAddress(
			this.<String>getColumnOriginalValue("shp_present_address"));
		dgfDlrUpdtTempDtlsImpl.setShpLocation(
			this.<String>getColumnOriginalValue("shp_location"));
		dgfDlrUpdtTempDtlsImpl.setShpLength(
			this.<Long>getColumnOriginalValue("shp_length"));
		dgfDlrUpdtTempDtlsImpl.setShpHeight(
			this.<Long>getColumnOriginalValue("shp_height"));
		dgfDlrUpdtTempDtlsImpl.setShpWidth(
			this.<Long>getColumnOriginalValue("shp_width"));
		dgfDlrUpdtTempDtlsImpl.setShpStrgCpcty(
			this.<Long>getColumnOriginalValue("shp_strg_cpcty"));
		dgfDlrUpdtTempDtlsImpl.setShpFlrCmntd(
			this.<Integer>getColumnOriginalValue("shp_flr_cmntd"));
		dgfDlrUpdtTempDtlsImpl.setShpSignBrd(
			this.<Integer>getColumnOriginalValue("shp_sign_brd"));
		dgfDlrUpdtTempDtlsImpl.setLicenseType(
			this.<String>getColumnOriginalValue("license_type"));
		dgfDlrUpdtTempDtlsImpl.setThrdPartyOpsFlg(
			this.<Long>getColumnOriginalValue("thrd_party_ops_flg"));
		dgfDlrUpdtTempDtlsImpl.setDlrshpFmlyMmbrName(
			this.<String>getColumnOriginalValue("dlrshp_fmly_mmbr_name"));
		dgfDlrUpdtTempDtlsImpl.setDlrshpFmlyMmbrType(
			this.<String>getColumnOriginalValue("dlrshp_fmly_mmbr_type"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1(
			this.<Long>getColumnOriginalValue("dlr_perf_yr1"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1AllocQty(
			this.<Long>getColumnOriginalValue("dlr_perf_yr1_alloc_qty"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1ComdtyQty(
			this.<Long>getColumnOriginalValue("dlr_perf_yr1_comdty_qty"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1DlrCtgry(
			this.<String>getColumnOriginalValue("dlr_perf_yr1_dlr_ctgry"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr1Rmrk(
			this.<String>getColumnOriginalValue("dlr_perf_yr1_rmrk"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2(
			this.<Long>getColumnOriginalValue("dlr_perf_yr2"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2AllocQty(
			this.<Long>getColumnOriginalValue("dlr_perf_yr2_alloc_qty"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2ComdtyQty(
			this.<Long>getColumnOriginalValue("dlr_perf_yr2_comdty_qty"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2DlrCtgry(
			this.<String>getColumnOriginalValue("dlr_perf_yr2_dlr_ctgry"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr2Rmrk(
			this.<String>getColumnOriginalValue("dlr_perf_yr2_rmrk"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3(
			this.<Long>getColumnOriginalValue("dlr_perf_yr3"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3AllocQty(
			this.<Long>getColumnOriginalValue("dlr_perf_yr3_alloc_qty"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3ComdtyQty(
			this.<Long>getColumnOriginalValue("dlr_perf_yr3_comdty_qty"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3DlrCtgry(
			this.<String>getColumnOriginalValue("dlr_perf_yr3_dlr_ctgry"));
		dgfDlrUpdtTempDtlsImpl.setDlrPerfYr3Rmrk(
			this.<String>getColumnOriginalValue("dlr_perf_yr3_rmrk"));
		dgfDlrUpdtTempDtlsImpl.setTrckLicnsPlatNo(
			this.<String>getColumnOriginalValue("trck_licns_plat_no"));
		dgfDlrUpdtTempDtlsImpl.setTrckCpcty(
			this.<Long>getColumnOriginalValue("trck_cpcty"));
		dgfDlrUpdtTempDtlsImpl.setTrckMake(
			this.<String>getColumnOriginalValue("trck_make"));
		dgfDlrUpdtTempDtlsImpl.setTrckModel(
			this.<String>getColumnOriginalValue("trck_model"));
		dgfDlrUpdtTempDtlsImpl.setTrckRentOwnFlg(
			this.<String>getColumnOriginalValue("trck_rent_own_flg"));
		dgfDlrUpdtTempDtlsImpl.setTrckMfgYr(
			this.<Long>getColumnOriginalValue("trck_mfg_yr"));
		dgfDlrUpdtTempDtlsImpl.setVersion(
			this.<Long>getColumnOriginalValue("version"));
		dgfDlrUpdtTempDtlsImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		dgfDlrUpdtTempDtlsImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("status_by_user_id"));
		dgfDlrUpdtTempDtlsImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("status_by_user_name"));
		dgfDlrUpdtTempDtlsImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("status_date"));
		dgfDlrUpdtTempDtlsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("create_date"));
		dgfDlrUpdtTempDtlsImpl.setLastUpdtdBy(
			this.<Long>getColumnOriginalValue("last_updtd_by"));
		dgfDlrUpdtTempDtlsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modified_date"));
		dgfDlrUpdtTempDtlsImpl.setFoodgrainLicense(
			this.<Integer>getColumnOriginalValue("foodgrain_license"));
		dgfDlrUpdtTempDtlsImpl.setTradeLicense(
			this.<Integer>getColumnOriginalValue("trade_license"));
		dgfDlrUpdtTempDtlsImpl.setTcvDlrLicense(
			this.<Integer>getColumnOriginalValue("tcv_dlr_license"));
		dgfDlrUpdtTempDtlsImpl.setImportLicense(
			this.<Integer>getColumnOriginalValue("import_license"));
		dgfDlrUpdtTempDtlsImpl.setLicenseEssentialGoods(
			this.<Integer>getColumnOriginalValue("license_essential_goods"));
		dgfDlrUpdtTempDtlsImpl.setTradeLicenseAgriculture(
			this.<Integer>getColumnOriginalValue("trade_license_agriculture"));
		dgfDlrUpdtTempDtlsImpl.setDlrOmsSubType(
			this.<String>getColumnOriginalValue("dlr_oms_sub_type"));
		dgfDlrUpdtTempDtlsImpl.setUserId(
			this.<Long>getColumnOriginalValue("user_id"));
		dgfDlrUpdtTempDtlsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("group_id"));
		dgfDlrUpdtTempDtlsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("company_id"));
		dgfDlrUpdtTempDtlsImpl.setDlrRunShpHimself(
			this.<Integer>getColumnOriginalValue("dlr_run_shp_himself"));
		dgfDlrUpdtTempDtlsImpl.setDlrShpTrckTypFlg(
			this.<Integer>getColumnOriginalValue("dlr_shp_trck_typ_flg"));

		return dgfDlrUpdtTempDtlsImpl;
	}

	@Override
	public int compareTo(DgfDlrUpdtTempDtls dgfDlrUpdtTempDtls) {
		long primaryKey = dgfDlrUpdtTempDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfDlrUpdtTempDtls)) {
			return false;
		}

		DgfDlrUpdtTempDtls dgfDlrUpdtTempDtls = (DgfDlrUpdtTempDtls)object;

		long primaryKey = dgfDlrUpdtTempDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;
	}

	@Override
	public CacheModel<DgfDlrUpdtTempDtls> toCacheModel() {
		DgfDlrUpdtTempDtlsCacheModel dgfDlrUpdtTempDtlsCacheModel =
			new DgfDlrUpdtTempDtlsCacheModel();

		dgfDlrUpdtTempDtlsCacheModel.dgfDlrUpdateReqId = getDgfDlrUpdateReqId();

		dgfDlrUpdtTempDtlsCacheModel.nationalId = getNationalId();

		String nationalId = dgfDlrUpdtTempDtlsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.nationalId = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrRegNo = getDlrRegNo();

		dgfDlrUpdtTempDtlsCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = dgfDlrUpdtTempDtlsCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.maritalStatus = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.spouseName = getSpouseName();

		String spouseName = dgfDlrUpdtTempDtlsCacheModel.spouseName;

		if ((spouseName != null) && (spouseName.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.spouseName = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.spouseFthrName = getSpouseFthrName();

		String spouseFthrName = dgfDlrUpdtTempDtlsCacheModel.spouseFthrName;

		if ((spouseFthrName != null) && (spouseFthrName.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.spouseFthrName = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.spouseNid = getSpouseNid();

		String spouseNid = dgfDlrUpdtTempDtlsCacheModel.spouseNid;

		if ((spouseNid != null) && (spouseNid.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.spouseNid = null;
		}

		Date spouseBrthDate = getSpouseBrthDate();

		if (spouseBrthDate != null) {
			dgfDlrUpdtTempDtlsCacheModel.spouseBrthDate =
				spouseBrthDate.getTime();
		}
		else {
			dgfDlrUpdtTempDtlsCacheModel.spouseBrthDate = Long.MIN_VALUE;
		}

		dgfDlrUpdtTempDtlsCacheModel.pblcRep = getPblcRep();

		dgfDlrUpdtTempDtlsCacheModel.wrkInGovt = getWrkInGovt();

		dgfDlrUpdtTempDtlsCacheModel.physclyChlngd = getPhysclyChlngd();

		dgfDlrUpdtTempDtlsCacheModel.phsclyChlngdAttchId =
			getPhsclyChlngdAttchId();

		dgfDlrUpdtTempDtlsCacheModel.shpDivision = getShpDivision();

		dgfDlrUpdtTempDtlsCacheModel.shpDistrict = getShpDistrict();

		dgfDlrUpdtTempDtlsCacheModel.shpUpzilla = getShpUpzilla();

		dgfDlrUpdtTempDtlsCacheModel.shpUnion = getShpUnion();

		dgfDlrUpdtTempDtlsCacheModel.shpVillage = getShpVillage();

		String shpVillage = dgfDlrUpdtTempDtlsCacheModel.shpVillage;

		if ((shpVillage != null) && (shpVillage.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.shpVillage = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.shpWard = getShpWard();

		String shpWard = dgfDlrUpdtTempDtlsCacheModel.shpWard;

		if ((shpWard != null) && (shpWard.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.shpWard = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.shpZipCode = getShpZipCode();

		String shpZipCode = dgfDlrUpdtTempDtlsCacheModel.shpZipCode;

		if ((shpZipCode != null) && (shpZipCode.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.shpZipCode = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.shpPstOffc = getShpPstOffc();

		String shpPstOffc = dgfDlrUpdtTempDtlsCacheModel.shpPstOffc;

		if ((shpPstOffc != null) && (shpPstOffc.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.shpPstOffc = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.shpPresentAddress = getShpPresentAddress();

		String shpPresentAddress =
			dgfDlrUpdtTempDtlsCacheModel.shpPresentAddress;

		if ((shpPresentAddress != null) && (shpPresentAddress.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.shpPresentAddress = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.shpLocation = getShpLocation();

		String shpLocation = dgfDlrUpdtTempDtlsCacheModel.shpLocation;

		if ((shpLocation != null) && (shpLocation.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.shpLocation = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.shpLength = getShpLength();

		dgfDlrUpdtTempDtlsCacheModel.shpHeight = getShpHeight();

		dgfDlrUpdtTempDtlsCacheModel.shpWidth = getShpWidth();

		dgfDlrUpdtTempDtlsCacheModel.shpStrgCpcty = getShpStrgCpcty();

		dgfDlrUpdtTempDtlsCacheModel.shpFlrCmntd = getShpFlrCmntd();

		dgfDlrUpdtTempDtlsCacheModel.shpSignBrd = getShpSignBrd();

		dgfDlrUpdtTempDtlsCacheModel.licenseType = getLicenseType();

		String licenseType = dgfDlrUpdtTempDtlsCacheModel.licenseType;

		if ((licenseType != null) && (licenseType.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.licenseType = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.thrdPartyOpsFlg = getThrdPartyOpsFlg();

		dgfDlrUpdtTempDtlsCacheModel.dlrshpFmlyMmbrName =
			getDlrshpFmlyMmbrName();

		String dlrshpFmlyMmbrName =
			dgfDlrUpdtTempDtlsCacheModel.dlrshpFmlyMmbrName;

		if ((dlrshpFmlyMmbrName != null) &&
			(dlrshpFmlyMmbrName.length() == 0)) {

			dgfDlrUpdtTempDtlsCacheModel.dlrshpFmlyMmbrName = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrshpFmlyMmbrType =
			getDlrshpFmlyMmbrType();

		String dlrshpFmlyMmbrType =
			dgfDlrUpdtTempDtlsCacheModel.dlrshpFmlyMmbrType;

		if ((dlrshpFmlyMmbrType != null) &&
			(dlrshpFmlyMmbrType.length() == 0)) {

			dgfDlrUpdtTempDtlsCacheModel.dlrshpFmlyMmbrType = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1 = getDlrPerfYr1();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1AllocQty =
			getDlrPerfYr1AllocQty();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1ComdtyQty =
			getDlrPerfYr1ComdtyQty();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1DlrCtgry =
			getDlrPerfYr1DlrCtgry();

		String dlrPerfYr1DlrCtgry =
			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1DlrCtgry;

		if ((dlrPerfYr1DlrCtgry != null) &&
			(dlrPerfYr1DlrCtgry.length() == 0)) {

			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1DlrCtgry = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1Rmrk = getDlrPerfYr1Rmrk();

		String dlrPerfYr1Rmrk = dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1Rmrk;

		if ((dlrPerfYr1Rmrk != null) && (dlrPerfYr1Rmrk.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr1Rmrk = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2 = getDlrPerfYr2();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2AllocQty =
			getDlrPerfYr2AllocQty();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2ComdtyQty =
			getDlrPerfYr2ComdtyQty();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2DlrCtgry =
			getDlrPerfYr2DlrCtgry();

		String dlrPerfYr2DlrCtgry =
			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2DlrCtgry;

		if ((dlrPerfYr2DlrCtgry != null) &&
			(dlrPerfYr2DlrCtgry.length() == 0)) {

			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2DlrCtgry = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2Rmrk = getDlrPerfYr2Rmrk();

		String dlrPerfYr2Rmrk = dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2Rmrk;

		if ((dlrPerfYr2Rmrk != null) && (dlrPerfYr2Rmrk.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr2Rmrk = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3 = getDlrPerfYr3();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3AllocQty =
			getDlrPerfYr3AllocQty();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3ComdtyQty =
			getDlrPerfYr3ComdtyQty();

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3DlrCtgry =
			getDlrPerfYr3DlrCtgry();

		String dlrPerfYr3DlrCtgry =
			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3DlrCtgry;

		if ((dlrPerfYr3DlrCtgry != null) &&
			(dlrPerfYr3DlrCtgry.length() == 0)) {

			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3DlrCtgry = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3Rmrk = getDlrPerfYr3Rmrk();

		String dlrPerfYr3Rmrk = dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3Rmrk;

		if ((dlrPerfYr3Rmrk != null) && (dlrPerfYr3Rmrk.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.dlrPerfYr3Rmrk = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.trckLicnsPlatNo = getTrckLicnsPlatNo();

		String trckLicnsPlatNo = dgfDlrUpdtTempDtlsCacheModel.trckLicnsPlatNo;

		if ((trckLicnsPlatNo != null) && (trckLicnsPlatNo.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.trckLicnsPlatNo = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.trckCpcty = getTrckCpcty();

		dgfDlrUpdtTempDtlsCacheModel.trckMake = getTrckMake();

		String trckMake = dgfDlrUpdtTempDtlsCacheModel.trckMake;

		if ((trckMake != null) && (trckMake.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.trckMake = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.trckModel = getTrckModel();

		String trckModel = dgfDlrUpdtTempDtlsCacheModel.trckModel;

		if ((trckModel != null) && (trckModel.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.trckModel = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.trckRentOwnFlg = getTrckRentOwnFlg();

		String trckRentOwnFlg = dgfDlrUpdtTempDtlsCacheModel.trckRentOwnFlg;

		if ((trckRentOwnFlg != null) && (trckRentOwnFlg.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.trckRentOwnFlg = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.trckMfgYr = getTrckMfgYr();

		dgfDlrUpdtTempDtlsCacheModel.version = getVersion();

		dgfDlrUpdtTempDtlsCacheModel.status = getStatus();

		dgfDlrUpdtTempDtlsCacheModel.statusByUserId = getStatusByUserId();

		dgfDlrUpdtTempDtlsCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = dgfDlrUpdtTempDtlsCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			dgfDlrUpdtTempDtlsCacheModel.statusDate = statusDate.getTime();
		}
		else {
			dgfDlrUpdtTempDtlsCacheModel.statusDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dgfDlrUpdtTempDtlsCacheModel.createDate = createDate.getTime();
		}
		else {
			dgfDlrUpdtTempDtlsCacheModel.createDate = Long.MIN_VALUE;
		}

		dgfDlrUpdtTempDtlsCacheModel.lastUpdtdBy = getLastUpdtdBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dgfDlrUpdtTempDtlsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dgfDlrUpdtTempDtlsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dgfDlrUpdtTempDtlsCacheModel.foodgrainLicense = getFoodgrainLicense();

		dgfDlrUpdtTempDtlsCacheModel.tradeLicense = getTradeLicense();

		dgfDlrUpdtTempDtlsCacheModel.tcvDlrLicense = getTcvDlrLicense();

		dgfDlrUpdtTempDtlsCacheModel.importLicense = getImportLicense();

		dgfDlrUpdtTempDtlsCacheModel.licenseEssentialGoods =
			getLicenseEssentialGoods();

		dgfDlrUpdtTempDtlsCacheModel.tradeLicenseAgriculture =
			getTradeLicenseAgriculture();

		dgfDlrUpdtTempDtlsCacheModel.dlrOmsSubType = getDlrOmsSubType();

		String dlrOmsSubType = dgfDlrUpdtTempDtlsCacheModel.dlrOmsSubType;

		if ((dlrOmsSubType != null) && (dlrOmsSubType.length() == 0)) {
			dgfDlrUpdtTempDtlsCacheModel.dlrOmsSubType = null;
		}

		dgfDlrUpdtTempDtlsCacheModel.userId = getUserId();

		dgfDlrUpdtTempDtlsCacheModel.groupId = getGroupId();

		dgfDlrUpdtTempDtlsCacheModel.companyId = getCompanyId();

		dgfDlrUpdtTempDtlsCacheModel.dlrRunShpHimself = getDlrRunShpHimself();

		dgfDlrUpdtTempDtlsCacheModel.dlrShpTrckTypFlg = getDlrShpTrckTypFlg();

		return dgfDlrUpdtTempDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfDlrUpdtTempDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfDlrUpdtTempDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrUpdtTempDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfDlrUpdtTempDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfDlrUpdtTempDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfDlrUpdtTempDtls.class, ModelWrapper.class);

	}

	private long _dgfDlrUpdateReqId;
	private String _nationalId;
	private long _dlrRegNo;
	private String _maritalStatus;
	private String _spouseName;
	private String _spouseFthrName;
	private String _spouseNid;
	private Date _spouseBrthDate;
	private int _pblcRep;
	private int _wrkInGovt;
	private int _physclyChlngd;
	private long _phsclyChlngdAttchId;
	private long _shpDivision;
	private long _shpDistrict;
	private long _shpUpzilla;
	private long _shpUnion;
	private String _shpVillage;
	private String _shpWard;
	private String _shpZipCode;
	private String _shpPstOffc;
	private String _shpPresentAddress;
	private String _shpLocation;
	private long _shpLength;
	private long _shpHeight;
	private long _shpWidth;
	private long _shpStrgCpcty;
	private int _shpFlrCmntd;
	private int _shpSignBrd;
	private String _licenseType;
	private long _thrdPartyOpsFlg;
	private String _dlrshpFmlyMmbrName;
	private String _dlrshpFmlyMmbrType;
	private long _dlrPerfYr1;
	private long _dlrPerfYr1AllocQty;
	private long _dlrPerfYr1ComdtyQty;
	private String _dlrPerfYr1DlrCtgry;
	private String _dlrPerfYr1Rmrk;
	private long _dlrPerfYr2;
	private long _dlrPerfYr2AllocQty;
	private long _dlrPerfYr2ComdtyQty;
	private String _dlrPerfYr2DlrCtgry;
	private String _dlrPerfYr2Rmrk;
	private long _dlrPerfYr3;
	private long _dlrPerfYr3AllocQty;
	private long _dlrPerfYr3ComdtyQty;
	private String _dlrPerfYr3DlrCtgry;
	private String _dlrPerfYr3Rmrk;
	private String _trckLicnsPlatNo;
	private long _trckCpcty;
	private String _trckMake;
	private String _trckModel;
	private String _trckRentOwnFlg;
	private long _trckMfgYr;
	private long _version;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private Date _createDate;
	private long _lastUpdtdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _foodgrainLicense;
	private int _tradeLicense;
	private int _tcvDlrLicense;
	private int _importLicense;
	private int _licenseEssentialGoods;
	private int _tradeLicenseAgriculture;
	private String _dlrOmsSubType;
	private long _userId;
	private long _groupId;
	private long _companyId;
	private int _dlrRunShpHimself;
	private int _dlrShpTrckTypFlg;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfDlrUpdtTempDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfDlrUpdtTempDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("dgf_dlr_update_req_id", _dgfDlrUpdateReqId);
		_columnOriginalValues.put("national_id", _nationalId);
		_columnOriginalValues.put("dlr_reg_no", _dlrRegNo);
		_columnOriginalValues.put("marital_status", _maritalStatus);
		_columnOriginalValues.put("spouse_name", _spouseName);
		_columnOriginalValues.put("spouse_fthr_name", _spouseFthrName);
		_columnOriginalValues.put("spouse_nid", _spouseNid);
		_columnOriginalValues.put("spouse_brth_date", _spouseBrthDate);
		_columnOriginalValues.put("pblc_rep", _pblcRep);
		_columnOriginalValues.put("wrk_in_govt", _wrkInGovt);
		_columnOriginalValues.put("physcly_chlngd", _physclyChlngd);
		_columnOriginalValues.put(
			"phscly_chlngd_attch_id", _phsclyChlngdAttchId);
		_columnOriginalValues.put("shp_division", _shpDivision);
		_columnOriginalValues.put("shp_district", _shpDistrict);
		_columnOriginalValues.put("shp_upzilla", _shpUpzilla);
		_columnOriginalValues.put("shp_union", _shpUnion);
		_columnOriginalValues.put("shp_village", _shpVillage);
		_columnOriginalValues.put("shp_ward", _shpWard);
		_columnOriginalValues.put("shp_zip_code", _shpZipCode);
		_columnOriginalValues.put("shp_pst_offc", _shpPstOffc);
		_columnOriginalValues.put("shp_present_address", _shpPresentAddress);
		_columnOriginalValues.put("shp_location", _shpLocation);
		_columnOriginalValues.put("shp_length", _shpLength);
		_columnOriginalValues.put("shp_height", _shpHeight);
		_columnOriginalValues.put("shp_width", _shpWidth);
		_columnOriginalValues.put("shp_strg_cpcty", _shpStrgCpcty);
		_columnOriginalValues.put("shp_flr_cmntd", _shpFlrCmntd);
		_columnOriginalValues.put("shp_sign_brd", _shpSignBrd);
		_columnOriginalValues.put("license_type", _licenseType);
		_columnOriginalValues.put("thrd_party_ops_flg", _thrdPartyOpsFlg);
		_columnOriginalValues.put("dlrshp_fmly_mmbr_name", _dlrshpFmlyMmbrName);
		_columnOriginalValues.put("dlrshp_fmly_mmbr_type", _dlrshpFmlyMmbrType);
		_columnOriginalValues.put("dlr_perf_yr1", _dlrPerfYr1);
		_columnOriginalValues.put(
			"dlr_perf_yr1_alloc_qty", _dlrPerfYr1AllocQty);
		_columnOriginalValues.put(
			"dlr_perf_yr1_comdty_qty", _dlrPerfYr1ComdtyQty);
		_columnOriginalValues.put(
			"dlr_perf_yr1_dlr_ctgry", _dlrPerfYr1DlrCtgry);
		_columnOriginalValues.put("dlr_perf_yr1_rmrk", _dlrPerfYr1Rmrk);
		_columnOriginalValues.put("dlr_perf_yr2", _dlrPerfYr2);
		_columnOriginalValues.put(
			"dlr_perf_yr2_alloc_qty", _dlrPerfYr2AllocQty);
		_columnOriginalValues.put(
			"dlr_perf_yr2_comdty_qty", _dlrPerfYr2ComdtyQty);
		_columnOriginalValues.put(
			"dlr_perf_yr2_dlr_ctgry", _dlrPerfYr2DlrCtgry);
		_columnOriginalValues.put("dlr_perf_yr2_rmrk", _dlrPerfYr2Rmrk);
		_columnOriginalValues.put("dlr_perf_yr3", _dlrPerfYr3);
		_columnOriginalValues.put(
			"dlr_perf_yr3_alloc_qty", _dlrPerfYr3AllocQty);
		_columnOriginalValues.put(
			"dlr_perf_yr3_comdty_qty", _dlrPerfYr3ComdtyQty);
		_columnOriginalValues.put(
			"dlr_perf_yr3_dlr_ctgry", _dlrPerfYr3DlrCtgry);
		_columnOriginalValues.put("dlr_perf_yr3_rmrk", _dlrPerfYr3Rmrk);
		_columnOriginalValues.put("trck_licns_plat_no", _trckLicnsPlatNo);
		_columnOriginalValues.put("trck_cpcty", _trckCpcty);
		_columnOriginalValues.put("trck_make", _trckMake);
		_columnOriginalValues.put("trck_model", _trckModel);
		_columnOriginalValues.put("trck_rent_own_flg", _trckRentOwnFlg);
		_columnOriginalValues.put("trck_mfg_yr", _trckMfgYr);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("status_by_user_id", _statusByUserId);
		_columnOriginalValues.put("status_by_user_name", _statusByUserName);
		_columnOriginalValues.put("status_date", _statusDate);
		_columnOriginalValues.put("create_date", _createDate);
		_columnOriginalValues.put("last_updtd_by", _lastUpdtdBy);
		_columnOriginalValues.put("modified_date", _modifiedDate);
		_columnOriginalValues.put("foodgrain_license", _foodgrainLicense);
		_columnOriginalValues.put("trade_license", _tradeLicense);
		_columnOriginalValues.put("tcv_dlr_license", _tcvDlrLicense);
		_columnOriginalValues.put("import_license", _importLicense);
		_columnOriginalValues.put(
			"license_essential_goods", _licenseEssentialGoods);
		_columnOriginalValues.put(
			"trade_license_agriculture", _tradeLicenseAgriculture);
		_columnOriginalValues.put("dlr_oms_sub_type", _dlrOmsSubType);
		_columnOriginalValues.put("user_id", _userId);
		_columnOriginalValues.put("group_id", _groupId);
		_columnOriginalValues.put("company_id", _companyId);
		_columnOriginalValues.put("dlr_run_shp_himself", _dlrRunShpHimself);
		_columnOriginalValues.put("dlr_shp_trck_typ_flg", _dlrShpTrckTypFlg);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("dgf_dlr_update_req_id", "dgfDlrUpdateReqId");
		attributeNames.put("national_id", "nationalId");
		attributeNames.put("dlr_reg_no", "dlrRegNo");
		attributeNames.put("marital_status", "maritalStatus");
		attributeNames.put("spouse_name", "spouseName");
		attributeNames.put("spouse_fthr_name", "spouseFthrName");
		attributeNames.put("spouse_nid", "spouseNid");
		attributeNames.put("spouse_brth_date", "spouseBrthDate");
		attributeNames.put("pblc_rep", "pblcRep");
		attributeNames.put("wrk_in_govt", "wrkInGovt");
		attributeNames.put("physcly_chlngd", "physclyChlngd");
		attributeNames.put("phscly_chlngd_attch_id", "phsclyChlngdAttchId");
		attributeNames.put("shp_division", "shpDivision");
		attributeNames.put("shp_district", "shpDistrict");
		attributeNames.put("shp_upzilla", "shpUpzilla");
		attributeNames.put("shp_union", "shpUnion");
		attributeNames.put("shp_village", "shpVillage");
		attributeNames.put("shp_ward", "shpWard");
		attributeNames.put("shp_zip_code", "shpZipCode");
		attributeNames.put("shp_pst_offc", "shpPstOffc");
		attributeNames.put("shp_present_address", "shpPresentAddress");
		attributeNames.put("shp_location", "shpLocation");
		attributeNames.put("shp_length", "shpLength");
		attributeNames.put("shp_height", "shpHeight");
		attributeNames.put("shp_width", "shpWidth");
		attributeNames.put("shp_strg_cpcty", "shpStrgCpcty");
		attributeNames.put("shp_flr_cmntd", "shpFlrCmntd");
		attributeNames.put("shp_sign_brd", "shpSignBrd");
		attributeNames.put("license_type", "licenseType");
		attributeNames.put("thrd_party_ops_flg", "thrdPartyOpsFlg");
		attributeNames.put("dlrshp_fmly_mmbr_name", "dlrshpFmlyMmbrName");
		attributeNames.put("dlrshp_fmly_mmbr_type", "dlrshpFmlyMmbrType");
		attributeNames.put("dlr_perf_yr1", "dlrPerfYr1");
		attributeNames.put("dlr_perf_yr1_alloc_qty", "dlrPerfYr1AllocQty");
		attributeNames.put("dlr_perf_yr1_comdty_qty", "dlrPerfYr1ComdtyQty");
		attributeNames.put("dlr_perf_yr1_dlr_ctgry", "dlrPerfYr1DlrCtgry");
		attributeNames.put("dlr_perf_yr1_rmrk", "dlrPerfYr1Rmrk");
		attributeNames.put("dlr_perf_yr2", "dlrPerfYr2");
		attributeNames.put("dlr_perf_yr2_alloc_qty", "dlrPerfYr2AllocQty");
		attributeNames.put("dlr_perf_yr2_comdty_qty", "dlrPerfYr2ComdtyQty");
		attributeNames.put("dlr_perf_yr2_dlr_ctgry", "dlrPerfYr2DlrCtgry");
		attributeNames.put("dlr_perf_yr2_rmrk", "dlrPerfYr2Rmrk");
		attributeNames.put("dlr_perf_yr3", "dlrPerfYr3");
		attributeNames.put("dlr_perf_yr3_alloc_qty", "dlrPerfYr3AllocQty");
		attributeNames.put("dlr_perf_yr3_comdty_qty", "dlrPerfYr3ComdtyQty");
		attributeNames.put("dlr_perf_yr3_dlr_ctgry", "dlrPerfYr3DlrCtgry");
		attributeNames.put("dlr_perf_yr3_rmrk", "dlrPerfYr3Rmrk");
		attributeNames.put("trck_licns_plat_no", "trckLicnsPlatNo");
		attributeNames.put("trck_cpcty", "trckCpcty");
		attributeNames.put("trck_make", "trckMake");
		attributeNames.put("trck_model", "trckModel");
		attributeNames.put("trck_rent_own_flg", "trckRentOwnFlg");
		attributeNames.put("trck_mfg_yr", "trckMfgYr");
		attributeNames.put("status_by_user_id", "statusByUserId");
		attributeNames.put("status_by_user_name", "statusByUserName");
		attributeNames.put("status_date", "statusDate");
		attributeNames.put("create_date", "createDate");
		attributeNames.put("last_updtd_by", "lastUpdtdBy");
		attributeNames.put("modified_date", "modifiedDate");
		attributeNames.put("foodgrain_license", "foodgrainLicense");
		attributeNames.put("trade_license", "tradeLicense");
		attributeNames.put("tcv_dlr_license", "tcvDlrLicense");
		attributeNames.put("import_license", "importLicense");
		attributeNames.put("license_essential_goods", "licenseEssentialGoods");
		attributeNames.put(
			"trade_license_agriculture", "tradeLicenseAgriculture");
		attributeNames.put("dlr_oms_sub_type", "dlrOmsSubType");
		attributeNames.put("user_id", "userId");
		attributeNames.put("group_id", "groupId");
		attributeNames.put("company_id", "companyId");
		attributeNames.put("dlr_run_shp_himself", "dlrRunShpHimself");
		attributeNames.put("dlr_shp_trck_typ_flg", "dlrShpTrckTypFlg");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;
	private DgfDlrUpdtTempDtls _escapedModel;

}