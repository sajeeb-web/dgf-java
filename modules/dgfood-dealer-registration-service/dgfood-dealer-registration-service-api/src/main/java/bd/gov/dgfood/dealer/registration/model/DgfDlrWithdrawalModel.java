/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.dealer.registration.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the DgfDlrWithdrawal service. Represents a row in the &quot;dgf_dlr_withdrawal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>bd.gov.dgfood.dealer.registration.model.impl.DgfDlrWithdrawalModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>bd.gov.dgfood.dealer.registration.model.impl.DgfDlrWithdrawalImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfDlrWithdrawal
 * @generated
 */
@ProviderType
public interface DgfDlrWithdrawalModel
	extends BaseModel<DgfDlrWithdrawal>, ShardedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a dgf dlr withdrawal model instance should use the {@link DgfDlrWithdrawal} interface instead.
	 */

	/**
	 * Returns the primary key of this dgf dlr withdrawal.
	 *
	 * @return the primary key of this dgf dlr withdrawal
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this dgf dlr withdrawal.
	 *
	 * @param primaryKey the primary key of this dgf dlr withdrawal
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the dlr withdrawal ID of this dgf dlr withdrawal.
	 *
	 * @return the dlr withdrawal ID of this dgf dlr withdrawal
	 */
	public long getDlrWithdrawalId();

	/**
	 * Sets the dlr withdrawal ID of this dgf dlr withdrawal.
	 *
	 * @param dlrWithdrawalId the dlr withdrawal ID of this dgf dlr withdrawal
	 */
	public void setDlrWithdrawalId(long dlrWithdrawalId);

	/**
	 * Returns the national ID of this dgf dlr withdrawal.
	 *
	 * @return the national ID of this dgf dlr withdrawal
	 */
	@AutoEscape
	public String getNationalId();

	/**
	 * Sets the national ID of this dgf dlr withdrawal.
	 *
	 * @param nationalId the national ID of this dgf dlr withdrawal
	 */
	public void setNationalId(String nationalId);

	/**
	 * Returns the license no of this dgf dlr withdrawal.
	 *
	 * @return the license no of this dgf dlr withdrawal
	 */
	@AutoEscape
	public String getLicenseNo();

	/**
	 * Sets the license no of this dgf dlr withdrawal.
	 *
	 * @param licenseNo the license no of this dgf dlr withdrawal
	 */
	public void setLicenseNo(String licenseNo);

	/**
	 * Returns the dealer name of this dgf dlr withdrawal.
	 *
	 * @return the dealer name of this dgf dlr withdrawal
	 */
	@AutoEscape
	public String getDealerName();

	/**
	 * Sets the dealer name of this dgf dlr withdrawal.
	 *
	 * @param dealerName the dealer name of this dgf dlr withdrawal
	 */
	public void setDealerName(String dealerName);

	/**
	 * Returns the mobile no of this dgf dlr withdrawal.
	 *
	 * @return the mobile no of this dgf dlr withdrawal
	 */
	@AutoEscape
	public String getMobileNo();

	/**
	 * Sets the mobile no of this dgf dlr withdrawal.
	 *
	 * @param mobileNo the mobile no of this dgf dlr withdrawal
	 */
	public void setMobileNo(String mobileNo);

	/**
	 * Returns the reason of this dgf dlr withdrawal.
	 *
	 * @return the reason of this dgf dlr withdrawal
	 */
	@AutoEscape
	public String getReason();

	/**
	 * Sets the reason of this dgf dlr withdrawal.
	 *
	 * @param reason the reason of this dgf dlr withdrawal
	 */
	public void setReason(String reason);

	/**
	 * Returns the program type of this dgf dlr withdrawal.
	 *
	 * @return the program type of this dgf dlr withdrawal
	 */
	@AutoEscape
	public String getProgramType();

	/**
	 * Sets the program type of this dgf dlr withdrawal.
	 *
	 * @param programType the program type of this dgf dlr withdrawal
	 */
	public void setProgramType(String programType);

	/**
	 * Returns the oms sub type of this dgf dlr withdrawal.
	 *
	 * @return the oms sub type of this dgf dlr withdrawal
	 */
	@AutoEscape
	public String getOmsSubType();

	/**
	 * Sets the oms sub type of this dgf dlr withdrawal.
	 *
	 * @param omsSubType the oms sub type of this dgf dlr withdrawal
	 */
	public void setOmsSubType(String omsSubType);

	/**
	 * Returns the created date of this dgf dlr withdrawal.
	 *
	 * @return the created date of this dgf dlr withdrawal
	 */
	public Date getCreatedDate();

	/**
	 * Sets the created date of this dgf dlr withdrawal.
	 *
	 * @param createdDate the created date of this dgf dlr withdrawal
	 */
	public void setCreatedDate(Date createdDate);

	/**
	 * Returns the modified by of this dgf dlr withdrawal.
	 *
	 * @return the modified by of this dgf dlr withdrawal
	 */
	public long getModifiedBy();

	/**
	 * Sets the modified by of this dgf dlr withdrawal.
	 *
	 * @param modifiedBy the modified by of this dgf dlr withdrawal
	 */
	public void setModifiedBy(long modifiedBy);

	/**
	 * Returns the modified date of this dgf dlr withdrawal.
	 *
	 * @return the modified date of this dgf dlr withdrawal
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this dgf dlr withdrawal.
	 *
	 * @param modifiedDate the modified date of this dgf dlr withdrawal
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the user ID of this dgf dlr withdrawal.
	 *
	 * @return the user ID of this dgf dlr withdrawal
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this dgf dlr withdrawal.
	 *
	 * @param userId the user ID of this dgf dlr withdrawal
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this dgf dlr withdrawal.
	 *
	 * @return the user uuid of this dgf dlr withdrawal
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this dgf dlr withdrawal.
	 *
	 * @param userUuid the user uuid of this dgf dlr withdrawal
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the group ID of this dgf dlr withdrawal.
	 *
	 * @return the group ID of this dgf dlr withdrawal
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this dgf dlr withdrawal.
	 *
	 * @param groupId the group ID of this dgf dlr withdrawal
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this dgf dlr withdrawal.
	 *
	 * @return the company ID of this dgf dlr withdrawal
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this dgf dlr withdrawal.
	 *
	 * @param companyId the company ID of this dgf dlr withdrawal
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the dlr reg no of this dgf dlr withdrawal.
	 *
	 * @return the dlr reg no of this dgf dlr withdrawal
	 */
	public long getDlrRegNo();

	/**
	 * Sets the dlr reg no of this dgf dlr withdrawal.
	 *
	 * @param dlrRegNo the dlr reg no of this dgf dlr withdrawal
	 */
	public void setDlrRegNo(long dlrRegNo);

	/**
	 * Returns the reg appl no of this dgf dlr withdrawal.
	 *
	 * @return the reg appl no of this dgf dlr withdrawal
	 */
	public long getRegApplNo();

	/**
	 * Sets the reg appl no of this dgf dlr withdrawal.
	 *
	 * @param regApplNo the reg appl no of this dgf dlr withdrawal
	 */
	public void setRegApplNo(long regApplNo);

	/**
	 * Returns the status of this dgf dlr withdrawal.
	 *
	 * @return the status of this dgf dlr withdrawal
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this dgf dlr withdrawal.
	 *
	 * @param status the status of this dgf dlr withdrawal
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this dgf dlr withdrawal.
	 *
	 * @return the status by user ID of this dgf dlr withdrawal
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this dgf dlr withdrawal.
	 *
	 * @param statusByUserId the status by user ID of this dgf dlr withdrawal
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this dgf dlr withdrawal.
	 *
	 * @return the status by user uuid of this dgf dlr withdrawal
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this dgf dlr withdrawal.
	 *
	 * @param statusByUserUuid the status by user uuid of this dgf dlr withdrawal
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this dgf dlr withdrawal.
	 *
	 * @return the status by user name of this dgf dlr withdrawal
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this dgf dlr withdrawal.
	 *
	 * @param statusByUserName the status by user name of this dgf dlr withdrawal
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this dgf dlr withdrawal.
	 *
	 * @return the status date of this dgf dlr withdrawal
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this dgf dlr withdrawal.
	 *
	 * @param statusDate the status date of this dgf dlr withdrawal
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is approved.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is denied.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is a draft.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is expired.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is inactive.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is incomplete.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is pending.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this dgf dlr withdrawal is scheduled.
	 *
	 * @return <code>true</code> if this dgf dlr withdrawal is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public DgfDlrWithdrawal cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}