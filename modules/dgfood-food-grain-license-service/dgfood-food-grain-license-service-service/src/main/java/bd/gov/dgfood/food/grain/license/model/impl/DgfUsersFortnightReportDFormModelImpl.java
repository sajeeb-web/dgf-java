/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfUsersFortnightReportDForm;
import bd.gov.dgfood.food.grain.license.model.DgfUsersFortnightReportDFormModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfUsersFortnightReportDForm service. Represents a row in the &quot;dgf_users_fortnightreport_d&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfUsersFortnightReportDFormModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfUsersFortnightReportDFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfUsersFortnightReportDFormImpl
 * @generated
 */
@JSON(strict = true)
public class DgfUsersFortnightReportDFormModelImpl
	extends BaseModelImpl<DgfUsersFortnightReportDForm>
	implements DgfUsersFortnightReportDFormModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf users fortnight report d form model instance should use the <code>DgfUsersFortnightReportDForm</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_users_fortnightreport_d";

	public static final Object[][] TABLE_COLUMNS = {
		{"reportId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"usernationalId", Types.VARCHAR}, {"licenseNo", Types.VARCHAR},
		{"screenName", Types.VARCHAR}, {"fullName", Types.VARCHAR},
		{"bussinessType", Types.VARCHAR}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"product", Types.VARCHAR},
		{"initalStockOn", Types.INTEGER}, {"initalStockOnUnit", Types.VARCHAR},
		{"recivedQuantity", Types.INTEGER},
		{"recivedQuantityUnit", Types.VARCHAR},
		{"sellingQuantity", Types.INTEGER},
		{"sellingQuantityUnit", Types.VARCHAR},
		{"quantityOfFinishingStock", Types.INTEGER},
		{"quantityOfFinishingStockUnit", Types.VARCHAR},
		{"comment_", Types.VARCHAR}, {"nationalId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("reportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("usernationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licenseNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bussinessType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("product", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("initalStockOn", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("initalStockOnUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recivedQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("recivedQuantityUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sellingQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sellingQuantityUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantityOfFinishingStock", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("quantityOfFinishingStockUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_users_fortnightreport_d (reportId LONG not null primary key,userId LONG,usernationalId VARCHAR(75) null,licenseNo VARCHAR(75) null,screenName VARCHAR(75) null,fullName VARCHAR(75) null,bussinessType VARCHAR(75) null,startDate DATE null,endDate DATE null,product VARCHAR(75) null,initalStockOn INTEGER,initalStockOnUnit VARCHAR(75) null,recivedQuantity INTEGER,recivedQuantityUnit VARCHAR(75) null,sellingQuantity INTEGER,sellingQuantityUnit VARCHAR(75) null,quantityOfFinishingStock INTEGER,quantityOfFinishingStockUnit VARCHAR(75) null,comment_ VARCHAR(75) null,nationalId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_users_fortnightreport_d";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfUsersFortnightReportDForm.reportId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_users_fortnightreport_d.reportId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICENSENO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SCREENNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNATIONALID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REPORTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfUsersFortnightReportDFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfUsersFortnightReportDForm.class;
	}

	@Override
	public String getModelClassName() {
		return DgfUsersFortnightReportDForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfUsersFortnightReportDForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfUsersFortnightReportDForm, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfUsersFortnightReportDForm, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(DgfUsersFortnightReportDForm)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfUsersFortnightReportDForm, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfUsersFortnightReportDForm, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfUsersFortnightReportDForm)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfUsersFortnightReportDForm, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfUsersFortnightReportDForm, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<DgfUsersFortnightReportDForm, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<DgfUsersFortnightReportDForm, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfUsersFortnightReportDForm, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DgfUsersFortnightReportDForm, Object>>();
		Map<String, BiConsumer<DgfUsersFortnightReportDForm, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DgfUsersFortnightReportDForm, ?>>();

		attributeGetterFunctions.put(
			"reportId", DgfUsersFortnightReportDForm::getReportId);
		attributeSetterBiConsumers.put(
			"reportId",
			(BiConsumer<DgfUsersFortnightReportDForm, Long>)
				DgfUsersFortnightReportDForm::setReportId);
		attributeGetterFunctions.put(
			"userId", DgfUsersFortnightReportDForm::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DgfUsersFortnightReportDForm, Long>)
				DgfUsersFortnightReportDForm::setUserId);
		attributeGetterFunctions.put(
			"usernationalId", DgfUsersFortnightReportDForm::getUsernationalId);
		attributeSetterBiConsumers.put(
			"usernationalId",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setUsernationalId);
		attributeGetterFunctions.put(
			"licenseNo", DgfUsersFortnightReportDForm::getLicenseNo);
		attributeSetterBiConsumers.put(
			"licenseNo",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setLicenseNo);
		attributeGetterFunctions.put(
			"screenName", DgfUsersFortnightReportDForm::getScreenName);
		attributeSetterBiConsumers.put(
			"screenName",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setScreenName);
		attributeGetterFunctions.put(
			"fullName", DgfUsersFortnightReportDForm::getFullName);
		attributeSetterBiConsumers.put(
			"fullName",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setFullName);
		attributeGetterFunctions.put(
			"bussinessType", DgfUsersFortnightReportDForm::getBussinessType);
		attributeSetterBiConsumers.put(
			"bussinessType",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setBussinessType);
		attributeGetterFunctions.put(
			"startDate", DgfUsersFortnightReportDForm::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<DgfUsersFortnightReportDForm, Date>)
				DgfUsersFortnightReportDForm::setStartDate);
		attributeGetterFunctions.put(
			"endDate", DgfUsersFortnightReportDForm::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<DgfUsersFortnightReportDForm, Date>)
				DgfUsersFortnightReportDForm::setEndDate);
		attributeGetterFunctions.put(
			"product", DgfUsersFortnightReportDForm::getProduct);
		attributeSetterBiConsumers.put(
			"product",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setProduct);
		attributeGetterFunctions.put(
			"initalStockOn", DgfUsersFortnightReportDForm::getInitalStockOn);
		attributeSetterBiConsumers.put(
			"initalStockOn",
			(BiConsumer<DgfUsersFortnightReportDForm, Integer>)
				DgfUsersFortnightReportDForm::setInitalStockOn);
		attributeGetterFunctions.put(
			"initalStockOnUnit",
			DgfUsersFortnightReportDForm::getInitalStockOnUnit);
		attributeSetterBiConsumers.put(
			"initalStockOnUnit",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setInitalStockOnUnit);
		attributeGetterFunctions.put(
			"recivedQuantity",
			DgfUsersFortnightReportDForm::getRecivedQuantity);
		attributeSetterBiConsumers.put(
			"recivedQuantity",
			(BiConsumer<DgfUsersFortnightReportDForm, Integer>)
				DgfUsersFortnightReportDForm::setRecivedQuantity);
		attributeGetterFunctions.put(
			"recivedQuantityUnit",
			DgfUsersFortnightReportDForm::getRecivedQuantityUnit);
		attributeSetterBiConsumers.put(
			"recivedQuantityUnit",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setRecivedQuantityUnit);
		attributeGetterFunctions.put(
			"sellingQuantity",
			DgfUsersFortnightReportDForm::getSellingQuantity);
		attributeSetterBiConsumers.put(
			"sellingQuantity",
			(BiConsumer<DgfUsersFortnightReportDForm, Integer>)
				DgfUsersFortnightReportDForm::setSellingQuantity);
		attributeGetterFunctions.put(
			"sellingQuantityUnit",
			DgfUsersFortnightReportDForm::getSellingQuantityUnit);
		attributeSetterBiConsumers.put(
			"sellingQuantityUnit",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setSellingQuantityUnit);
		attributeGetterFunctions.put(
			"quantityOfFinishingStock",
			DgfUsersFortnightReportDForm::getQuantityOfFinishingStock);
		attributeSetterBiConsumers.put(
			"quantityOfFinishingStock",
			(BiConsumer<DgfUsersFortnightReportDForm, Integer>)
				DgfUsersFortnightReportDForm::setQuantityOfFinishingStock);
		attributeGetterFunctions.put(
			"quantityOfFinishingStockUnit",
			DgfUsersFortnightReportDForm::getQuantityOfFinishingStockUnit);
		attributeSetterBiConsumers.put(
			"quantityOfFinishingStockUnit",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setQuantityOfFinishingStockUnit);
		attributeGetterFunctions.put(
			"comment", DgfUsersFortnightReportDForm::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setComment);
		attributeGetterFunctions.put(
			"nationalId", DgfUsersFortnightReportDForm::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfUsersFortnightReportDForm, String>)
				DgfUsersFortnightReportDForm::setNationalId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportId = reportId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUsernationalId() {
		if (_usernationalId == null) {
			return "";
		}
		else {
			return _usernationalId;
		}
	}

	@Override
	public void setUsernationalId(String usernationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usernationalId = usernationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUsernationalId() {
		return getColumnOriginalValue("usernationalId");
	}

	@JSON
	@Override
	public String getLicenseNo() {
		if (_licenseNo == null) {
			return "";
		}
		else {
			return _licenseNo;
		}
	}

	@Override
	public void setLicenseNo(String licenseNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licenseNo = licenseNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLicenseNo() {
		return getColumnOriginalValue("licenseNo");
	}

	@JSON
	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return "";
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_screenName = screenName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalScreenName() {
		return getColumnOriginalValue("screenName");
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullName = fullName;
	}

	@JSON
	@Override
	public String getBussinessType() {
		if (_bussinessType == null) {
			return "";
		}
		else {
			return _bussinessType;
		}
	}

	@Override
	public void setBussinessType(String bussinessType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bussinessType = bussinessType;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getProduct() {
		if (_product == null) {
			return "";
		}
		else {
			return _product;
		}
	}

	@Override
	public void setProduct(String product) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_product = product;
	}

	@JSON
	@Override
	public int getInitalStockOn() {
		return _initalStockOn;
	}

	@Override
	public void setInitalStockOn(int initalStockOn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_initalStockOn = initalStockOn;
	}

	@JSON
	@Override
	public String getInitalStockOnUnit() {
		if (_initalStockOnUnit == null) {
			return "";
		}
		else {
			return _initalStockOnUnit;
		}
	}

	@Override
	public void setInitalStockOnUnit(String initalStockOnUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_initalStockOnUnit = initalStockOnUnit;
	}

	@JSON
	@Override
	public int getRecivedQuantity() {
		return _recivedQuantity;
	}

	@Override
	public void setRecivedQuantity(int recivedQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recivedQuantity = recivedQuantity;
	}

	@JSON
	@Override
	public String getRecivedQuantityUnit() {
		if (_recivedQuantityUnit == null) {
			return "";
		}
		else {
			return _recivedQuantityUnit;
		}
	}

	@Override
	public void setRecivedQuantityUnit(String recivedQuantityUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recivedQuantityUnit = recivedQuantityUnit;
	}

	@JSON
	@Override
	public int getSellingQuantity() {
		return _sellingQuantity;
	}

	@Override
	public void setSellingQuantity(int sellingQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sellingQuantity = sellingQuantity;
	}

	@JSON
	@Override
	public String getSellingQuantityUnit() {
		if (_sellingQuantityUnit == null) {
			return "";
		}
		else {
			return _sellingQuantityUnit;
		}
	}

	@Override
	public void setSellingQuantityUnit(String sellingQuantityUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sellingQuantityUnit = sellingQuantityUnit;
	}

	@JSON
	@Override
	public int getQuantityOfFinishingStock() {
		return _quantityOfFinishingStock;
	}

	@Override
	public void setQuantityOfFinishingStock(int quantityOfFinishingStock) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantityOfFinishingStock = quantityOfFinishingStock;
	}

	@JSON
	@Override
	public String getQuantityOfFinishingStockUnit() {
		if (_quantityOfFinishingStockUnit == null) {
			return "";
		}
		else {
			return _quantityOfFinishingStockUnit;
		}
	}

	@Override
	public void setQuantityOfFinishingStockUnit(
		String quantityOfFinishingStockUnit) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantityOfFinishingStockUnit = quantityOfFinishingStockUnit;
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfUsersFortnightReportDForm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfUsersFortnightReportDForm toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfUsersFortnightReportDForm>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfUsersFortnightReportDFormImpl dgfUsersFortnightReportDFormImpl =
			new DgfUsersFortnightReportDFormImpl();

		dgfUsersFortnightReportDFormImpl.setReportId(getReportId());
		dgfUsersFortnightReportDFormImpl.setUserId(getUserId());
		dgfUsersFortnightReportDFormImpl.setUsernationalId(getUsernationalId());
		dgfUsersFortnightReportDFormImpl.setLicenseNo(getLicenseNo());
		dgfUsersFortnightReportDFormImpl.setScreenName(getScreenName());
		dgfUsersFortnightReportDFormImpl.setFullName(getFullName());
		dgfUsersFortnightReportDFormImpl.setBussinessType(getBussinessType());
		dgfUsersFortnightReportDFormImpl.setStartDate(getStartDate());
		dgfUsersFortnightReportDFormImpl.setEndDate(getEndDate());
		dgfUsersFortnightReportDFormImpl.setProduct(getProduct());
		dgfUsersFortnightReportDFormImpl.setInitalStockOn(getInitalStockOn());
		dgfUsersFortnightReportDFormImpl.setInitalStockOnUnit(
			getInitalStockOnUnit());
		dgfUsersFortnightReportDFormImpl.setRecivedQuantity(
			getRecivedQuantity());
		dgfUsersFortnightReportDFormImpl.setRecivedQuantityUnit(
			getRecivedQuantityUnit());
		dgfUsersFortnightReportDFormImpl.setSellingQuantity(
			getSellingQuantity());
		dgfUsersFortnightReportDFormImpl.setSellingQuantityUnit(
			getSellingQuantityUnit());
		dgfUsersFortnightReportDFormImpl.setQuantityOfFinishingStock(
			getQuantityOfFinishingStock());
		dgfUsersFortnightReportDFormImpl.setQuantityOfFinishingStockUnit(
			getQuantityOfFinishingStockUnit());
		dgfUsersFortnightReportDFormImpl.setComment(getComment());
		dgfUsersFortnightReportDFormImpl.setNationalId(getNationalId());

		dgfUsersFortnightReportDFormImpl.resetOriginalValues();

		return dgfUsersFortnightReportDFormImpl;
	}

	@Override
	public DgfUsersFortnightReportDForm cloneWithOriginalValues() {
		DgfUsersFortnightReportDFormImpl dgfUsersFortnightReportDFormImpl =
			new DgfUsersFortnightReportDFormImpl();

		dgfUsersFortnightReportDFormImpl.setReportId(
			this.<Long>getColumnOriginalValue("reportId"));
		dgfUsersFortnightReportDFormImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		dgfUsersFortnightReportDFormImpl.setUsernationalId(
			this.<String>getColumnOriginalValue("usernationalId"));
		dgfUsersFortnightReportDFormImpl.setLicenseNo(
			this.<String>getColumnOriginalValue("licenseNo"));
		dgfUsersFortnightReportDFormImpl.setScreenName(
			this.<String>getColumnOriginalValue("screenName"));
		dgfUsersFortnightReportDFormImpl.setFullName(
			this.<String>getColumnOriginalValue("fullName"));
		dgfUsersFortnightReportDFormImpl.setBussinessType(
			this.<String>getColumnOriginalValue("bussinessType"));
		dgfUsersFortnightReportDFormImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		dgfUsersFortnightReportDFormImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		dgfUsersFortnightReportDFormImpl.setProduct(
			this.<String>getColumnOriginalValue("product"));
		dgfUsersFortnightReportDFormImpl.setInitalStockOn(
			this.<Integer>getColumnOriginalValue("initalStockOn"));
		dgfUsersFortnightReportDFormImpl.setInitalStockOnUnit(
			this.<String>getColumnOriginalValue("initalStockOnUnit"));
		dgfUsersFortnightReportDFormImpl.setRecivedQuantity(
			this.<Integer>getColumnOriginalValue("recivedQuantity"));
		dgfUsersFortnightReportDFormImpl.setRecivedQuantityUnit(
			this.<String>getColumnOriginalValue("recivedQuantityUnit"));
		dgfUsersFortnightReportDFormImpl.setSellingQuantity(
			this.<Integer>getColumnOriginalValue("sellingQuantity"));
		dgfUsersFortnightReportDFormImpl.setSellingQuantityUnit(
			this.<String>getColumnOriginalValue("sellingQuantityUnit"));
		dgfUsersFortnightReportDFormImpl.setQuantityOfFinishingStock(
			this.<Integer>getColumnOriginalValue("quantityOfFinishingStock"));
		dgfUsersFortnightReportDFormImpl.setQuantityOfFinishingStockUnit(
			this.<String>getColumnOriginalValue(
				"quantityOfFinishingStockUnit"));
		dgfUsersFortnightReportDFormImpl.setComment(
			this.<String>getColumnOriginalValue("comment_"));
		dgfUsersFortnightReportDFormImpl.setNationalId(
			this.<String>getColumnOriginalValue("nationalId"));

		return dgfUsersFortnightReportDFormImpl;
	}

	@Override
	public int compareTo(
		DgfUsersFortnightReportDForm dgfUsersFortnightReportDForm) {

		long primaryKey = dgfUsersFortnightReportDForm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfUsersFortnightReportDForm)) {
			return false;
		}

		DgfUsersFortnightReportDForm dgfUsersFortnightReportDForm =
			(DgfUsersFortnightReportDForm)object;

		long primaryKey = dgfUsersFortnightReportDForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfUsersFortnightReportDForm> toCacheModel() {
		DgfUsersFortnightReportDFormCacheModel
			dgfUsersFortnightReportDFormCacheModel =
				new DgfUsersFortnightReportDFormCacheModel();

		dgfUsersFortnightReportDFormCacheModel.reportId = getReportId();

		dgfUsersFortnightReportDFormCacheModel.userId = getUserId();

		dgfUsersFortnightReportDFormCacheModel.usernationalId =
			getUsernationalId();

		String usernationalId =
			dgfUsersFortnightReportDFormCacheModel.usernationalId;

		if ((usernationalId != null) && (usernationalId.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.usernationalId = null;
		}

		dgfUsersFortnightReportDFormCacheModel.licenseNo = getLicenseNo();

		String licenseNo = dgfUsersFortnightReportDFormCacheModel.licenseNo;

		if ((licenseNo != null) && (licenseNo.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.licenseNo = null;
		}

		dgfUsersFortnightReportDFormCacheModel.screenName = getScreenName();

		String screenName = dgfUsersFortnightReportDFormCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.screenName = null;
		}

		dgfUsersFortnightReportDFormCacheModel.fullName = getFullName();

		String fullName = dgfUsersFortnightReportDFormCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.fullName = null;
		}

		dgfUsersFortnightReportDFormCacheModel.bussinessType =
			getBussinessType();

		String bussinessType =
			dgfUsersFortnightReportDFormCacheModel.bussinessType;

		if ((bussinessType != null) && (bussinessType.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.bussinessType = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			dgfUsersFortnightReportDFormCacheModel.startDate =
				startDate.getTime();
		}
		else {
			dgfUsersFortnightReportDFormCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			dgfUsersFortnightReportDFormCacheModel.endDate = endDate.getTime();
		}
		else {
			dgfUsersFortnightReportDFormCacheModel.endDate = Long.MIN_VALUE;
		}

		dgfUsersFortnightReportDFormCacheModel.product = getProduct();

		String product = dgfUsersFortnightReportDFormCacheModel.product;

		if ((product != null) && (product.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.product = null;
		}

		dgfUsersFortnightReportDFormCacheModel.initalStockOn =
			getInitalStockOn();

		dgfUsersFortnightReportDFormCacheModel.initalStockOnUnit =
			getInitalStockOnUnit();

		String initalStockOnUnit =
			dgfUsersFortnightReportDFormCacheModel.initalStockOnUnit;

		if ((initalStockOnUnit != null) && (initalStockOnUnit.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.initalStockOnUnit = null;
		}

		dgfUsersFortnightReportDFormCacheModel.recivedQuantity =
			getRecivedQuantity();

		dgfUsersFortnightReportDFormCacheModel.recivedQuantityUnit =
			getRecivedQuantityUnit();

		String recivedQuantityUnit =
			dgfUsersFortnightReportDFormCacheModel.recivedQuantityUnit;

		if ((recivedQuantityUnit != null) &&
			(recivedQuantityUnit.length() == 0)) {

			dgfUsersFortnightReportDFormCacheModel.recivedQuantityUnit = null;
		}

		dgfUsersFortnightReportDFormCacheModel.sellingQuantity =
			getSellingQuantity();

		dgfUsersFortnightReportDFormCacheModel.sellingQuantityUnit =
			getSellingQuantityUnit();

		String sellingQuantityUnit =
			dgfUsersFortnightReportDFormCacheModel.sellingQuantityUnit;

		if ((sellingQuantityUnit != null) &&
			(sellingQuantityUnit.length() == 0)) {

			dgfUsersFortnightReportDFormCacheModel.sellingQuantityUnit = null;
		}

		dgfUsersFortnightReportDFormCacheModel.quantityOfFinishingStock =
			getQuantityOfFinishingStock();

		dgfUsersFortnightReportDFormCacheModel.quantityOfFinishingStockUnit =
			getQuantityOfFinishingStockUnit();

		String quantityOfFinishingStockUnit =
			dgfUsersFortnightReportDFormCacheModel.quantityOfFinishingStockUnit;

		if ((quantityOfFinishingStockUnit != null) &&
			(quantityOfFinishingStockUnit.length() == 0)) {

			dgfUsersFortnightReportDFormCacheModel.
				quantityOfFinishingStockUnit = null;
		}

		dgfUsersFortnightReportDFormCacheModel.comment = getComment();

		String comment = dgfUsersFortnightReportDFormCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.comment = null;
		}

		dgfUsersFortnightReportDFormCacheModel.nationalId = getNationalId();

		String nationalId = dgfUsersFortnightReportDFormCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfUsersFortnightReportDFormCacheModel.nationalId = null;
		}

		return dgfUsersFortnightReportDFormCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfUsersFortnightReportDForm, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfUsersFortnightReportDForm, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfUsersFortnightReportDForm, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfUsersFortnightReportDForm)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, DgfUsersFortnightReportDForm>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						DgfUsersFortnightReportDForm.class, ModelWrapper.class);

	}

	private long _reportId;
	private long _userId;
	private String _usernationalId;
	private String _licenseNo;
	private String _screenName;
	private String _fullName;
	private String _bussinessType;
	private Date _startDate;
	private Date _endDate;
	private String _product;
	private int _initalStockOn;
	private String _initalStockOnUnit;
	private int _recivedQuantity;
	private String _recivedQuantityUnit;
	private int _sellingQuantity;
	private String _sellingQuantityUnit;
	private int _quantityOfFinishingStock;
	private String _quantityOfFinishingStockUnit;
	private String _comment;
	private String _nationalId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfUsersFortnightReportDForm, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfUsersFortnightReportDForm)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("reportId", _reportId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("usernationalId", _usernationalId);
		_columnOriginalValues.put("licenseNo", _licenseNo);
		_columnOriginalValues.put("screenName", _screenName);
		_columnOriginalValues.put("fullName", _fullName);
		_columnOriginalValues.put("bussinessType", _bussinessType);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("product", _product);
		_columnOriginalValues.put("initalStockOn", _initalStockOn);
		_columnOriginalValues.put("initalStockOnUnit", _initalStockOnUnit);
		_columnOriginalValues.put("recivedQuantity", _recivedQuantity);
		_columnOriginalValues.put("recivedQuantityUnit", _recivedQuantityUnit);
		_columnOriginalValues.put("sellingQuantity", _sellingQuantity);
		_columnOriginalValues.put("sellingQuantityUnit", _sellingQuantityUnit);
		_columnOriginalValues.put(
			"quantityOfFinishingStock", _quantityOfFinishingStock);
		_columnOriginalValues.put(
			"quantityOfFinishingStockUnit", _quantityOfFinishingStockUnit);
		_columnOriginalValues.put("comment_", _comment);
		_columnOriginalValues.put("nationalId", _nationalId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("reportId", 1L);

		columnBitmasks.put("userId", 2L);

		columnBitmasks.put("usernationalId", 4L);

		columnBitmasks.put("licenseNo", 8L);

		columnBitmasks.put("screenName", 16L);

		columnBitmasks.put("fullName", 32L);

		columnBitmasks.put("bussinessType", 64L);

		columnBitmasks.put("startDate", 128L);

		columnBitmasks.put("endDate", 256L);

		columnBitmasks.put("product", 512L);

		columnBitmasks.put("initalStockOn", 1024L);

		columnBitmasks.put("initalStockOnUnit", 2048L);

		columnBitmasks.put("recivedQuantity", 4096L);

		columnBitmasks.put("recivedQuantityUnit", 8192L);

		columnBitmasks.put("sellingQuantity", 16384L);

		columnBitmasks.put("sellingQuantityUnit", 32768L);

		columnBitmasks.put("quantityOfFinishingStock", 65536L);

		columnBitmasks.put("quantityOfFinishingStockUnit", 131072L);

		columnBitmasks.put("comment_", 262144L);

		columnBitmasks.put("nationalId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfUsersFortnightReportDForm _escapedModel;

}