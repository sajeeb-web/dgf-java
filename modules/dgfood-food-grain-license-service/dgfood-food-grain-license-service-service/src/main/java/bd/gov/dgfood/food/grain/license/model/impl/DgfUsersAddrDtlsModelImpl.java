/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfUsersAddrDtls;
import bd.gov.dgfood.food.grain.license.model.DgfUsersAddrDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfUsersAddrDtls service. Represents a row in the &quot;dgf_users_addr_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfUsersAddrDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfUsersAddrDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfUsersAddrDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfUsersAddrDtlsModelImpl
	extends BaseModelImpl<DgfUsersAddrDtls> implements DgfUsersAddrDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf users addr dtls model instance should use the <code>DgfUsersAddrDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_users_addr_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"addressId", Types.BIGINT}, {"nationalId", Types.BIGINT},
		{"classPk", Types.BIGINT}, {"className", Types.VARCHAR},
		{"addressType", Types.VARCHAR}, {"division", Types.BIGINT},
		{"district", Types.BIGINT}, {"upzilla", Types.BIGINT},
		{"unionName", Types.BIGINT}, {"village", Types.VARCHAR},
		{"ward", Types.VARCHAR}, {"zipCode", Types.VARCHAR},
		{"postOffice", Types.VARCHAR}, {"houseAddress", Types.VARCHAR},
		{"lastUpdatedDate", Types.TIMESTAMP}, {"lastUpdatedBy", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("division", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("district", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("upzilla", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("unionName", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("village", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ward", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postOffice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("houseAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastUpdatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastUpdatedBy", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_users_addr_dtls (addressId LONG not null primary key,nationalId LONG,classPk LONG,className VARCHAR(75) null,addressType VARCHAR(75) null,division LONG,district LONG,upzilla LONG,unionName LONG,village VARCHAR(75) null,ward VARCHAR(75) null,zipCode VARCHAR(75) null,postOffice VARCHAR(75) null,houseAddress VARCHAR(75) null,lastUpdatedDate DATE null,lastUpdatedBy DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_users_addr_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfUsersAddrDtls.addressId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_users_addr_dtls.addressId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DISTRICT_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DIVISION_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UNIONNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UPZILLA_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WARD_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfUsersAddrDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfUsersAddrDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfUsersAddrDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfUsersAddrDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfUsersAddrDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfUsersAddrDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfUsersAddrDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfUsersAddrDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfUsersAddrDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfUsersAddrDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfUsersAddrDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfUsersAddrDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfUsersAddrDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfUsersAddrDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfUsersAddrDtls, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<DgfUsersAddrDtls, Object>>();
		Map<String, BiConsumer<DgfUsersAddrDtls, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DgfUsersAddrDtls, ?>>();

		attributeGetterFunctions.put(
			"addressId", DgfUsersAddrDtls::getAddressId);
		attributeSetterBiConsumers.put(
			"addressId",
			(BiConsumer<DgfUsersAddrDtls, Long>)DgfUsersAddrDtls::setAddressId);
		attributeGetterFunctions.put(
			"nationalId", DgfUsersAddrDtls::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfUsersAddrDtls, Long>)
				DgfUsersAddrDtls::setNationalId);
		attributeGetterFunctions.put("classPk", DgfUsersAddrDtls::getClassPk);
		attributeSetterBiConsumers.put(
			"classPk",
			(BiConsumer<DgfUsersAddrDtls, Long>)DgfUsersAddrDtls::setClassPk);
		attributeGetterFunctions.put(
			"className", DgfUsersAddrDtls::getClassName);
		attributeSetterBiConsumers.put(
			"className",
			(BiConsumer<DgfUsersAddrDtls, String>)
				DgfUsersAddrDtls::setClassName);
		attributeGetterFunctions.put(
			"addressType", DgfUsersAddrDtls::getAddressType);
		attributeSetterBiConsumers.put(
			"addressType",
			(BiConsumer<DgfUsersAddrDtls, String>)
				DgfUsersAddrDtls::setAddressType);
		attributeGetterFunctions.put("division", DgfUsersAddrDtls::getDivision);
		attributeSetterBiConsumers.put(
			"division",
			(BiConsumer<DgfUsersAddrDtls, Long>)DgfUsersAddrDtls::setDivision);
		attributeGetterFunctions.put("district", DgfUsersAddrDtls::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<DgfUsersAddrDtls, Long>)DgfUsersAddrDtls::setDistrict);
		attributeGetterFunctions.put("upzilla", DgfUsersAddrDtls::getUpzilla);
		attributeSetterBiConsumers.put(
			"upzilla",
			(BiConsumer<DgfUsersAddrDtls, Long>)DgfUsersAddrDtls::setUpzilla);
		attributeGetterFunctions.put(
			"unionName", DgfUsersAddrDtls::getUnionName);
		attributeSetterBiConsumers.put(
			"unionName",
			(BiConsumer<DgfUsersAddrDtls, Long>)DgfUsersAddrDtls::setUnionName);
		attributeGetterFunctions.put("village", DgfUsersAddrDtls::getVillage);
		attributeSetterBiConsumers.put(
			"village",
			(BiConsumer<DgfUsersAddrDtls, String>)DgfUsersAddrDtls::setVillage);
		attributeGetterFunctions.put("ward", DgfUsersAddrDtls::getWard);
		attributeSetterBiConsumers.put(
			"ward",
			(BiConsumer<DgfUsersAddrDtls, String>)DgfUsersAddrDtls::setWard);
		attributeGetterFunctions.put("zipCode", DgfUsersAddrDtls::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode",
			(BiConsumer<DgfUsersAddrDtls, String>)DgfUsersAddrDtls::setZipCode);
		attributeGetterFunctions.put(
			"postOffice", DgfUsersAddrDtls::getPostOffice);
		attributeSetterBiConsumers.put(
			"postOffice",
			(BiConsumer<DgfUsersAddrDtls, String>)
				DgfUsersAddrDtls::setPostOffice);
		attributeGetterFunctions.put(
			"houseAddress", DgfUsersAddrDtls::getHouseAddress);
		attributeSetterBiConsumers.put(
			"houseAddress",
			(BiConsumer<DgfUsersAddrDtls, String>)
				DgfUsersAddrDtls::setHouseAddress);
		attributeGetterFunctions.put(
			"lastUpdatedDate", DgfUsersAddrDtls::getLastUpdatedDate);
		attributeSetterBiConsumers.put(
			"lastUpdatedDate",
			(BiConsumer<DgfUsersAddrDtls, Date>)
				DgfUsersAddrDtls::setLastUpdatedDate);
		attributeGetterFunctions.put(
			"lastUpdatedBy", DgfUsersAddrDtls::getLastUpdatedBy);
		attributeSetterBiConsumers.put(
			"lastUpdatedBy",
			(BiConsumer<DgfUsersAddrDtls, Date>)
				DgfUsersAddrDtls::setLastUpdatedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressId = addressId;
	}

	@JSON
	@Override
	public long getNationalId() {
		return _nationalId;
	}

	@Override
	public void setNationalId(long nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNationalId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("nationalId"));
	}

	@JSON
	@Override
	public long getClassPk() {
		return _classPk;
	}

	@Override
	public void setClassPk(long classPk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPk = classPk;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_className = className;
	}

	@JSON
	@Override
	public String getAddressType() {
		if (_addressType == null) {
			return "";
		}
		else {
			return _addressType;
		}
	}

	@Override
	public void setAddressType(String addressType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressType = addressType;
	}

	@JSON
	@Override
	public long getDivision() {
		return _division;
	}

	@Override
	public void setDivision(long division) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_division = division;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDivision() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("division"));
	}

	@JSON
	@Override
	public long getDistrict() {
		return _district;
	}

	@Override
	public void setDistrict(long district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDistrict() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("district"));
	}

	@JSON
	@Override
	public long getUpzilla() {
		return _upzilla;
	}

	@Override
	public void setUpzilla(long upzilla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_upzilla = upzilla;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUpzilla() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("upzilla"));
	}

	@JSON
	@Override
	public long getUnionName() {
		return _unionName;
	}

	@Override
	public void setUnionName(long unionName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unionName = unionName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUnionName() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("unionName"));
	}

	@JSON
	@Override
	public String getVillage() {
		if (_village == null) {
			return "";
		}
		else {
			return _village;
		}
	}

	@Override
	public void setVillage(String village) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_village = village;
	}

	@JSON
	@Override
	public String getWard() {
		if (_ward == null) {
			return "";
		}
		else {
			return _ward;
		}
	}

	@Override
	public void setWard(String ward) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ward = ward;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalWard() {
		return getColumnOriginalValue("ward");
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getPostOffice() {
		if (_postOffice == null) {
			return "";
		}
		else {
			return _postOffice;
		}
	}

	@Override
	public void setPostOffice(String postOffice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postOffice = postOffice;
	}

	@JSON
	@Override
	public String getHouseAddress() {
		if (_houseAddress == null) {
			return "";
		}
		else {
			return _houseAddress;
		}
	}

	@Override
	public void setHouseAddress(String houseAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_houseAddress = houseAddress;
	}

	@JSON
	@Override
	public Date getLastUpdatedDate() {
		return _lastUpdatedDate;
	}

	@Override
	public void setLastUpdatedDate(Date lastUpdatedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastUpdatedDate = lastUpdatedDate;
	}

	@JSON
	@Override
	public Date getLastUpdatedBy() {
		return _lastUpdatedBy;
	}

	@Override
	public void setLastUpdatedBy(Date lastUpdatedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastUpdatedBy = lastUpdatedBy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfUsersAddrDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfUsersAddrDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfUsersAddrDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfUsersAddrDtlsImpl dgfUsersAddrDtlsImpl = new DgfUsersAddrDtlsImpl();

		dgfUsersAddrDtlsImpl.setAddressId(getAddressId());
		dgfUsersAddrDtlsImpl.setNationalId(getNationalId());
		dgfUsersAddrDtlsImpl.setClassPk(getClassPk());
		dgfUsersAddrDtlsImpl.setClassName(getClassName());
		dgfUsersAddrDtlsImpl.setAddressType(getAddressType());
		dgfUsersAddrDtlsImpl.setDivision(getDivision());
		dgfUsersAddrDtlsImpl.setDistrict(getDistrict());
		dgfUsersAddrDtlsImpl.setUpzilla(getUpzilla());
		dgfUsersAddrDtlsImpl.setUnionName(getUnionName());
		dgfUsersAddrDtlsImpl.setVillage(getVillage());
		dgfUsersAddrDtlsImpl.setWard(getWard());
		dgfUsersAddrDtlsImpl.setZipCode(getZipCode());
		dgfUsersAddrDtlsImpl.setPostOffice(getPostOffice());
		dgfUsersAddrDtlsImpl.setHouseAddress(getHouseAddress());
		dgfUsersAddrDtlsImpl.setLastUpdatedDate(getLastUpdatedDate());
		dgfUsersAddrDtlsImpl.setLastUpdatedBy(getLastUpdatedBy());

		dgfUsersAddrDtlsImpl.resetOriginalValues();

		return dgfUsersAddrDtlsImpl;
	}

	@Override
	public DgfUsersAddrDtls cloneWithOriginalValues() {
		DgfUsersAddrDtlsImpl dgfUsersAddrDtlsImpl = new DgfUsersAddrDtlsImpl();

		dgfUsersAddrDtlsImpl.setAddressId(
			this.<Long>getColumnOriginalValue("addressId"));
		dgfUsersAddrDtlsImpl.setNationalId(
			this.<Long>getColumnOriginalValue("nationalId"));
		dgfUsersAddrDtlsImpl.setClassPk(
			this.<Long>getColumnOriginalValue("classPk"));
		dgfUsersAddrDtlsImpl.setClassName(
			this.<String>getColumnOriginalValue("className"));
		dgfUsersAddrDtlsImpl.setAddressType(
			this.<String>getColumnOriginalValue("addressType"));
		dgfUsersAddrDtlsImpl.setDivision(
			this.<Long>getColumnOriginalValue("division"));
		dgfUsersAddrDtlsImpl.setDistrict(
			this.<Long>getColumnOriginalValue("district"));
		dgfUsersAddrDtlsImpl.setUpzilla(
			this.<Long>getColumnOriginalValue("upzilla"));
		dgfUsersAddrDtlsImpl.setUnionName(
			this.<Long>getColumnOriginalValue("unionName"));
		dgfUsersAddrDtlsImpl.setVillage(
			this.<String>getColumnOriginalValue("village"));
		dgfUsersAddrDtlsImpl.setWard(
			this.<String>getColumnOriginalValue("ward"));
		dgfUsersAddrDtlsImpl.setZipCode(
			this.<String>getColumnOriginalValue("zipCode"));
		dgfUsersAddrDtlsImpl.setPostOffice(
			this.<String>getColumnOriginalValue("postOffice"));
		dgfUsersAddrDtlsImpl.setHouseAddress(
			this.<String>getColumnOriginalValue("houseAddress"));
		dgfUsersAddrDtlsImpl.setLastUpdatedDate(
			this.<Date>getColumnOriginalValue("lastUpdatedDate"));
		dgfUsersAddrDtlsImpl.setLastUpdatedBy(
			this.<Date>getColumnOriginalValue("lastUpdatedBy"));

		return dgfUsersAddrDtlsImpl;
	}

	@Override
	public int compareTo(DgfUsersAddrDtls dgfUsersAddrDtls) {
		long primaryKey = dgfUsersAddrDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfUsersAddrDtls)) {
			return false;
		}

		DgfUsersAddrDtls dgfUsersAddrDtls = (DgfUsersAddrDtls)object;

		long primaryKey = dgfUsersAddrDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfUsersAddrDtls> toCacheModel() {
		DgfUsersAddrDtlsCacheModel dgfUsersAddrDtlsCacheModel =
			new DgfUsersAddrDtlsCacheModel();

		dgfUsersAddrDtlsCacheModel.addressId = getAddressId();

		dgfUsersAddrDtlsCacheModel.nationalId = getNationalId();

		dgfUsersAddrDtlsCacheModel.classPk = getClassPk();

		dgfUsersAddrDtlsCacheModel.className = getClassName();

		String className = dgfUsersAddrDtlsCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			dgfUsersAddrDtlsCacheModel.className = null;
		}

		dgfUsersAddrDtlsCacheModel.addressType = getAddressType();

		String addressType = dgfUsersAddrDtlsCacheModel.addressType;

		if ((addressType != null) && (addressType.length() == 0)) {
			dgfUsersAddrDtlsCacheModel.addressType = null;
		}

		dgfUsersAddrDtlsCacheModel.division = getDivision();

		dgfUsersAddrDtlsCacheModel.district = getDistrict();

		dgfUsersAddrDtlsCacheModel.upzilla = getUpzilla();

		dgfUsersAddrDtlsCacheModel.unionName = getUnionName();

		dgfUsersAddrDtlsCacheModel.village = getVillage();

		String village = dgfUsersAddrDtlsCacheModel.village;

		if ((village != null) && (village.length() == 0)) {
			dgfUsersAddrDtlsCacheModel.village = null;
		}

		dgfUsersAddrDtlsCacheModel.ward = getWard();

		String ward = dgfUsersAddrDtlsCacheModel.ward;

		if ((ward != null) && (ward.length() == 0)) {
			dgfUsersAddrDtlsCacheModel.ward = null;
		}

		dgfUsersAddrDtlsCacheModel.zipCode = getZipCode();

		String zipCode = dgfUsersAddrDtlsCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			dgfUsersAddrDtlsCacheModel.zipCode = null;
		}

		dgfUsersAddrDtlsCacheModel.postOffice = getPostOffice();

		String postOffice = dgfUsersAddrDtlsCacheModel.postOffice;

		if ((postOffice != null) && (postOffice.length() == 0)) {
			dgfUsersAddrDtlsCacheModel.postOffice = null;
		}

		dgfUsersAddrDtlsCacheModel.houseAddress = getHouseAddress();

		String houseAddress = dgfUsersAddrDtlsCacheModel.houseAddress;

		if ((houseAddress != null) && (houseAddress.length() == 0)) {
			dgfUsersAddrDtlsCacheModel.houseAddress = null;
		}

		Date lastUpdatedDate = getLastUpdatedDate();

		if (lastUpdatedDate != null) {
			dgfUsersAddrDtlsCacheModel.lastUpdatedDate =
				lastUpdatedDate.getTime();
		}
		else {
			dgfUsersAddrDtlsCacheModel.lastUpdatedDate = Long.MIN_VALUE;
		}

		Date lastUpdatedBy = getLastUpdatedBy();

		if (lastUpdatedBy != null) {
			dgfUsersAddrDtlsCacheModel.lastUpdatedBy = lastUpdatedBy.getTime();
		}
		else {
			dgfUsersAddrDtlsCacheModel.lastUpdatedBy = Long.MIN_VALUE;
		}

		return dgfUsersAddrDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfUsersAddrDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfUsersAddrDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfUsersAddrDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfUsersAddrDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfUsersAddrDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfUsersAddrDtls.class, ModelWrapper.class);

	}

	private long _addressId;
	private long _nationalId;
	private long _classPk;
	private String _className;
	private String _addressType;
	private long _division;
	private long _district;
	private long _upzilla;
	private long _unionName;
	private String _village;
	private String _ward;
	private String _zipCode;
	private String _postOffice;
	private String _houseAddress;
	private Date _lastUpdatedDate;
	private Date _lastUpdatedBy;

	public <T> T getColumnValue(String columnName) {
		Function<DgfUsersAddrDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfUsersAddrDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("addressId", _addressId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("classPk", _classPk);
		_columnOriginalValues.put("className", _className);
		_columnOriginalValues.put("addressType", _addressType);
		_columnOriginalValues.put("division", _division);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("upzilla", _upzilla);
		_columnOriginalValues.put("unionName", _unionName);
		_columnOriginalValues.put("village", _village);
		_columnOriginalValues.put("ward", _ward);
		_columnOriginalValues.put("zipCode", _zipCode);
		_columnOriginalValues.put("postOffice", _postOffice);
		_columnOriginalValues.put("houseAddress", _houseAddress);
		_columnOriginalValues.put("lastUpdatedDate", _lastUpdatedDate);
		_columnOriginalValues.put("lastUpdatedBy", _lastUpdatedBy);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("addressId", 1L);

		columnBitmasks.put("nationalId", 2L);

		columnBitmasks.put("classPk", 4L);

		columnBitmasks.put("className", 8L);

		columnBitmasks.put("addressType", 16L);

		columnBitmasks.put("division", 32L);

		columnBitmasks.put("district", 64L);

		columnBitmasks.put("upzilla", 128L);

		columnBitmasks.put("unionName", 256L);

		columnBitmasks.put("village", 512L);

		columnBitmasks.put("ward", 1024L);

		columnBitmasks.put("zipCode", 2048L);

		columnBitmasks.put("postOffice", 4096L);

		columnBitmasks.put("houseAddress", 8192L);

		columnBitmasks.put("lastUpdatedDate", 16384L);

		columnBitmasks.put("lastUpdatedBy", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfUsersAddrDtls _escapedModel;

}