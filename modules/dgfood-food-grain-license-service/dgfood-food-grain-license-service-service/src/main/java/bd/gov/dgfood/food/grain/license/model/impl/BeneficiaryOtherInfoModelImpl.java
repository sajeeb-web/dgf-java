/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.BeneficiaryOtherInfo;
import bd.gov.dgfood.food.grain.license.model.BeneficiaryOtherInfoModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BeneficiaryOtherInfo service. Represents a row in the &quot;dgf_beneficiary_other_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BeneficiaryOtherInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BeneficiaryOtherInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BeneficiaryOtherInfoImpl
 * @generated
 */
@JSON(strict = true)
public class BeneficiaryOtherInfoModelImpl
	extends BaseModelImpl<BeneficiaryOtherInfo>
	implements BeneficiaryOtherInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a beneficiary other info model instance should use the <code>BeneficiaryOtherInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_beneficiary_other_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"verified_id", Types.BIGINT},
		{"marital_status", Types.VARCHAR}, {"spouse_name", Types.VARCHAR},
		{"spouse_nid", Types.VARCHAR}, {"spouse_second_nid", Types.VARCHAR},
		{"spouse_dob", Types.TIMESTAMP}, {"father_nid", Types.VARCHAR},
		{"mother_nid", Types.VARCHAR}, {"mobile_no", Types.VARCHAR},
		{"mobile_no_relation", Types.VARCHAR},
		{"ec_spouse_info", Types.VARCHAR}, {"occupation", Types.VARCHAR},
		{"village_name", Types.VARCHAR}, {"word_no", Types.VARCHAR},
		{"dealer_name", Types.VARCHAR}, {"dealer_mobile", Types.VARCHAR},
		{"mobile_verified_at", Types.TIMESTAMP},
		{"family_earning_member", Types.BIGINT},
		{"avg_family_income", Types.BIGINT},
		{"dependent_family_member", Types.BIGINT}, {"land_size", Types.BIGINT},
		{"land_unit", Types.VARCHAR}, {"remarks", Types.VARCHAR},
		{"user_id", Types.BIGINT}, {"created_at", Types.TIMESTAMP},
		{"updated_at", Types.TIMESTAMP}, {"dealer_slug", Types.VARCHAR},
		{"dealer_id", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("verified_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("marital_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_nid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_second_nid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouse_dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("father_nid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mother_nid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile_no_relation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ec_spouse_info", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occupation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("village_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("word_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dealer_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dealer_mobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile_verified_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("family_earning_member", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("avg_family_income", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dependent_family_member", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("land_size", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("land_unit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("created_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dealer_slug", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dealer_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_beneficiary_other_info (id LONG not null primary key,verified_id LONG,marital_status VARCHAR(1) null,spouse_name VARCHAR(500) null,spouse_nid VARCHAR(40) null,spouse_second_nid VARCHAR(40) null,spouse_dob DATE null,father_nid VARCHAR(40) null,mother_nid VARCHAR(40) null,mobile_no VARCHAR(11) null,mobile_no_relation VARCHAR(1) null,ec_spouse_info TEXT null,occupation VARCHAR(200) null,village_name VARCHAR(240) null,word_no VARCHAR(100) null,dealer_name VARCHAR(200) null,dealer_mobile VARCHAR(100) null,mobile_verified_at DATE null,family_earning_member LONG,avg_family_income LONG,dependent_family_member LONG,land_size LONG,land_unit VARCHAR(120) null,remarks VARCHAR(900) null,user_id LONG,created_at DATE null,updated_at DATE null,dealer_slug VARCHAR(200) null,dealer_id LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_beneficiary_other_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY beneficiaryOtherInfo.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_beneficiary_other_info.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MOBILENO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VERIFIEDID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BeneficiaryOtherInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BeneficiaryOtherInfo.class;
	}

	@Override
	public String getModelClassName() {
		return BeneficiaryOtherInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BeneficiaryOtherInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BeneficiaryOtherInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BeneficiaryOtherInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BeneficiaryOtherInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BeneficiaryOtherInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BeneficiaryOtherInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BeneficiaryOtherInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BeneficiaryOtherInfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BeneficiaryOtherInfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BeneficiaryOtherInfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BeneficiaryOtherInfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BeneficiaryOtherInfo, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<BeneficiaryOtherInfo, Object>>();
		Map<String, BiConsumer<BeneficiaryOtherInfo, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<BeneficiaryOtherInfo, ?>>();

		attributeGetterFunctions.put("id", BeneficiaryOtherInfo::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setId);
		attributeGetterFunctions.put(
			"verifiedId", BeneficiaryOtherInfo::getVerifiedId);
		attributeSetterBiConsumers.put(
			"verifiedId",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setVerifiedId);
		attributeGetterFunctions.put(
			"maritalStatus", BeneficiaryOtherInfo::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setMaritalStatus);
		attributeGetterFunctions.put(
			"spouseName", BeneficiaryOtherInfo::getSpouseName);
		attributeSetterBiConsumers.put(
			"spouseName",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setSpouseName);
		attributeGetterFunctions.put(
			"spouseNid", BeneficiaryOtherInfo::getSpouseNid);
		attributeSetterBiConsumers.put(
			"spouseNid",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setSpouseNid);
		attributeGetterFunctions.put(
			"spouseSecondNid", BeneficiaryOtherInfo::getSpouseSecondNid);
		attributeSetterBiConsumers.put(
			"spouseSecondNid",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setSpouseSecondNid);
		attributeGetterFunctions.put(
			"spouseDob", BeneficiaryOtherInfo::getSpouseDob);
		attributeSetterBiConsumers.put(
			"spouseDob",
			(BiConsumer<BeneficiaryOtherInfo, Date>)
				BeneficiaryOtherInfo::setSpouseDob);
		attributeGetterFunctions.put(
			"fatherNid", BeneficiaryOtherInfo::getFatherNid);
		attributeSetterBiConsumers.put(
			"fatherNid",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setFatherNid);
		attributeGetterFunctions.put(
			"motherNid", BeneficiaryOtherInfo::getMotherNid);
		attributeSetterBiConsumers.put(
			"motherNid",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setMotherNid);
		attributeGetterFunctions.put(
			"mobileNo", BeneficiaryOtherInfo::getMobileNo);
		attributeSetterBiConsumers.put(
			"mobileNo",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setMobileNo);
		attributeGetterFunctions.put(
			"mobileNoRelation", BeneficiaryOtherInfo::getMobileNoRelation);
		attributeSetterBiConsumers.put(
			"mobileNoRelation",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setMobileNoRelation);
		attributeGetterFunctions.put(
			"ecSpouseInfo", BeneficiaryOtherInfo::getEcSpouseInfo);
		attributeSetterBiConsumers.put(
			"ecSpouseInfo",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setEcSpouseInfo);
		attributeGetterFunctions.put(
			"occupation", BeneficiaryOtherInfo::getOccupation);
		attributeSetterBiConsumers.put(
			"occupation",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setOccupation);
		attributeGetterFunctions.put(
			"villageName", BeneficiaryOtherInfo::getVillageName);
		attributeSetterBiConsumers.put(
			"villageName",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setVillageName);
		attributeGetterFunctions.put("wordNo", BeneficiaryOtherInfo::getWordNo);
		attributeSetterBiConsumers.put(
			"wordNo",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setWordNo);
		attributeGetterFunctions.put(
			"dealerName", BeneficiaryOtherInfo::getDealerName);
		attributeSetterBiConsumers.put(
			"dealerName",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setDealerName);
		attributeGetterFunctions.put(
			"dealerMobile", BeneficiaryOtherInfo::getDealerMobile);
		attributeSetterBiConsumers.put(
			"dealerMobile",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setDealerMobile);
		attributeGetterFunctions.put(
			"mobileVerifiedAt", BeneficiaryOtherInfo::getMobileVerifiedAt);
		attributeSetterBiConsumers.put(
			"mobileVerifiedAt",
			(BiConsumer<BeneficiaryOtherInfo, Date>)
				BeneficiaryOtherInfo::setMobileVerifiedAt);
		attributeGetterFunctions.put(
			"familyEarningMember",
			BeneficiaryOtherInfo::getFamilyEarningMember);
		attributeSetterBiConsumers.put(
			"familyEarningMember",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setFamilyEarningMember);
		attributeGetterFunctions.put(
			"avgFamilyIncome", BeneficiaryOtherInfo::getAvgFamilyIncome);
		attributeSetterBiConsumers.put(
			"avgFamilyIncome",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setAvgFamilyIncome);
		attributeGetterFunctions.put(
			"dependentFamilyMember",
			BeneficiaryOtherInfo::getDependentFamilyMember);
		attributeSetterBiConsumers.put(
			"dependentFamilyMember",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setDependentFamilyMember);
		attributeGetterFunctions.put(
			"landSize", BeneficiaryOtherInfo::getLandSize);
		attributeSetterBiConsumers.put(
			"landSize",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setLandSize);
		attributeGetterFunctions.put(
			"landUnit", BeneficiaryOtherInfo::getLandUnit);
		attributeSetterBiConsumers.put(
			"landUnit",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setLandUnit);
		attributeGetterFunctions.put(
			"remarks", BeneficiaryOtherInfo::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setRemarks);
		attributeGetterFunctions.put("userId", BeneficiaryOtherInfo::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setUserId);
		attributeGetterFunctions.put(
			"createdAt", BeneficiaryOtherInfo::getCreatedAt);
		attributeSetterBiConsumers.put(
			"createdAt",
			(BiConsumer<BeneficiaryOtherInfo, Date>)
				BeneficiaryOtherInfo::setCreatedAt);
		attributeGetterFunctions.put(
			"updatedAt", BeneficiaryOtherInfo::getUpdatedAt);
		attributeSetterBiConsumers.put(
			"updatedAt",
			(BiConsumer<BeneficiaryOtherInfo, Date>)
				BeneficiaryOtherInfo::setUpdatedAt);
		attributeGetterFunctions.put(
			"dealerSlug", BeneficiaryOtherInfo::getDealerSlug);
		attributeSetterBiConsumers.put(
			"dealerSlug",
			(BiConsumer<BeneficiaryOtherInfo, String>)
				BeneficiaryOtherInfo::setDealerSlug);
		attributeGetterFunctions.put(
			"dealerId", BeneficiaryOtherInfo::getDealerId);
		attributeSetterBiConsumers.put(
			"dealerId",
			(BiConsumer<BeneficiaryOtherInfo, Long>)
				BeneficiaryOtherInfo::setDealerId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("id"));
	}

	@JSON
	@Override
	public long getVerifiedId() {
		return _verifiedId;
	}

	@Override
	public void setVerifiedId(long verifiedId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_verifiedId = verifiedId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalVerifiedId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("verified_id"));
	}

	@JSON
	@Override
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return "";
		}
		else {
			return _maritalStatus;
		}
	}

	@Override
	public void setMaritalStatus(String maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getSpouseName() {
		if (_spouseName == null) {
			return "";
		}
		else {
			return _spouseName;
		}
	}

	@Override
	public void setSpouseName(String spouseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseName = spouseName;
	}

	@JSON
	@Override
	public String getSpouseNid() {
		if (_spouseNid == null) {
			return "";
		}
		else {
			return _spouseNid;
		}
	}

	@Override
	public void setSpouseNid(String spouseNid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseNid = spouseNid;
	}

	@JSON
	@Override
	public String getSpouseSecondNid() {
		if (_spouseSecondNid == null) {
			return "";
		}
		else {
			return _spouseSecondNid;
		}
	}

	@Override
	public void setSpouseSecondNid(String spouseSecondNid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseSecondNid = spouseSecondNid;
	}

	@JSON
	@Override
	public Date getSpouseDob() {
		return _spouseDob;
	}

	@Override
	public void setSpouseDob(Date spouseDob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseDob = spouseDob;
	}

	@JSON
	@Override
	public String getFatherNid() {
		if (_fatherNid == null) {
			return "";
		}
		else {
			return _fatherNid;
		}
	}

	@Override
	public void setFatherNid(String fatherNid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fatherNid = fatherNid;
	}

	@JSON
	@Override
	public String getMotherNid() {
		if (_motherNid == null) {
			return "";
		}
		else {
			return _motherNid;
		}
	}

	@Override
	public void setMotherNid(String motherNid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_motherNid = motherNid;
	}

	@JSON
	@Override
	public String getMobileNo() {
		if (_mobileNo == null) {
			return "";
		}
		else {
			return _mobileNo;
		}
	}

	@Override
	public void setMobileNo(String mobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNo = mobileNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalMobileNo() {
		return getColumnOriginalValue("mobile_no");
	}

	@JSON
	@Override
	public String getMobileNoRelation() {
		if (_mobileNoRelation == null) {
			return "";
		}
		else {
			return _mobileNoRelation;
		}
	}

	@Override
	public void setMobileNoRelation(String mobileNoRelation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNoRelation = mobileNoRelation;
	}

	@JSON
	@Override
	public String getEcSpouseInfo() {
		if (_ecSpouseInfo == null) {
			return "";
		}
		else {
			return _ecSpouseInfo;
		}
	}

	@Override
	public void setEcSpouseInfo(String ecSpouseInfo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ecSpouseInfo = ecSpouseInfo;
	}

	@JSON
	@Override
	public String getOccupation() {
		if (_occupation == null) {
			return "";
		}
		else {
			return _occupation;
		}
	}

	@Override
	public void setOccupation(String occupation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occupation = occupation;
	}

	@JSON
	@Override
	public String getVillageName() {
		if (_villageName == null) {
			return "";
		}
		else {
			return _villageName;
		}
	}

	@Override
	public void setVillageName(String villageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_villageName = villageName;
	}

	@JSON
	@Override
	public String getWordNo() {
		if (_wordNo == null) {
			return "";
		}
		else {
			return _wordNo;
		}
	}

	@Override
	public void setWordNo(String wordNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wordNo = wordNo;
	}

	@JSON
	@Override
	public String getDealerName() {
		if (_dealerName == null) {
			return "";
		}
		else {
			return _dealerName;
		}
	}

	@Override
	public void setDealerName(String dealerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealerName = dealerName;
	}

	@JSON
	@Override
	public String getDealerMobile() {
		if (_dealerMobile == null) {
			return "";
		}
		else {
			return _dealerMobile;
		}
	}

	@Override
	public void setDealerMobile(String dealerMobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealerMobile = dealerMobile;
	}

	@JSON
	@Override
	public Date getMobileVerifiedAt() {
		return _mobileVerifiedAt;
	}

	@Override
	public void setMobileVerifiedAt(Date mobileVerifiedAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileVerifiedAt = mobileVerifiedAt;
	}

	@JSON
	@Override
	public long getFamilyEarningMember() {
		return _familyEarningMember;
	}

	@Override
	public void setFamilyEarningMember(long familyEarningMember) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyEarningMember = familyEarningMember;
	}

	@JSON
	@Override
	public long getAvgFamilyIncome() {
		return _avgFamilyIncome;
	}

	@Override
	public void setAvgFamilyIncome(long avgFamilyIncome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_avgFamilyIncome = avgFamilyIncome;
	}

	@JSON
	@Override
	public long getDependentFamilyMember() {
		return _dependentFamilyMember;
	}

	@Override
	public void setDependentFamilyMember(long dependentFamilyMember) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dependentFamilyMember = dependentFamilyMember;
	}

	@JSON
	@Override
	public long getLandSize() {
		return _landSize;
	}

	@Override
	public void setLandSize(long landSize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landSize = landSize;
	}

	@JSON
	@Override
	public String getLandUnit() {
		if (_landUnit == null) {
			return "";
		}
		else {
			return _landUnit;
		}
	}

	@Override
	public void setLandUnit(String landUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_landUnit = landUnit;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedAt() {
		return _createdAt;
	}

	@Override
	public void setCreatedAt(Date createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@JSON
	@Override
	public Date getUpdatedAt() {
		return _updatedAt;
	}

	@Override
	public void setUpdatedAt(Date updatedAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedAt = updatedAt;
	}

	@JSON
	@Override
	public String getDealerSlug() {
		if (_dealerSlug == null) {
			return "";
		}
		else {
			return _dealerSlug;
		}
	}

	@Override
	public void setDealerSlug(String dealerSlug) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealerSlug = dealerSlug;
	}

	@JSON
	@Override
	public long getDealerId() {
		return _dealerId;
	}

	@Override
	public void setDealerId(long dealerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealerId = dealerId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, BeneficiaryOtherInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BeneficiaryOtherInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BeneficiaryOtherInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BeneficiaryOtherInfoImpl beneficiaryOtherInfoImpl =
			new BeneficiaryOtherInfoImpl();

		beneficiaryOtherInfoImpl.setId(getId());
		beneficiaryOtherInfoImpl.setVerifiedId(getVerifiedId());
		beneficiaryOtherInfoImpl.setMaritalStatus(getMaritalStatus());
		beneficiaryOtherInfoImpl.setSpouseName(getSpouseName());
		beneficiaryOtherInfoImpl.setSpouseNid(getSpouseNid());
		beneficiaryOtherInfoImpl.setSpouseSecondNid(getSpouseSecondNid());
		beneficiaryOtherInfoImpl.setSpouseDob(getSpouseDob());
		beneficiaryOtherInfoImpl.setFatherNid(getFatherNid());
		beneficiaryOtherInfoImpl.setMotherNid(getMotherNid());
		beneficiaryOtherInfoImpl.setMobileNo(getMobileNo());
		beneficiaryOtherInfoImpl.setMobileNoRelation(getMobileNoRelation());
		beneficiaryOtherInfoImpl.setEcSpouseInfo(getEcSpouseInfo());
		beneficiaryOtherInfoImpl.setOccupation(getOccupation());
		beneficiaryOtherInfoImpl.setVillageName(getVillageName());
		beneficiaryOtherInfoImpl.setWordNo(getWordNo());
		beneficiaryOtherInfoImpl.setDealerName(getDealerName());
		beneficiaryOtherInfoImpl.setDealerMobile(getDealerMobile());
		beneficiaryOtherInfoImpl.setMobileVerifiedAt(getMobileVerifiedAt());
		beneficiaryOtherInfoImpl.setFamilyEarningMember(
			getFamilyEarningMember());
		beneficiaryOtherInfoImpl.setAvgFamilyIncome(getAvgFamilyIncome());
		beneficiaryOtherInfoImpl.setDependentFamilyMember(
			getDependentFamilyMember());
		beneficiaryOtherInfoImpl.setLandSize(getLandSize());
		beneficiaryOtherInfoImpl.setLandUnit(getLandUnit());
		beneficiaryOtherInfoImpl.setRemarks(getRemarks());
		beneficiaryOtherInfoImpl.setUserId(getUserId());
		beneficiaryOtherInfoImpl.setCreatedAt(getCreatedAt());
		beneficiaryOtherInfoImpl.setUpdatedAt(getUpdatedAt());
		beneficiaryOtherInfoImpl.setDealerSlug(getDealerSlug());
		beneficiaryOtherInfoImpl.setDealerId(getDealerId());

		beneficiaryOtherInfoImpl.resetOriginalValues();

		return beneficiaryOtherInfoImpl;
	}

	@Override
	public BeneficiaryOtherInfo cloneWithOriginalValues() {
		BeneficiaryOtherInfoImpl beneficiaryOtherInfoImpl =
			new BeneficiaryOtherInfoImpl();

		beneficiaryOtherInfoImpl.setId(this.<Long>getColumnOriginalValue("id"));
		beneficiaryOtherInfoImpl.setVerifiedId(
			this.<Long>getColumnOriginalValue("verified_id"));
		beneficiaryOtherInfoImpl.setMaritalStatus(
			this.<String>getColumnOriginalValue("marital_status"));
		beneficiaryOtherInfoImpl.setSpouseName(
			this.<String>getColumnOriginalValue("spouse_name"));
		beneficiaryOtherInfoImpl.setSpouseNid(
			this.<String>getColumnOriginalValue("spouse_nid"));
		beneficiaryOtherInfoImpl.setSpouseSecondNid(
			this.<String>getColumnOriginalValue("spouse_second_nid"));
		beneficiaryOtherInfoImpl.setSpouseDob(
			this.<Date>getColumnOriginalValue("spouse_dob"));
		beneficiaryOtherInfoImpl.setFatherNid(
			this.<String>getColumnOriginalValue("father_nid"));
		beneficiaryOtherInfoImpl.setMotherNid(
			this.<String>getColumnOriginalValue("mother_nid"));
		beneficiaryOtherInfoImpl.setMobileNo(
			this.<String>getColumnOriginalValue("mobile_no"));
		beneficiaryOtherInfoImpl.setMobileNoRelation(
			this.<String>getColumnOriginalValue("mobile_no_relation"));
		beneficiaryOtherInfoImpl.setEcSpouseInfo(
			this.<String>getColumnOriginalValue("ec_spouse_info"));
		beneficiaryOtherInfoImpl.setOccupation(
			this.<String>getColumnOriginalValue("occupation"));
		beneficiaryOtherInfoImpl.setVillageName(
			this.<String>getColumnOriginalValue("village_name"));
		beneficiaryOtherInfoImpl.setWordNo(
			this.<String>getColumnOriginalValue("word_no"));
		beneficiaryOtherInfoImpl.setDealerName(
			this.<String>getColumnOriginalValue("dealer_name"));
		beneficiaryOtherInfoImpl.setDealerMobile(
			this.<String>getColumnOriginalValue("dealer_mobile"));
		beneficiaryOtherInfoImpl.setMobileVerifiedAt(
			this.<Date>getColumnOriginalValue("mobile_verified_at"));
		beneficiaryOtherInfoImpl.setFamilyEarningMember(
			this.<Long>getColumnOriginalValue("family_earning_member"));
		beneficiaryOtherInfoImpl.setAvgFamilyIncome(
			this.<Long>getColumnOriginalValue("avg_family_income"));
		beneficiaryOtherInfoImpl.setDependentFamilyMember(
			this.<Long>getColumnOriginalValue("dependent_family_member"));
		beneficiaryOtherInfoImpl.setLandSize(
			this.<Long>getColumnOriginalValue("land_size"));
		beneficiaryOtherInfoImpl.setLandUnit(
			this.<String>getColumnOriginalValue("land_unit"));
		beneficiaryOtherInfoImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		beneficiaryOtherInfoImpl.setUserId(
			this.<Long>getColumnOriginalValue("user_id"));
		beneficiaryOtherInfoImpl.setCreatedAt(
			this.<Date>getColumnOriginalValue("created_at"));
		beneficiaryOtherInfoImpl.setUpdatedAt(
			this.<Date>getColumnOriginalValue("updated_at"));
		beneficiaryOtherInfoImpl.setDealerSlug(
			this.<String>getColumnOriginalValue("dealer_slug"));
		beneficiaryOtherInfoImpl.setDealerId(
			this.<Long>getColumnOriginalValue("dealer_id"));

		return beneficiaryOtherInfoImpl;
	}

	@Override
	public int compareTo(BeneficiaryOtherInfo beneficiaryOtherInfo) {
		long primaryKey = beneficiaryOtherInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BeneficiaryOtherInfo)) {
			return false;
		}

		BeneficiaryOtherInfo beneficiaryOtherInfo =
			(BeneficiaryOtherInfo)object;

		long primaryKey = beneficiaryOtherInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BeneficiaryOtherInfo> toCacheModel() {
		BeneficiaryOtherInfoCacheModel beneficiaryOtherInfoCacheModel =
			new BeneficiaryOtherInfoCacheModel();

		beneficiaryOtherInfoCacheModel.id = getId();

		beneficiaryOtherInfoCacheModel.verifiedId = getVerifiedId();

		beneficiaryOtherInfoCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = beneficiaryOtherInfoCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			beneficiaryOtherInfoCacheModel.maritalStatus = null;
		}

		beneficiaryOtherInfoCacheModel.spouseName = getSpouseName();

		String spouseName = beneficiaryOtherInfoCacheModel.spouseName;

		if ((spouseName != null) && (spouseName.length() == 0)) {
			beneficiaryOtherInfoCacheModel.spouseName = null;
		}

		beneficiaryOtherInfoCacheModel.spouseNid = getSpouseNid();

		String spouseNid = beneficiaryOtherInfoCacheModel.spouseNid;

		if ((spouseNid != null) && (spouseNid.length() == 0)) {
			beneficiaryOtherInfoCacheModel.spouseNid = null;
		}

		beneficiaryOtherInfoCacheModel.spouseSecondNid = getSpouseSecondNid();

		String spouseSecondNid = beneficiaryOtherInfoCacheModel.spouseSecondNid;

		if ((spouseSecondNid != null) && (spouseSecondNid.length() == 0)) {
			beneficiaryOtherInfoCacheModel.spouseSecondNid = null;
		}

		Date spouseDob = getSpouseDob();

		if (spouseDob != null) {
			beneficiaryOtherInfoCacheModel.spouseDob = spouseDob.getTime();
		}
		else {
			beneficiaryOtherInfoCacheModel.spouseDob = Long.MIN_VALUE;
		}

		beneficiaryOtherInfoCacheModel.fatherNid = getFatherNid();

		String fatherNid = beneficiaryOtherInfoCacheModel.fatherNid;

		if ((fatherNid != null) && (fatherNid.length() == 0)) {
			beneficiaryOtherInfoCacheModel.fatherNid = null;
		}

		beneficiaryOtherInfoCacheModel.motherNid = getMotherNid();

		String motherNid = beneficiaryOtherInfoCacheModel.motherNid;

		if ((motherNid != null) && (motherNid.length() == 0)) {
			beneficiaryOtherInfoCacheModel.motherNid = null;
		}

		beneficiaryOtherInfoCacheModel.mobileNo = getMobileNo();

		String mobileNo = beneficiaryOtherInfoCacheModel.mobileNo;

		if ((mobileNo != null) && (mobileNo.length() == 0)) {
			beneficiaryOtherInfoCacheModel.mobileNo = null;
		}

		beneficiaryOtherInfoCacheModel.mobileNoRelation = getMobileNoRelation();

		String mobileNoRelation =
			beneficiaryOtherInfoCacheModel.mobileNoRelation;

		if ((mobileNoRelation != null) && (mobileNoRelation.length() == 0)) {
			beneficiaryOtherInfoCacheModel.mobileNoRelation = null;
		}

		beneficiaryOtherInfoCacheModel.ecSpouseInfo = getEcSpouseInfo();

		String ecSpouseInfo = beneficiaryOtherInfoCacheModel.ecSpouseInfo;

		if ((ecSpouseInfo != null) && (ecSpouseInfo.length() == 0)) {
			beneficiaryOtherInfoCacheModel.ecSpouseInfo = null;
		}

		beneficiaryOtherInfoCacheModel.occupation = getOccupation();

		String occupation = beneficiaryOtherInfoCacheModel.occupation;

		if ((occupation != null) && (occupation.length() == 0)) {
			beneficiaryOtherInfoCacheModel.occupation = null;
		}

		beneficiaryOtherInfoCacheModel.villageName = getVillageName();

		String villageName = beneficiaryOtherInfoCacheModel.villageName;

		if ((villageName != null) && (villageName.length() == 0)) {
			beneficiaryOtherInfoCacheModel.villageName = null;
		}

		beneficiaryOtherInfoCacheModel.wordNo = getWordNo();

		String wordNo = beneficiaryOtherInfoCacheModel.wordNo;

		if ((wordNo != null) && (wordNo.length() == 0)) {
			beneficiaryOtherInfoCacheModel.wordNo = null;
		}

		beneficiaryOtherInfoCacheModel.dealerName = getDealerName();

		String dealerName = beneficiaryOtherInfoCacheModel.dealerName;

		if ((dealerName != null) && (dealerName.length() == 0)) {
			beneficiaryOtherInfoCacheModel.dealerName = null;
		}

		beneficiaryOtherInfoCacheModel.dealerMobile = getDealerMobile();

		String dealerMobile = beneficiaryOtherInfoCacheModel.dealerMobile;

		if ((dealerMobile != null) && (dealerMobile.length() == 0)) {
			beneficiaryOtherInfoCacheModel.dealerMobile = null;
		}

		Date mobileVerifiedAt = getMobileVerifiedAt();

		if (mobileVerifiedAt != null) {
			beneficiaryOtherInfoCacheModel.mobileVerifiedAt =
				mobileVerifiedAt.getTime();
		}
		else {
			beneficiaryOtherInfoCacheModel.mobileVerifiedAt = Long.MIN_VALUE;
		}

		beneficiaryOtherInfoCacheModel.familyEarningMember =
			getFamilyEarningMember();

		beneficiaryOtherInfoCacheModel.avgFamilyIncome = getAvgFamilyIncome();

		beneficiaryOtherInfoCacheModel.dependentFamilyMember =
			getDependentFamilyMember();

		beneficiaryOtherInfoCacheModel.landSize = getLandSize();

		beneficiaryOtherInfoCacheModel.landUnit = getLandUnit();

		String landUnit = beneficiaryOtherInfoCacheModel.landUnit;

		if ((landUnit != null) && (landUnit.length() == 0)) {
			beneficiaryOtherInfoCacheModel.landUnit = null;
		}

		beneficiaryOtherInfoCacheModel.remarks = getRemarks();

		String remarks = beneficiaryOtherInfoCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			beneficiaryOtherInfoCacheModel.remarks = null;
		}

		beneficiaryOtherInfoCacheModel.userId = getUserId();

		Date createdAt = getCreatedAt();

		if (createdAt != null) {
			beneficiaryOtherInfoCacheModel.createdAt = createdAt.getTime();
		}
		else {
			beneficiaryOtherInfoCacheModel.createdAt = Long.MIN_VALUE;
		}

		Date updatedAt = getUpdatedAt();

		if (updatedAt != null) {
			beneficiaryOtherInfoCacheModel.updatedAt = updatedAt.getTime();
		}
		else {
			beneficiaryOtherInfoCacheModel.updatedAt = Long.MIN_VALUE;
		}

		beneficiaryOtherInfoCacheModel.dealerSlug = getDealerSlug();

		String dealerSlug = beneficiaryOtherInfoCacheModel.dealerSlug;

		if ((dealerSlug != null) && (dealerSlug.length() == 0)) {
			beneficiaryOtherInfoCacheModel.dealerSlug = null;
		}

		beneficiaryOtherInfoCacheModel.dealerId = getDealerId();

		return beneficiaryOtherInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BeneficiaryOtherInfo, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BeneficiaryOtherInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BeneficiaryOtherInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(BeneficiaryOtherInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BeneficiaryOtherInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BeneficiaryOtherInfo.class, ModelWrapper.class);

	}

	private long _id;
	private long _verifiedId;
	private String _maritalStatus;
	private String _spouseName;
	private String _spouseNid;
	private String _spouseSecondNid;
	private Date _spouseDob;
	private String _fatherNid;
	private String _motherNid;
	private String _mobileNo;
	private String _mobileNoRelation;
	private String _ecSpouseInfo;
	private String _occupation;
	private String _villageName;
	private String _wordNo;
	private String _dealerName;
	private String _dealerMobile;
	private Date _mobileVerifiedAt;
	private long _familyEarningMember;
	private long _avgFamilyIncome;
	private long _dependentFamilyMember;
	private long _landSize;
	private String _landUnit;
	private String _remarks;
	private long _userId;
	private Date _createdAt;
	private Date _updatedAt;
	private String _dealerSlug;
	private long _dealerId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<BeneficiaryOtherInfo, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BeneficiaryOtherInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("verified_id", _verifiedId);
		_columnOriginalValues.put("marital_status", _maritalStatus);
		_columnOriginalValues.put("spouse_name", _spouseName);
		_columnOriginalValues.put("spouse_nid", _spouseNid);
		_columnOriginalValues.put("spouse_second_nid", _spouseSecondNid);
		_columnOriginalValues.put("spouse_dob", _spouseDob);
		_columnOriginalValues.put("father_nid", _fatherNid);
		_columnOriginalValues.put("mother_nid", _motherNid);
		_columnOriginalValues.put("mobile_no", _mobileNo);
		_columnOriginalValues.put("mobile_no_relation", _mobileNoRelation);
		_columnOriginalValues.put("ec_spouse_info", _ecSpouseInfo);
		_columnOriginalValues.put("occupation", _occupation);
		_columnOriginalValues.put("village_name", _villageName);
		_columnOriginalValues.put("word_no", _wordNo);
		_columnOriginalValues.put("dealer_name", _dealerName);
		_columnOriginalValues.put("dealer_mobile", _dealerMobile);
		_columnOriginalValues.put("mobile_verified_at", _mobileVerifiedAt);
		_columnOriginalValues.put(
			"family_earning_member", _familyEarningMember);
		_columnOriginalValues.put("avg_family_income", _avgFamilyIncome);
		_columnOriginalValues.put(
			"dependent_family_member", _dependentFamilyMember);
		_columnOriginalValues.put("land_size", _landSize);
		_columnOriginalValues.put("land_unit", _landUnit);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("user_id", _userId);
		_columnOriginalValues.put("created_at", _createdAt);
		_columnOriginalValues.put("updated_at", _updatedAt);
		_columnOriginalValues.put("dealer_slug", _dealerSlug);
		_columnOriginalValues.put("dealer_id", _dealerId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("verified_id", "verifiedId");
		attributeNames.put("marital_status", "maritalStatus");
		attributeNames.put("spouse_name", "spouseName");
		attributeNames.put("spouse_nid", "spouseNid");
		attributeNames.put("spouse_second_nid", "spouseSecondNid");
		attributeNames.put("spouse_dob", "spouseDob");
		attributeNames.put("father_nid", "fatherNid");
		attributeNames.put("mother_nid", "motherNid");
		attributeNames.put("mobile_no", "mobileNo");
		attributeNames.put("mobile_no_relation", "mobileNoRelation");
		attributeNames.put("ec_spouse_info", "ecSpouseInfo");
		attributeNames.put("village_name", "villageName");
		attributeNames.put("word_no", "wordNo");
		attributeNames.put("dealer_name", "dealerName");
		attributeNames.put("dealer_mobile", "dealerMobile");
		attributeNames.put("mobile_verified_at", "mobileVerifiedAt");
		attributeNames.put("family_earning_member", "familyEarningMember");
		attributeNames.put("avg_family_income", "avgFamilyIncome");
		attributeNames.put("dependent_family_member", "dependentFamilyMember");
		attributeNames.put("land_size", "landSize");
		attributeNames.put("land_unit", "landUnit");
		attributeNames.put("user_id", "userId");
		attributeNames.put("created_at", "createdAt");
		attributeNames.put("updated_at", "updatedAt");
		attributeNames.put("dealer_slug", "dealerSlug");
		attributeNames.put("dealer_id", "dealerId");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("verified_id", 2L);

		columnBitmasks.put("marital_status", 4L);

		columnBitmasks.put("spouse_name", 8L);

		columnBitmasks.put("spouse_nid", 16L);

		columnBitmasks.put("spouse_second_nid", 32L);

		columnBitmasks.put("spouse_dob", 64L);

		columnBitmasks.put("father_nid", 128L);

		columnBitmasks.put("mother_nid", 256L);

		columnBitmasks.put("mobile_no", 512L);

		columnBitmasks.put("mobile_no_relation", 1024L);

		columnBitmasks.put("ec_spouse_info", 2048L);

		columnBitmasks.put("occupation", 4096L);

		columnBitmasks.put("village_name", 8192L);

		columnBitmasks.put("word_no", 16384L);

		columnBitmasks.put("dealer_name", 32768L);

		columnBitmasks.put("dealer_mobile", 65536L);

		columnBitmasks.put("mobile_verified_at", 131072L);

		columnBitmasks.put("family_earning_member", 262144L);

		columnBitmasks.put("avg_family_income", 524288L);

		columnBitmasks.put("dependent_family_member", 1048576L);

		columnBitmasks.put("land_size", 2097152L);

		columnBitmasks.put("land_unit", 4194304L);

		columnBitmasks.put("remarks", 8388608L);

		columnBitmasks.put("user_id", 16777216L);

		columnBitmasks.put("created_at", 33554432L);

		columnBitmasks.put("updated_at", 67108864L);

		columnBitmasks.put("dealer_slug", 134217728L);

		columnBitmasks.put("dealer_id", 268435456L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BeneficiaryOtherInfo _escapedModel;

}