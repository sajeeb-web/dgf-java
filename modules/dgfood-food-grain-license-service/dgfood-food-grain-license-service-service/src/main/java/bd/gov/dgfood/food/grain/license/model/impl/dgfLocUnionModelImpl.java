/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.dgfLocUnion;
import bd.gov.dgfood.food.grain.license.model.dgfLocUnionModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the dgfLocUnion service. Represents a row in the &quot;dgf_loc_union&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>dgfLocUnionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link dgfLocUnionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see dgfLocUnionImpl
 * @generated
 */
@JSON(strict = true)
public class dgfLocUnionModelImpl
	extends BaseModelImpl<dgfLocUnion> implements dgfLocUnionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf loc union model instance should use the <code>dgfLocUnion</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_loc_union";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"subdistrictId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"bnName", Types.VARCHAR},
		{"url", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"createdAt", Types.TIMESTAMP}, {"updatedAt", Types.TIMESTAMP},
		{"geoCode", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subdistrictId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bnName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdAt", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updatedAt", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("geoCode", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_loc_union (id_ LONG not null primary key,subdistrictId LONG,name VARCHAR(75) null,bnName VARCHAR(75) null,url VARCHAR(75) null,status VARCHAR(75) null,createdAt DATE null,updatedAt DATE null,geoCode LONG)";

	public static final String TABLE_SQL_DROP = "drop table dgf_loc_union";

	public static final String ORDER_BY_JPQL = " ORDER BY dgfLocUnion.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY dgf_loc_union.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SUBDISTRICTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public dgfLocUnionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return dgfLocUnion.class;
	}

	@Override
	public String getModelClassName() {
		return dgfLocUnion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<dgfLocUnion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<dgfLocUnion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<dgfLocUnion, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((dgfLocUnion)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<dgfLocUnion, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<dgfLocUnion, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(dgfLocUnion)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<dgfLocUnion, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<dgfLocUnion, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<dgfLocUnion, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<dgfLocUnion, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<dgfLocUnion, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<dgfLocUnion, Object>>();
		Map<String, BiConsumer<dgfLocUnion, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<dgfLocUnion, ?>>();

		attributeGetterFunctions.put("id", dgfLocUnion::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<dgfLocUnion, Long>)dgfLocUnion::setId);
		attributeGetterFunctions.put(
			"subdistrictId", dgfLocUnion::getSubdistrictId);
		attributeSetterBiConsumers.put(
			"subdistrictId",
			(BiConsumer<dgfLocUnion, Long>)dgfLocUnion::setSubdistrictId);
		attributeGetterFunctions.put("name", dgfLocUnion::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<dgfLocUnion, String>)dgfLocUnion::setName);
		attributeGetterFunctions.put("bnName", dgfLocUnion::getBnName);
		attributeSetterBiConsumers.put(
			"bnName", (BiConsumer<dgfLocUnion, String>)dgfLocUnion::setBnName);
		attributeGetterFunctions.put("url", dgfLocUnion::getUrl);
		attributeSetterBiConsumers.put(
			"url", (BiConsumer<dgfLocUnion, String>)dgfLocUnion::setUrl);
		attributeGetterFunctions.put("status", dgfLocUnion::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<dgfLocUnion, String>)dgfLocUnion::setStatus);
		attributeGetterFunctions.put("createdAt", dgfLocUnion::getCreatedAt);
		attributeSetterBiConsumers.put(
			"createdAt",
			(BiConsumer<dgfLocUnion, Date>)dgfLocUnion::setCreatedAt);
		attributeGetterFunctions.put("updatedAt", dgfLocUnion::getUpdatedAt);
		attributeSetterBiConsumers.put(
			"updatedAt",
			(BiConsumer<dgfLocUnion, Date>)dgfLocUnion::setUpdatedAt);
		attributeGetterFunctions.put("geoCode", dgfLocUnion::getGeoCode);
		attributeSetterBiConsumers.put(
			"geoCode", (BiConsumer<dgfLocUnion, Long>)dgfLocUnion::setGeoCode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getSubdistrictId() {
		return _subdistrictId;
	}

	@Override
	public void setSubdistrictId(long subdistrictId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subdistrictId = subdistrictId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSubdistrictId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("subdistrictId"));
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getBnName() {
		if (_bnName == null) {
			return "";
		}
		else {
			return _bnName;
		}
	}

	@Override
	public void setBnName(String bnName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bnName = bnName;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_url = url;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public Date getCreatedAt() {
		return _createdAt;
	}

	@Override
	public void setCreatedAt(Date createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@JSON
	@Override
	public Date getUpdatedAt() {
		return _updatedAt;
	}

	@Override
	public void setUpdatedAt(Date updatedAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedAt = updatedAt;
	}

	@JSON
	@Override
	public long getGeoCode() {
		return _geoCode;
	}

	@Override
	public void setGeoCode(long geoCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_geoCode = geoCode;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, dgfLocUnion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public dgfLocUnion toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, dgfLocUnion>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		dgfLocUnionImpl dgfLocUnionImpl = new dgfLocUnionImpl();

		dgfLocUnionImpl.setId(getId());
		dgfLocUnionImpl.setSubdistrictId(getSubdistrictId());
		dgfLocUnionImpl.setName(getName());
		dgfLocUnionImpl.setBnName(getBnName());
		dgfLocUnionImpl.setUrl(getUrl());
		dgfLocUnionImpl.setStatus(getStatus());
		dgfLocUnionImpl.setCreatedAt(getCreatedAt());
		dgfLocUnionImpl.setUpdatedAt(getUpdatedAt());
		dgfLocUnionImpl.setGeoCode(getGeoCode());

		dgfLocUnionImpl.resetOriginalValues();

		return dgfLocUnionImpl;
	}

	@Override
	public dgfLocUnion cloneWithOriginalValues() {
		dgfLocUnionImpl dgfLocUnionImpl = new dgfLocUnionImpl();

		dgfLocUnionImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		dgfLocUnionImpl.setSubdistrictId(
			this.<Long>getColumnOriginalValue("subdistrictId"));
		dgfLocUnionImpl.setName(this.<String>getColumnOriginalValue("name"));
		dgfLocUnionImpl.setBnName(
			this.<String>getColumnOriginalValue("bnName"));
		dgfLocUnionImpl.setUrl(this.<String>getColumnOriginalValue("url"));
		dgfLocUnionImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		dgfLocUnionImpl.setCreatedAt(
			this.<Date>getColumnOriginalValue("createdAt"));
		dgfLocUnionImpl.setUpdatedAt(
			this.<Date>getColumnOriginalValue("updatedAt"));
		dgfLocUnionImpl.setGeoCode(
			this.<Long>getColumnOriginalValue("geoCode"));

		return dgfLocUnionImpl;
	}

	@Override
	public int compareTo(dgfLocUnion dgfLocUnion) {
		long primaryKey = dgfLocUnion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof dgfLocUnion)) {
			return false;
		}

		dgfLocUnion dgfLocUnion = (dgfLocUnion)object;

		long primaryKey = dgfLocUnion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<dgfLocUnion> toCacheModel() {
		dgfLocUnionCacheModel dgfLocUnionCacheModel =
			new dgfLocUnionCacheModel();

		dgfLocUnionCacheModel.id = getId();

		dgfLocUnionCacheModel.subdistrictId = getSubdistrictId();

		dgfLocUnionCacheModel.name = getName();

		String name = dgfLocUnionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dgfLocUnionCacheModel.name = null;
		}

		dgfLocUnionCacheModel.bnName = getBnName();

		String bnName = dgfLocUnionCacheModel.bnName;

		if ((bnName != null) && (bnName.length() == 0)) {
			dgfLocUnionCacheModel.bnName = null;
		}

		dgfLocUnionCacheModel.url = getUrl();

		String url = dgfLocUnionCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			dgfLocUnionCacheModel.url = null;
		}

		dgfLocUnionCacheModel.status = getStatus();

		String status = dgfLocUnionCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			dgfLocUnionCacheModel.status = null;
		}

		Date createdAt = getCreatedAt();

		if (createdAt != null) {
			dgfLocUnionCacheModel.createdAt = createdAt.getTime();
		}
		else {
			dgfLocUnionCacheModel.createdAt = Long.MIN_VALUE;
		}

		Date updatedAt = getUpdatedAt();

		if (updatedAt != null) {
			dgfLocUnionCacheModel.updatedAt = updatedAt.getTime();
		}
		else {
			dgfLocUnionCacheModel.updatedAt = Long.MIN_VALUE;
		}

		dgfLocUnionCacheModel.geoCode = getGeoCode();

		return dgfLocUnionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<dgfLocUnion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<dgfLocUnion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<dgfLocUnion, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((dgfLocUnion)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, dgfLocUnion>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					dgfLocUnion.class, ModelWrapper.class);

	}

	private long _id;
	private long _subdistrictId;
	private String _name;
	private String _bnName;
	private String _url;
	private String _status;
	private Date _createdAt;
	private Date _updatedAt;
	private long _geoCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<dgfLocUnion, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((dgfLocUnion)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("subdistrictId", _subdistrictId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("bnName", _bnName);
		_columnOriginalValues.put("url", _url);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("createdAt", _createdAt);
		_columnOriginalValues.put("updatedAt", _updatedAt);
		_columnOriginalValues.put("geoCode", _geoCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("subdistrictId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("bnName", 8L);

		columnBitmasks.put("url", 16L);

		columnBitmasks.put("status", 32L);

		columnBitmasks.put("createdAt", 64L);

		columnBitmasks.put("updatedAt", 128L);

		columnBitmasks.put("geoCode", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private dgfLocUnion _escapedModel;

}