/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfFglProductDtls;
import bd.gov.dgfood.food.grain.license.model.DgfFglProductDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfFglProductDtls service. Represents a row in the &quot;dgf_fgl_product_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfFglProductDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfFglProductDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfFglProductDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfFglProductDtlsModelImpl
	extends BaseModelImpl<DgfFglProductDtls> implements DgfFglProductDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf fgl product dtls model instance should use the <code>DgfFglProductDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_fgl_product_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"fglProductPrimaryId", Types.BIGINT}, {"nationalId", Types.VARCHAR},
		{"fglLicPrimaryId", Types.BIGINT}, {"productType", Types.VARCHAR},
		{"stockDuration", Types.BIGINT}, {"stockAmount", Types.BIGINT},
		{"createdDate", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"modifiedBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fglProductPrimaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fglLicPrimaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stockDuration", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stockAmount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_fgl_product_dtls (fglProductPrimaryId LONG not null primary key,nationalId VARCHAR(75) null,fglLicPrimaryId LONG,productType VARCHAR(75) null,stockDuration LONG,stockAmount LONG,createdDate DATE null,createdBy LONG,modifiedDate DATE null,modifiedBy LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_fgl_product_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfFglProductDtls.fglProductPrimaryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_fgl_product_dtls.fglProductPrimaryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLLICPRIMARYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLPRODUCTPRIMARYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfFglProductDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fglProductPrimaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFglProductPrimaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fglProductPrimaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfFglProductDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfFglProductDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfFglProductDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfFglProductDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfFglProductDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfFglProductDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfFglProductDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfFglProductDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfFglProductDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfFglProductDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfFglProductDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfFglProductDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfFglProductDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfFglProductDtls, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DgfFglProductDtls, Object>>();
		Map<String, BiConsumer<DgfFglProductDtls, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DgfFglProductDtls, ?>>();

		attributeGetterFunctions.put(
			"fglProductPrimaryId", DgfFglProductDtls::getFglProductPrimaryId);
		attributeSetterBiConsumers.put(
			"fglProductPrimaryId",
			(BiConsumer<DgfFglProductDtls, Long>)
				DgfFglProductDtls::setFglProductPrimaryId);
		attributeGetterFunctions.put(
			"nationalId", DgfFglProductDtls::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfFglProductDtls, String>)
				DgfFglProductDtls::setNationalId);
		attributeGetterFunctions.put(
			"fglLicPrimaryId", DgfFglProductDtls::getFglLicPrimaryId);
		attributeSetterBiConsumers.put(
			"fglLicPrimaryId",
			(BiConsumer<DgfFglProductDtls, Long>)
				DgfFglProductDtls::setFglLicPrimaryId);
		attributeGetterFunctions.put(
			"productType", DgfFglProductDtls::getProductType);
		attributeSetterBiConsumers.put(
			"productType",
			(BiConsumer<DgfFglProductDtls, String>)
				DgfFglProductDtls::setProductType);
		attributeGetterFunctions.put(
			"stockDuration", DgfFglProductDtls::getStockDuration);
		attributeSetterBiConsumers.put(
			"stockDuration",
			(BiConsumer<DgfFglProductDtls, Long>)
				DgfFglProductDtls::setStockDuration);
		attributeGetterFunctions.put(
			"stockAmount", DgfFglProductDtls::getStockAmount);
		attributeSetterBiConsumers.put(
			"stockAmount",
			(BiConsumer<DgfFglProductDtls, Long>)
				DgfFglProductDtls::setStockAmount);
		attributeGetterFunctions.put(
			"createdDate", DgfFglProductDtls::getCreatedDate);
		attributeSetterBiConsumers.put(
			"createdDate",
			(BiConsumer<DgfFglProductDtls, Date>)
				DgfFglProductDtls::setCreatedDate);
		attributeGetterFunctions.put(
			"createdBy", DgfFglProductDtls::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<DgfFglProductDtls, Long>)
				DgfFglProductDtls::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedDate", DgfFglProductDtls::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DgfFglProductDtls, Date>)
				DgfFglProductDtls::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedBy", DgfFglProductDtls::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<DgfFglProductDtls, Long>)
				DgfFglProductDtls::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFglProductPrimaryId() {
		return _fglProductPrimaryId;
	}

	@Override
	public void setFglProductPrimaryId(long fglProductPrimaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglProductPrimaryId = fglProductPrimaryId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("nationalId");
	}

	@JSON
	@Override
	public long getFglLicPrimaryId() {
		return _fglLicPrimaryId;
	}

	@Override
	public void setFglLicPrimaryId(long fglLicPrimaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglLicPrimaryId = fglLicPrimaryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFglLicPrimaryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("fglLicPrimaryId"));
	}

	@JSON
	@Override
	public String getProductType() {
		if (_productType == null) {
			return "";
		}
		else {
			return _productType;
		}
	}

	@Override
	public void setProductType(String productType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productType = productType;
	}

	@JSON
	@Override
	public long getStockDuration() {
		return _stockDuration;
	}

	@Override
	public void setStockDuration(long stockDuration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stockDuration = stockDuration;
	}

	@JSON
	@Override
	public long getStockAmount() {
		return _stockAmount;
	}

	@Override
	public void setStockAmount(long stockAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stockAmount = stockAmount;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfFglProductDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfFglProductDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfFglProductDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfFglProductDtlsImpl dgfFglProductDtlsImpl =
			new DgfFglProductDtlsImpl();

		dgfFglProductDtlsImpl.setFglProductPrimaryId(getFglProductPrimaryId());
		dgfFglProductDtlsImpl.setNationalId(getNationalId());
		dgfFglProductDtlsImpl.setFglLicPrimaryId(getFglLicPrimaryId());
		dgfFglProductDtlsImpl.setProductType(getProductType());
		dgfFglProductDtlsImpl.setStockDuration(getStockDuration());
		dgfFglProductDtlsImpl.setStockAmount(getStockAmount());
		dgfFglProductDtlsImpl.setCreatedDate(getCreatedDate());
		dgfFglProductDtlsImpl.setCreatedBy(getCreatedBy());
		dgfFglProductDtlsImpl.setModifiedDate(getModifiedDate());
		dgfFglProductDtlsImpl.setModifiedBy(getModifiedBy());

		dgfFglProductDtlsImpl.resetOriginalValues();

		return dgfFglProductDtlsImpl;
	}

	@Override
	public DgfFglProductDtls cloneWithOriginalValues() {
		DgfFglProductDtlsImpl dgfFglProductDtlsImpl =
			new DgfFglProductDtlsImpl();

		dgfFglProductDtlsImpl.setFglProductPrimaryId(
			this.<Long>getColumnOriginalValue("fglProductPrimaryId"));
		dgfFglProductDtlsImpl.setNationalId(
			this.<String>getColumnOriginalValue("nationalId"));
		dgfFglProductDtlsImpl.setFglLicPrimaryId(
			this.<Long>getColumnOriginalValue("fglLicPrimaryId"));
		dgfFglProductDtlsImpl.setProductType(
			this.<String>getColumnOriginalValue("productType"));
		dgfFglProductDtlsImpl.setStockDuration(
			this.<Long>getColumnOriginalValue("stockDuration"));
		dgfFglProductDtlsImpl.setStockAmount(
			this.<Long>getColumnOriginalValue("stockAmount"));
		dgfFglProductDtlsImpl.setCreatedDate(
			this.<Date>getColumnOriginalValue("createdDate"));
		dgfFglProductDtlsImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		dgfFglProductDtlsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		dgfFglProductDtlsImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));

		return dgfFglProductDtlsImpl;
	}

	@Override
	public int compareTo(DgfFglProductDtls dgfFglProductDtls) {
		long primaryKey = dgfFglProductDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfFglProductDtls)) {
			return false;
		}

		DgfFglProductDtls dgfFglProductDtls = (DgfFglProductDtls)object;

		long primaryKey = dgfFglProductDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfFglProductDtls> toCacheModel() {
		DgfFglProductDtlsCacheModel dgfFglProductDtlsCacheModel =
			new DgfFglProductDtlsCacheModel();

		dgfFglProductDtlsCacheModel.fglProductPrimaryId =
			getFglProductPrimaryId();

		dgfFglProductDtlsCacheModel.nationalId = getNationalId();

		String nationalId = dgfFglProductDtlsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfFglProductDtlsCacheModel.nationalId = null;
		}

		dgfFglProductDtlsCacheModel.fglLicPrimaryId = getFglLicPrimaryId();

		dgfFglProductDtlsCacheModel.productType = getProductType();

		String productType = dgfFglProductDtlsCacheModel.productType;

		if ((productType != null) && (productType.length() == 0)) {
			dgfFglProductDtlsCacheModel.productType = null;
		}

		dgfFglProductDtlsCacheModel.stockDuration = getStockDuration();

		dgfFglProductDtlsCacheModel.stockAmount = getStockAmount();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			dgfFglProductDtlsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			dgfFglProductDtlsCacheModel.createdDate = Long.MIN_VALUE;
		}

		dgfFglProductDtlsCacheModel.createdBy = getCreatedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dgfFglProductDtlsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dgfFglProductDtlsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dgfFglProductDtlsCacheModel.modifiedBy = getModifiedBy();

		return dgfFglProductDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfFglProductDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfFglProductDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfFglProductDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfFglProductDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfFglProductDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfFglProductDtls.class, ModelWrapper.class);

	}

	private long _fglProductPrimaryId;
	private String _nationalId;
	private long _fglLicPrimaryId;
	private String _productType;
	private long _stockDuration;
	private long _stockAmount;
	private Date _createdDate;
	private long _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;

	public <T> T getColumnValue(String columnName) {
		Function<DgfFglProductDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfFglProductDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("fglProductPrimaryId", _fglProductPrimaryId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("fglLicPrimaryId", _fglLicPrimaryId);
		_columnOriginalValues.put("productType", _productType);
		_columnOriginalValues.put("stockDuration", _stockDuration);
		_columnOriginalValues.put("stockAmount", _stockAmount);
		_columnOriginalValues.put("createdDate", _createdDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fglProductPrimaryId", 1L);

		columnBitmasks.put("nationalId", 2L);

		columnBitmasks.put("fglLicPrimaryId", 4L);

		columnBitmasks.put("productType", 8L);

		columnBitmasks.put("stockDuration", 16L);

		columnBitmasks.put("stockAmount", 32L);

		columnBitmasks.put("createdDate", 64L);

		columnBitmasks.put("createdBy", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("modifiedBy", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfFglProductDtls _escapedModel;

}