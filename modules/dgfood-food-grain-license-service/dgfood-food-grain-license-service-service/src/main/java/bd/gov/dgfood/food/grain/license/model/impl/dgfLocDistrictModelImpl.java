/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.dgfLocDistrict;
import bd.gov.dgfood.food.grain.license.model.dgfLocDistrictModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the dgfLocDistrict service. Represents a row in the &quot;dgf_loc_district&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>dgfLocDistrictModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link dgfLocDistrictImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see dgfLocDistrictImpl
 * @generated
 */
@JSON(strict = true)
public class dgfLocDistrictModelImpl
	extends BaseModelImpl<dgfLocDistrict> implements dgfLocDistrictModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf loc district model instance should use the <code>dgfLocDistrict</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_loc_district";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"divisionId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"bnName", Types.VARCHAR},
		{"lat", Types.VARCHAR}, {"lon", Types.VARCHAR}, {"url", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"createdAt", Types.TIMESTAMP},
		{"updatedAt", Types.TIMESTAMP}, {"geoCode", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("divisionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bnName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lon", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdAt", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updatedAt", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("geoCode", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_loc_district (id_ LONG not null primary key,divisionId LONG,name VARCHAR(75) null,bnName VARCHAR(75) null,lat VARCHAR(75) null,lon VARCHAR(75) null,url VARCHAR(75) null,status VARCHAR(75) null,createdAt DATE null,updatedAt DATE null,geoCode LONG)";

	public static final String TABLE_SQL_DROP = "drop table dgf_loc_district";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfLocDistrict.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_loc_district.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DIVISIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public dgfLocDistrictModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return dgfLocDistrict.class;
	}

	@Override
	public String getModelClassName() {
		return dgfLocDistrict.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<dgfLocDistrict, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<dgfLocDistrict, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<dgfLocDistrict, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((dgfLocDistrict)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<dgfLocDistrict, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<dgfLocDistrict, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(dgfLocDistrict)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<dgfLocDistrict, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<dgfLocDistrict, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<dgfLocDistrict, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<dgfLocDistrict, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<dgfLocDistrict, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<dgfLocDistrict, Object>>();
		Map<String, BiConsumer<dgfLocDistrict, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<dgfLocDistrict, ?>>();

		attributeGetterFunctions.put("id", dgfLocDistrict::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<dgfLocDistrict, Long>)dgfLocDistrict::setId);
		attributeGetterFunctions.put(
			"divisionId", dgfLocDistrict::getDivisionId);
		attributeSetterBiConsumers.put(
			"divisionId",
			(BiConsumer<dgfLocDistrict, Long>)dgfLocDistrict::setDivisionId);
		attributeGetterFunctions.put("name", dgfLocDistrict::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<dgfLocDistrict, String>)dgfLocDistrict::setName);
		attributeGetterFunctions.put("bnName", dgfLocDistrict::getBnName);
		attributeSetterBiConsumers.put(
			"bnName",
			(BiConsumer<dgfLocDistrict, String>)dgfLocDistrict::setBnName);
		attributeGetterFunctions.put("lat", dgfLocDistrict::getLat);
		attributeSetterBiConsumers.put(
			"lat", (BiConsumer<dgfLocDistrict, String>)dgfLocDistrict::setLat);
		attributeGetterFunctions.put("lon", dgfLocDistrict::getLon);
		attributeSetterBiConsumers.put(
			"lon", (BiConsumer<dgfLocDistrict, String>)dgfLocDistrict::setLon);
		attributeGetterFunctions.put("url", dgfLocDistrict::getUrl);
		attributeSetterBiConsumers.put(
			"url", (BiConsumer<dgfLocDistrict, String>)dgfLocDistrict::setUrl);
		attributeGetterFunctions.put("status", dgfLocDistrict::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<dgfLocDistrict, String>)dgfLocDistrict::setStatus);
		attributeGetterFunctions.put("createdAt", dgfLocDistrict::getCreatedAt);
		attributeSetterBiConsumers.put(
			"createdAt",
			(BiConsumer<dgfLocDistrict, Date>)dgfLocDistrict::setCreatedAt);
		attributeGetterFunctions.put("updatedAt", dgfLocDistrict::getUpdatedAt);
		attributeSetterBiConsumers.put(
			"updatedAt",
			(BiConsumer<dgfLocDistrict, Date>)dgfLocDistrict::setUpdatedAt);
		attributeGetterFunctions.put("geoCode", dgfLocDistrict::getGeoCode);
		attributeSetterBiConsumers.put(
			"geoCode",
			(BiConsumer<dgfLocDistrict, Long>)dgfLocDistrict::setGeoCode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getDivisionId() {
		return _divisionId;
	}

	@Override
	public void setDivisionId(long divisionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_divisionId = divisionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDivisionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("divisionId"));
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getBnName() {
		if (_bnName == null) {
			return "";
		}
		else {
			return _bnName;
		}
	}

	@Override
	public void setBnName(String bnName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bnName = bnName;
	}

	@JSON
	@Override
	public String getLat() {
		if (_lat == null) {
			return "";
		}
		else {
			return _lat;
		}
	}

	@Override
	public void setLat(String lat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lat = lat;
	}

	@JSON
	@Override
	public String getLon() {
		if (_lon == null) {
			return "";
		}
		else {
			return _lon;
		}
	}

	@Override
	public void setLon(String lon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lon = lon;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_url = url;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public Date getCreatedAt() {
		return _createdAt;
	}

	@Override
	public void setCreatedAt(Date createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@JSON
	@Override
	public Date getUpdatedAt() {
		return _updatedAt;
	}

	@Override
	public void setUpdatedAt(Date updatedAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedAt = updatedAt;
	}

	@JSON
	@Override
	public long getGeoCode() {
		return _geoCode;
	}

	@Override
	public void setGeoCode(long geoCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_geoCode = geoCode;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, dgfLocDistrict.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public dgfLocDistrict toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, dgfLocDistrict>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		dgfLocDistrictImpl dgfLocDistrictImpl = new dgfLocDistrictImpl();

		dgfLocDistrictImpl.setId(getId());
		dgfLocDistrictImpl.setDivisionId(getDivisionId());
		dgfLocDistrictImpl.setName(getName());
		dgfLocDistrictImpl.setBnName(getBnName());
		dgfLocDistrictImpl.setLat(getLat());
		dgfLocDistrictImpl.setLon(getLon());
		dgfLocDistrictImpl.setUrl(getUrl());
		dgfLocDistrictImpl.setStatus(getStatus());
		dgfLocDistrictImpl.setCreatedAt(getCreatedAt());
		dgfLocDistrictImpl.setUpdatedAt(getUpdatedAt());
		dgfLocDistrictImpl.setGeoCode(getGeoCode());

		dgfLocDistrictImpl.resetOriginalValues();

		return dgfLocDistrictImpl;
	}

	@Override
	public dgfLocDistrict cloneWithOriginalValues() {
		dgfLocDistrictImpl dgfLocDistrictImpl = new dgfLocDistrictImpl();

		dgfLocDistrictImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		dgfLocDistrictImpl.setDivisionId(
			this.<Long>getColumnOriginalValue("divisionId"));
		dgfLocDistrictImpl.setName(this.<String>getColumnOriginalValue("name"));
		dgfLocDistrictImpl.setBnName(
			this.<String>getColumnOriginalValue("bnName"));
		dgfLocDistrictImpl.setLat(this.<String>getColumnOriginalValue("lat"));
		dgfLocDistrictImpl.setLon(this.<String>getColumnOriginalValue("lon"));
		dgfLocDistrictImpl.setUrl(this.<String>getColumnOriginalValue("url"));
		dgfLocDistrictImpl.setStatus(
			this.<String>getColumnOriginalValue("status"));
		dgfLocDistrictImpl.setCreatedAt(
			this.<Date>getColumnOriginalValue("createdAt"));
		dgfLocDistrictImpl.setUpdatedAt(
			this.<Date>getColumnOriginalValue("updatedAt"));
		dgfLocDistrictImpl.setGeoCode(
			this.<Long>getColumnOriginalValue("geoCode"));

		return dgfLocDistrictImpl;
	}

	@Override
	public int compareTo(dgfLocDistrict dgfLocDistrict) {
		long primaryKey = dgfLocDistrict.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof dgfLocDistrict)) {
			return false;
		}

		dgfLocDistrict dgfLocDistrict = (dgfLocDistrict)object;

		long primaryKey = dgfLocDistrict.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<dgfLocDistrict> toCacheModel() {
		dgfLocDistrictCacheModel dgfLocDistrictCacheModel =
			new dgfLocDistrictCacheModel();

		dgfLocDistrictCacheModel.id = getId();

		dgfLocDistrictCacheModel.divisionId = getDivisionId();

		dgfLocDistrictCacheModel.name = getName();

		String name = dgfLocDistrictCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dgfLocDistrictCacheModel.name = null;
		}

		dgfLocDistrictCacheModel.bnName = getBnName();

		String bnName = dgfLocDistrictCacheModel.bnName;

		if ((bnName != null) && (bnName.length() == 0)) {
			dgfLocDistrictCacheModel.bnName = null;
		}

		dgfLocDistrictCacheModel.lat = getLat();

		String lat = dgfLocDistrictCacheModel.lat;

		if ((lat != null) && (lat.length() == 0)) {
			dgfLocDistrictCacheModel.lat = null;
		}

		dgfLocDistrictCacheModel.lon = getLon();

		String lon = dgfLocDistrictCacheModel.lon;

		if ((lon != null) && (lon.length() == 0)) {
			dgfLocDistrictCacheModel.lon = null;
		}

		dgfLocDistrictCacheModel.url = getUrl();

		String url = dgfLocDistrictCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			dgfLocDistrictCacheModel.url = null;
		}

		dgfLocDistrictCacheModel.status = getStatus();

		String status = dgfLocDistrictCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			dgfLocDistrictCacheModel.status = null;
		}

		Date createdAt = getCreatedAt();

		if (createdAt != null) {
			dgfLocDistrictCacheModel.createdAt = createdAt.getTime();
		}
		else {
			dgfLocDistrictCacheModel.createdAt = Long.MIN_VALUE;
		}

		Date updatedAt = getUpdatedAt();

		if (updatedAt != null) {
			dgfLocDistrictCacheModel.updatedAt = updatedAt.getTime();
		}
		else {
			dgfLocDistrictCacheModel.updatedAt = Long.MIN_VALUE;
		}

		dgfLocDistrictCacheModel.geoCode = getGeoCode();

		return dgfLocDistrictCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<dgfLocDistrict, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<dgfLocDistrict, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<dgfLocDistrict, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((dgfLocDistrict)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, dgfLocDistrict>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					dgfLocDistrict.class, ModelWrapper.class);

	}

	private long _id;
	private long _divisionId;
	private String _name;
	private String _bnName;
	private String _lat;
	private String _lon;
	private String _url;
	private String _status;
	private Date _createdAt;
	private Date _updatedAt;
	private long _geoCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<dgfLocDistrict, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((dgfLocDistrict)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("divisionId", _divisionId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("bnName", _bnName);
		_columnOriginalValues.put("lat", _lat);
		_columnOriginalValues.put("lon", _lon);
		_columnOriginalValues.put("url", _url);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("createdAt", _createdAt);
		_columnOriginalValues.put("updatedAt", _updatedAt);
		_columnOriginalValues.put("geoCode", _geoCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("divisionId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("bnName", 8L);

		columnBitmasks.put("lat", 16L);

		columnBitmasks.put("lon", 32L);

		columnBitmasks.put("url", 64L);

		columnBitmasks.put("status", 128L);

		columnBitmasks.put("createdAt", 256L);

		columnBitmasks.put("updatedAt", 512L);

		columnBitmasks.put("geoCode", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private dgfLocDistrict _escapedModel;

}