/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfDistributionSchedules;
import bd.gov.dgfood.food.grain.license.model.DgfDistributionSchedulesModel;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfDistributionSchedules service. Represents a row in the &quot;dgf_distribution_schedules&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfDistributionSchedulesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfDistributionSchedulesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfDistributionSchedulesImpl
 * @generated
 */
@JSON(strict = true)
public class DgfDistributionSchedulesModelImpl
	extends BaseModelImpl<DgfDistributionSchedules>
	implements DgfDistributionSchedulesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf distribution schedules model instance should use the <code>DgfDistributionSchedules</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_distribution_schedules";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.VARCHAR}, {"distribution_year", Types.BIGINT},
		{"distribution_month", Types.VARCHAR}, {"open_status", Types.VARCHAR},
		{"start_date", Types.TIMESTAMP}, {"end_date", Types.TIMESTAMP},
		{"remarks", Types.VARCHAR}, {"user_id", Types.BIGINT},
		{"created_at", Types.TIMESTAMP}, {"updated_at", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("distribution_year", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("distribution_month", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("open_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("start_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("end_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("created_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated_at", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_distribution_schedules (id VARCHAR(75) not null primary key,distribution_year LONG,distribution_month VARCHAR(75) null,open_status VARCHAR(75) null,start_date DATE null,end_date DATE null,remarks VARCHAR(75) null,user_id LONG,created_at DATE null,updated_at DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_distribution_schedules";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfDistributionSchedules.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_distribution_schedules.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DISTRIBUTIONMONTH_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DISTRIBUTIONYEAR_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENDDATE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OPENSTATUS_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STARTDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfDistributionSchedulesModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DgfDistributionSchedules.class;
	}

	@Override
	public String getModelClassName() {
		return DgfDistributionSchedules.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfDistributionSchedules, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfDistributionSchedules, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDistributionSchedules, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfDistributionSchedules)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfDistributionSchedules, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfDistributionSchedules, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfDistributionSchedules)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfDistributionSchedules, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfDistributionSchedules, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfDistributionSchedules, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<DgfDistributionSchedules, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfDistributionSchedules, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DgfDistributionSchedules, Object>>();
		Map<String, BiConsumer<DgfDistributionSchedules, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DgfDistributionSchedules, ?>>();

		attributeGetterFunctions.put("id", DgfDistributionSchedules::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<DgfDistributionSchedules, String>)
				DgfDistributionSchedules::setId);
		attributeGetterFunctions.put(
			"distributionYear", DgfDistributionSchedules::getDistributionYear);
		attributeSetterBiConsumers.put(
			"distributionYear",
			(BiConsumer<DgfDistributionSchedules, Long>)
				DgfDistributionSchedules::setDistributionYear);
		attributeGetterFunctions.put(
			"distributionMonth",
			DgfDistributionSchedules::getDistributionMonth);
		attributeSetterBiConsumers.put(
			"distributionMonth",
			(BiConsumer<DgfDistributionSchedules, String>)
				DgfDistributionSchedules::setDistributionMonth);
		attributeGetterFunctions.put(
			"openStatus", DgfDistributionSchedules::getOpenStatus);
		attributeSetterBiConsumers.put(
			"openStatus",
			(BiConsumer<DgfDistributionSchedules, String>)
				DgfDistributionSchedules::setOpenStatus);
		attributeGetterFunctions.put(
			"startDate", DgfDistributionSchedules::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<DgfDistributionSchedules, Date>)
				DgfDistributionSchedules::setStartDate);
		attributeGetterFunctions.put(
			"endDate", DgfDistributionSchedules::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<DgfDistributionSchedules, Date>)
				DgfDistributionSchedules::setEndDate);
		attributeGetterFunctions.put(
			"remarks", DgfDistributionSchedules::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<DgfDistributionSchedules, String>)
				DgfDistributionSchedules::setRemarks);
		attributeGetterFunctions.put(
			"userId", DgfDistributionSchedules::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DgfDistributionSchedules, Long>)
				DgfDistributionSchedules::setUserId);
		attributeGetterFunctions.put(
			"createdAt", DgfDistributionSchedules::getCreatedAt);
		attributeSetterBiConsumers.put(
			"createdAt",
			(BiConsumer<DgfDistributionSchedules, Date>)
				DgfDistributionSchedules::setCreatedAt);
		attributeGetterFunctions.put(
			"updatedAt", DgfDistributionSchedules::getUpdatedAt);
		attributeSetterBiConsumers.put(
			"updatedAt",
			(BiConsumer<DgfDistributionSchedules, Date>)
				DgfDistributionSchedules::setUpdatedAt);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getId() {
		if (_id == null) {
			return "";
		}
		else {
			return _id;
		}
	}

	@Override
	public void setId(String id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getDistributionYear() {
		return _distributionYear;
	}

	@Override
	public void setDistributionYear(long distributionYear) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_distributionYear = distributionYear;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDistributionYear() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("distribution_year"));
	}

	@JSON
	@Override
	public String getDistributionMonth() {
		if (_distributionMonth == null) {
			return "";
		}
		else {
			return _distributionMonth;
		}
	}

	@Override
	public void setDistributionMonth(String distributionMonth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_distributionMonth = distributionMonth;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDistributionMonth() {
		return getColumnOriginalValue("distribution_month");
	}

	@JSON
	@Override
	public String getOpenStatus() {
		if (_openStatus == null) {
			return "";
		}
		else {
			return _openStatus;
		}
	}

	@Override
	public void setOpenStatus(String openStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_openStatus = openStatus;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalOpenStatus() {
		return getColumnOriginalValue("open_status");
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalStartDate() {
		return getColumnOriginalValue("start_date");
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalEndDate() {
		return getColumnOriginalValue("end_date");
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreatedAt() {
		return _createdAt;
	}

	@Override
	public void setCreatedAt(Date createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@JSON
	@Override
	public Date getUpdatedAt() {
		return _updatedAt;
	}

	@Override
	public void setUpdatedAt(Date updatedAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedAt = updatedAt;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public DgfDistributionSchedules toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfDistributionSchedules>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfDistributionSchedulesImpl dgfDistributionSchedulesImpl =
			new DgfDistributionSchedulesImpl();

		dgfDistributionSchedulesImpl.setId(getId());
		dgfDistributionSchedulesImpl.setDistributionYear(getDistributionYear());
		dgfDistributionSchedulesImpl.setDistributionMonth(
			getDistributionMonth());
		dgfDistributionSchedulesImpl.setOpenStatus(getOpenStatus());
		dgfDistributionSchedulesImpl.setStartDate(getStartDate());
		dgfDistributionSchedulesImpl.setEndDate(getEndDate());
		dgfDistributionSchedulesImpl.setRemarks(getRemarks());
		dgfDistributionSchedulesImpl.setUserId(getUserId());
		dgfDistributionSchedulesImpl.setCreatedAt(getCreatedAt());
		dgfDistributionSchedulesImpl.setUpdatedAt(getUpdatedAt());

		dgfDistributionSchedulesImpl.resetOriginalValues();

		return dgfDistributionSchedulesImpl;
	}

	@Override
	public DgfDistributionSchedules cloneWithOriginalValues() {
		DgfDistributionSchedulesImpl dgfDistributionSchedulesImpl =
			new DgfDistributionSchedulesImpl();

		dgfDistributionSchedulesImpl.setId(
			this.<String>getColumnOriginalValue("id"));
		dgfDistributionSchedulesImpl.setDistributionYear(
			this.<Long>getColumnOriginalValue("distribution_year"));
		dgfDistributionSchedulesImpl.setDistributionMonth(
			this.<String>getColumnOriginalValue("distribution_month"));
		dgfDistributionSchedulesImpl.setOpenStatus(
			this.<String>getColumnOriginalValue("open_status"));
		dgfDistributionSchedulesImpl.setStartDate(
			this.<Date>getColumnOriginalValue("start_date"));
		dgfDistributionSchedulesImpl.setEndDate(
			this.<Date>getColumnOriginalValue("end_date"));
		dgfDistributionSchedulesImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		dgfDistributionSchedulesImpl.setUserId(
			this.<Long>getColumnOriginalValue("user_id"));
		dgfDistributionSchedulesImpl.setCreatedAt(
			this.<Date>getColumnOriginalValue("created_at"));
		dgfDistributionSchedulesImpl.setUpdatedAt(
			this.<Date>getColumnOriginalValue("updated_at"));

		return dgfDistributionSchedulesImpl;
	}

	@Override
	public int compareTo(DgfDistributionSchedules dgfDistributionSchedules) {
		String primaryKey = dgfDistributionSchedules.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfDistributionSchedules)) {
			return false;
		}

		DgfDistributionSchedules dgfDistributionSchedules =
			(DgfDistributionSchedules)object;

		String primaryKey = dgfDistributionSchedules.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfDistributionSchedules> toCacheModel() {
		DgfDistributionSchedulesCacheModel dgfDistributionSchedulesCacheModel =
			new DgfDistributionSchedulesCacheModel();

		dgfDistributionSchedulesCacheModel.id = getId();

		String id = dgfDistributionSchedulesCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			dgfDistributionSchedulesCacheModel.id = null;
		}

		dgfDistributionSchedulesCacheModel.distributionYear =
			getDistributionYear();

		dgfDistributionSchedulesCacheModel.distributionMonth =
			getDistributionMonth();

		String distributionMonth =
			dgfDistributionSchedulesCacheModel.distributionMonth;

		if ((distributionMonth != null) && (distributionMonth.length() == 0)) {
			dgfDistributionSchedulesCacheModel.distributionMonth = null;
		}

		dgfDistributionSchedulesCacheModel.openStatus = getOpenStatus();

		String openStatus = dgfDistributionSchedulesCacheModel.openStatus;

		if ((openStatus != null) && (openStatus.length() == 0)) {
			dgfDistributionSchedulesCacheModel.openStatus = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			dgfDistributionSchedulesCacheModel.startDate = startDate.getTime();
		}
		else {
			dgfDistributionSchedulesCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			dgfDistributionSchedulesCacheModel.endDate = endDate.getTime();
		}
		else {
			dgfDistributionSchedulesCacheModel.endDate = Long.MIN_VALUE;
		}

		dgfDistributionSchedulesCacheModel.remarks = getRemarks();

		String remarks = dgfDistributionSchedulesCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			dgfDistributionSchedulesCacheModel.remarks = null;
		}

		dgfDistributionSchedulesCacheModel.userId = getUserId();

		Date createdAt = getCreatedAt();

		if (createdAt != null) {
			dgfDistributionSchedulesCacheModel.createdAt = createdAt.getTime();
		}
		else {
			dgfDistributionSchedulesCacheModel.createdAt = Long.MIN_VALUE;
		}

		Date updatedAt = getUpdatedAt();

		if (updatedAt != null) {
			dgfDistributionSchedulesCacheModel.updatedAt = updatedAt.getTime();
		}
		else {
			dgfDistributionSchedulesCacheModel.updatedAt = Long.MIN_VALUE;
		}

		return dgfDistributionSchedulesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfDistributionSchedules, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfDistributionSchedules, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDistributionSchedules, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfDistributionSchedules)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, DgfDistributionSchedules>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						DgfDistributionSchedules.class, ModelWrapper.class);

	}

	private String _id;
	private long _distributionYear;
	private String _distributionMonth;
	private String _openStatus;
	private Date _startDate;
	private Date _endDate;
	private String _remarks;
	private long _userId;
	private Date _createdAt;
	private Date _updatedAt;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfDistributionSchedules, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfDistributionSchedules)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("distribution_year", _distributionYear);
		_columnOriginalValues.put("distribution_month", _distributionMonth);
		_columnOriginalValues.put("open_status", _openStatus);
		_columnOriginalValues.put("start_date", _startDate);
		_columnOriginalValues.put("end_date", _endDate);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("user_id", _userId);
		_columnOriginalValues.put("created_at", _createdAt);
		_columnOriginalValues.put("updated_at", _updatedAt);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("distribution_year", "distributionYear");
		attributeNames.put("distribution_month", "distributionMonth");
		attributeNames.put("open_status", "openStatus");
		attributeNames.put("start_date", "startDate");
		attributeNames.put("end_date", "endDate");
		attributeNames.put("user_id", "userId");
		attributeNames.put("created_at", "createdAt");
		attributeNames.put("updated_at", "updatedAt");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("distribution_year", 2L);

		columnBitmasks.put("distribution_month", 4L);

		columnBitmasks.put("open_status", 8L);

		columnBitmasks.put("start_date", 16L);

		columnBitmasks.put("end_date", 32L);

		columnBitmasks.put("remarks", 64L);

		columnBitmasks.put("user_id", 128L);

		columnBitmasks.put("created_at", 256L);

		columnBitmasks.put("updated_at", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfDistributionSchedules _escapedModel;

}