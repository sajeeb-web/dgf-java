/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfStoreDtls;
import bd.gov.dgfood.food.grain.license.model.DgfStoreDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfStoreDtls service. Represents a row in the &quot;dgf_store_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfStoreDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfStoreDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfStoreDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfStoreDtlsModelImpl
	extends BaseModelImpl<DgfStoreDtls> implements DgfStoreDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf store dtls model instance should use the <code>DgfStoreDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_store_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"national_id", Types.VARCHAR},
		{"type", Types.VARCHAR}, {"mouza", Types.VARCHAR},
		{"khatiyn", Types.VARCHAR}, {"dag_no", Types.VARCHAR},
		{"division", Types.BIGINT}, {"district", Types.BIGINT},
		{"upzilla", Types.BIGINT}, {"union_name", Types.BIGINT},
		{"city_corporatn", Types.BIGINT}, {"dics_hight", Types.VARCHAR},
		{"dics_width", Types.VARCHAR}, {"dics_lngth", Types.VARCHAR},
		{"dics_cpacty", Types.BIGINT}, {"total_cpacty", Types.BIGINT},
		{"created_at", Types.TIMESTAMP}, {"updated_at", Types.TIMESTAMP},
		{"flag", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("national_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mouza", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("khatiyn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dag_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("division", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("district", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("upzilla", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("union_name", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("city_corporatn", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dics_hight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dics_width", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dics_lngth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dics_cpacty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("total_cpacty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("created_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("flag", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_store_dtls (id LONG not null primary key,national_id VARCHAR(75) null,type VARCHAR(75) null,mouza VARCHAR(75) null,khatiyn VARCHAR(75) null,dag_no VARCHAR(75) null,division LONG,district LONG,upzilla LONG,union_name LONG,city_corporatn LONG,dics_hight VARCHAR(75) null,dics_width VARCHAR(75) null,dics_lngth VARCHAR(75) null,dics_cpacty LONG,total_cpacty LONG,created_at DATE null,updated_at DATE null,flag INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table dgf_store_dtls";

	public static final String ORDER_BY_JPQL = " ORDER BY dgfStoreDtls.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY dgf_store_dtls.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfStoreDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfStoreDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfStoreDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfStoreDtls, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfStoreDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfStoreDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfStoreDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfStoreDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfStoreDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfStoreDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfStoreDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfStoreDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfStoreDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfStoreDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfStoreDtls, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DgfStoreDtls, Object>>();
		Map<String, BiConsumer<DgfStoreDtls, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DgfStoreDtls, ?>>();

		attributeGetterFunctions.put("id", DgfStoreDtls::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setId);
		attributeGetterFunctions.put("nationalId", DgfStoreDtls::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setNationalId);
		attributeGetterFunctions.put("type", DgfStoreDtls::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setType);
		attributeGetterFunctions.put("mouza", DgfStoreDtls::getMouza);
		attributeSetterBiConsumers.put(
			"mouza", (BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setMouza);
		attributeGetterFunctions.put("khatiyn", DgfStoreDtls::getKhatiyn);
		attributeSetterBiConsumers.put(
			"khatiyn",
			(BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setKhatiyn);
		attributeGetterFunctions.put("DagNo", DgfStoreDtls::getDagNo);
		attributeSetterBiConsumers.put(
			"DagNo", (BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setDagNo);
		attributeGetterFunctions.put("division", DgfStoreDtls::getDivision);
		attributeSetterBiConsumers.put(
			"division",
			(BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setDivision);
		attributeGetterFunctions.put("district", DgfStoreDtls::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setDistrict);
		attributeGetterFunctions.put("upzilla", DgfStoreDtls::getUpzilla);
		attributeSetterBiConsumers.put(
			"upzilla",
			(BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setUpzilla);
		attributeGetterFunctions.put("unionName", DgfStoreDtls::getUnionName);
		attributeSetterBiConsumers.put(
			"unionName",
			(BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setUnionName);
		attributeGetterFunctions.put("cityCrprtn", DgfStoreDtls::getCityCrprtn);
		attributeSetterBiConsumers.put(
			"cityCrprtn",
			(BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setCityCrprtn);
		attributeGetterFunctions.put("dicsHight", DgfStoreDtls::getDicsHight);
		attributeSetterBiConsumers.put(
			"dicsHight",
			(BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setDicsHight);
		attributeGetterFunctions.put("dicsWidth", DgfStoreDtls::getDicsWidth);
		attributeSetterBiConsumers.put(
			"dicsWidth",
			(BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setDicsWidth);
		attributeGetterFunctions.put("dicsLngth", DgfStoreDtls::getDicsLngth);
		attributeSetterBiConsumers.put(
			"dicsLngth",
			(BiConsumer<DgfStoreDtls, String>)DgfStoreDtls::setDicsLngth);
		attributeGetterFunctions.put("dicsCpacty", DgfStoreDtls::getDicsCpacty);
		attributeSetterBiConsumers.put(
			"dicsCpacty",
			(BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setDicsCpacty);
		attributeGetterFunctions.put(
			"totalCpacty", DgfStoreDtls::getTotalCpacty);
		attributeSetterBiConsumers.put(
			"totalCpacty",
			(BiConsumer<DgfStoreDtls, Long>)DgfStoreDtls::setTotalCpacty);
		attributeGetterFunctions.put("createdAt", DgfStoreDtls::getCreatedAt);
		attributeSetterBiConsumers.put(
			"createdAt",
			(BiConsumer<DgfStoreDtls, Date>)DgfStoreDtls::setCreatedAt);
		attributeGetterFunctions.put("updatedAt", DgfStoreDtls::getUpdatedAt);
		attributeSetterBiConsumers.put(
			"updatedAt",
			(BiConsumer<DgfStoreDtls, Date>)DgfStoreDtls::setUpdatedAt);
		attributeGetterFunctions.put("flag", DgfStoreDtls::getFlag);
		attributeSetterBiConsumers.put(
			"flag", (BiConsumer<DgfStoreDtls, Integer>)DgfStoreDtls::setFlag);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("national_id");
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalType() {
		return getColumnOriginalValue("type");
	}

	@JSON
	@Override
	public String getMouza() {
		if (_mouza == null) {
			return "";
		}
		else {
			return _mouza;
		}
	}

	@Override
	public void setMouza(String mouza) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mouza = mouza;
	}

	@JSON
	@Override
	public String getKhatiyn() {
		if (_khatiyn == null) {
			return "";
		}
		else {
			return _khatiyn;
		}
	}

	@Override
	public void setKhatiyn(String khatiyn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_khatiyn = khatiyn;
	}

	@JSON
	@Override
	public String getDagNo() {
		if (_DagNo == null) {
			return "";
		}
		else {
			return _DagNo;
		}
	}

	@Override
	public void setDagNo(String DagNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_DagNo = DagNo;
	}

	@JSON
	@Override
	public long getDivision() {
		return _division;
	}

	@Override
	public void setDivision(long division) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_division = division;
	}

	@JSON
	@Override
	public long getDistrict() {
		return _district;
	}

	@Override
	public void setDistrict(long district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public long getUpzilla() {
		return _upzilla;
	}

	@Override
	public void setUpzilla(long upzilla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_upzilla = upzilla;
	}

	@JSON
	@Override
	public long getUnionName() {
		return _unionName;
	}

	@Override
	public void setUnionName(long unionName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unionName = unionName;
	}

	@JSON
	@Override
	public long getCityCrprtn() {
		return _cityCrprtn;
	}

	@Override
	public void setCityCrprtn(long cityCrprtn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityCrprtn = cityCrprtn;
	}

	@JSON
	@Override
	public String getDicsHight() {
		if (_dicsHight == null) {
			return "";
		}
		else {
			return _dicsHight;
		}
	}

	@Override
	public void setDicsHight(String dicsHight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dicsHight = dicsHight;
	}

	@JSON
	@Override
	public String getDicsWidth() {
		if (_dicsWidth == null) {
			return "";
		}
		else {
			return _dicsWidth;
		}
	}

	@Override
	public void setDicsWidth(String dicsWidth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dicsWidth = dicsWidth;
	}

	@JSON
	@Override
	public String getDicsLngth() {
		if (_dicsLngth == null) {
			return "";
		}
		else {
			return _dicsLngth;
		}
	}

	@Override
	public void setDicsLngth(String dicsLngth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dicsLngth = dicsLngth;
	}

	@JSON
	@Override
	public long getDicsCpacty() {
		return _dicsCpacty;
	}

	@Override
	public void setDicsCpacty(long dicsCpacty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dicsCpacty = dicsCpacty;
	}

	@JSON
	@Override
	public long getTotalCpacty() {
		return _totalCpacty;
	}

	@Override
	public void setTotalCpacty(long totalCpacty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalCpacty = totalCpacty;
	}

	@JSON
	@Override
	public Date getCreatedAt() {
		return _createdAt;
	}

	@Override
	public void setCreatedAt(Date createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@JSON
	@Override
	public Date getUpdatedAt() {
		return _updatedAt;
	}

	@Override
	public void setUpdatedAt(Date updatedAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedAt = updatedAt;
	}

	@JSON
	@Override
	public int getFlag() {
		return _flag;
	}

	@Override
	public void setFlag(int flag) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_flag = flag;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfStoreDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfStoreDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfStoreDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfStoreDtlsImpl dgfStoreDtlsImpl = new DgfStoreDtlsImpl();

		dgfStoreDtlsImpl.setId(getId());
		dgfStoreDtlsImpl.setNationalId(getNationalId());
		dgfStoreDtlsImpl.setType(getType());
		dgfStoreDtlsImpl.setMouza(getMouza());
		dgfStoreDtlsImpl.setKhatiyn(getKhatiyn());
		dgfStoreDtlsImpl.setDagNo(getDagNo());
		dgfStoreDtlsImpl.setDivision(getDivision());
		dgfStoreDtlsImpl.setDistrict(getDistrict());
		dgfStoreDtlsImpl.setUpzilla(getUpzilla());
		dgfStoreDtlsImpl.setUnionName(getUnionName());
		dgfStoreDtlsImpl.setCityCrprtn(getCityCrprtn());
		dgfStoreDtlsImpl.setDicsHight(getDicsHight());
		dgfStoreDtlsImpl.setDicsWidth(getDicsWidth());
		dgfStoreDtlsImpl.setDicsLngth(getDicsLngth());
		dgfStoreDtlsImpl.setDicsCpacty(getDicsCpacty());
		dgfStoreDtlsImpl.setTotalCpacty(getTotalCpacty());
		dgfStoreDtlsImpl.setCreatedAt(getCreatedAt());
		dgfStoreDtlsImpl.setUpdatedAt(getUpdatedAt());
		dgfStoreDtlsImpl.setFlag(getFlag());

		dgfStoreDtlsImpl.resetOriginalValues();

		return dgfStoreDtlsImpl;
	}

	@Override
	public DgfStoreDtls cloneWithOriginalValues() {
		DgfStoreDtlsImpl dgfStoreDtlsImpl = new DgfStoreDtlsImpl();

		dgfStoreDtlsImpl.setId(this.<Long>getColumnOriginalValue("id"));
		dgfStoreDtlsImpl.setNationalId(
			this.<String>getColumnOriginalValue("national_id"));
		dgfStoreDtlsImpl.setType(this.<String>getColumnOriginalValue("type"));
		dgfStoreDtlsImpl.setMouza(this.<String>getColumnOriginalValue("mouza"));
		dgfStoreDtlsImpl.setKhatiyn(
			this.<String>getColumnOriginalValue("khatiyn"));
		dgfStoreDtlsImpl.setDagNo(
			this.<String>getColumnOriginalValue("dag_no"));
		dgfStoreDtlsImpl.setDivision(
			this.<Long>getColumnOriginalValue("division"));
		dgfStoreDtlsImpl.setDistrict(
			this.<Long>getColumnOriginalValue("district"));
		dgfStoreDtlsImpl.setUpzilla(
			this.<Long>getColumnOriginalValue("upzilla"));
		dgfStoreDtlsImpl.setUnionName(
			this.<Long>getColumnOriginalValue("union_name"));
		dgfStoreDtlsImpl.setCityCrprtn(
			this.<Long>getColumnOriginalValue("city_corporatn"));
		dgfStoreDtlsImpl.setDicsHight(
			this.<String>getColumnOriginalValue("dics_hight"));
		dgfStoreDtlsImpl.setDicsWidth(
			this.<String>getColumnOriginalValue("dics_width"));
		dgfStoreDtlsImpl.setDicsLngth(
			this.<String>getColumnOriginalValue("dics_lngth"));
		dgfStoreDtlsImpl.setDicsCpacty(
			this.<Long>getColumnOriginalValue("dics_cpacty"));
		dgfStoreDtlsImpl.setTotalCpacty(
			this.<Long>getColumnOriginalValue("total_cpacty"));
		dgfStoreDtlsImpl.setCreatedAt(
			this.<Date>getColumnOriginalValue("created_at"));
		dgfStoreDtlsImpl.setUpdatedAt(
			this.<Date>getColumnOriginalValue("updated_at"));
		dgfStoreDtlsImpl.setFlag(this.<Integer>getColumnOriginalValue("flag"));

		return dgfStoreDtlsImpl;
	}

	@Override
	public int compareTo(DgfStoreDtls dgfStoreDtls) {
		long primaryKey = dgfStoreDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfStoreDtls)) {
			return false;
		}

		DgfStoreDtls dgfStoreDtls = (DgfStoreDtls)object;

		long primaryKey = dgfStoreDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfStoreDtls> toCacheModel() {
		DgfStoreDtlsCacheModel dgfStoreDtlsCacheModel =
			new DgfStoreDtlsCacheModel();

		dgfStoreDtlsCacheModel.id = getId();

		dgfStoreDtlsCacheModel.nationalId = getNationalId();

		String nationalId = dgfStoreDtlsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfStoreDtlsCacheModel.nationalId = null;
		}

		dgfStoreDtlsCacheModel.type = getType();

		String type = dgfStoreDtlsCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			dgfStoreDtlsCacheModel.type = null;
		}

		dgfStoreDtlsCacheModel.mouza = getMouza();

		String mouza = dgfStoreDtlsCacheModel.mouza;

		if ((mouza != null) && (mouza.length() == 0)) {
			dgfStoreDtlsCacheModel.mouza = null;
		}

		dgfStoreDtlsCacheModel.khatiyn = getKhatiyn();

		String khatiyn = dgfStoreDtlsCacheModel.khatiyn;

		if ((khatiyn != null) && (khatiyn.length() == 0)) {
			dgfStoreDtlsCacheModel.khatiyn = null;
		}

		dgfStoreDtlsCacheModel.DagNo = getDagNo();

		String DagNo = dgfStoreDtlsCacheModel.DagNo;

		if ((DagNo != null) && (DagNo.length() == 0)) {
			dgfStoreDtlsCacheModel.DagNo = null;
		}

		dgfStoreDtlsCacheModel.division = getDivision();

		dgfStoreDtlsCacheModel.district = getDistrict();

		dgfStoreDtlsCacheModel.upzilla = getUpzilla();

		dgfStoreDtlsCacheModel.unionName = getUnionName();

		dgfStoreDtlsCacheModel.cityCrprtn = getCityCrprtn();

		dgfStoreDtlsCacheModel.dicsHight = getDicsHight();

		String dicsHight = dgfStoreDtlsCacheModel.dicsHight;

		if ((dicsHight != null) && (dicsHight.length() == 0)) {
			dgfStoreDtlsCacheModel.dicsHight = null;
		}

		dgfStoreDtlsCacheModel.dicsWidth = getDicsWidth();

		String dicsWidth = dgfStoreDtlsCacheModel.dicsWidth;

		if ((dicsWidth != null) && (dicsWidth.length() == 0)) {
			dgfStoreDtlsCacheModel.dicsWidth = null;
		}

		dgfStoreDtlsCacheModel.dicsLngth = getDicsLngth();

		String dicsLngth = dgfStoreDtlsCacheModel.dicsLngth;

		if ((dicsLngth != null) && (dicsLngth.length() == 0)) {
			dgfStoreDtlsCacheModel.dicsLngth = null;
		}

		dgfStoreDtlsCacheModel.dicsCpacty = getDicsCpacty();

		dgfStoreDtlsCacheModel.totalCpacty = getTotalCpacty();

		Date createdAt = getCreatedAt();

		if (createdAt != null) {
			dgfStoreDtlsCacheModel.createdAt = createdAt.getTime();
		}
		else {
			dgfStoreDtlsCacheModel.createdAt = Long.MIN_VALUE;
		}

		Date updatedAt = getUpdatedAt();

		if (updatedAt != null) {
			dgfStoreDtlsCacheModel.updatedAt = updatedAt.getTime();
		}
		else {
			dgfStoreDtlsCacheModel.updatedAt = Long.MIN_VALUE;
		}

		dgfStoreDtlsCacheModel.flag = getFlag();

		return dgfStoreDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfStoreDtls, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfStoreDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfStoreDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DgfStoreDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfStoreDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfStoreDtls.class, ModelWrapper.class);

	}

	private long _id;
	private String _nationalId;
	private String _type;
	private String _mouza;
	private String _khatiyn;
	private String _DagNo;
	private long _division;
	private long _district;
	private long _upzilla;
	private long _unionName;
	private long _cityCrprtn;
	private String _dicsHight;
	private String _dicsWidth;
	private String _dicsLngth;
	private long _dicsCpacty;
	private long _totalCpacty;
	private Date _createdAt;
	private Date _updatedAt;
	private int _flag;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfStoreDtls, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfStoreDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("national_id", _nationalId);
		_columnOriginalValues.put("type", _type);
		_columnOriginalValues.put("mouza", _mouza);
		_columnOriginalValues.put("khatiyn", _khatiyn);
		_columnOriginalValues.put("dag_no", _DagNo);
		_columnOriginalValues.put("division", _division);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("upzilla", _upzilla);
		_columnOriginalValues.put("union_name", _unionName);
		_columnOriginalValues.put("city_corporatn", _cityCrprtn);
		_columnOriginalValues.put("dics_hight", _dicsHight);
		_columnOriginalValues.put("dics_width", _dicsWidth);
		_columnOriginalValues.put("dics_lngth", _dicsLngth);
		_columnOriginalValues.put("dics_cpacty", _dicsCpacty);
		_columnOriginalValues.put("total_cpacty", _totalCpacty);
		_columnOriginalValues.put("created_at", _createdAt);
		_columnOriginalValues.put("updated_at", _updatedAt);
		_columnOriginalValues.put("flag", _flag);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("national_id", "nationalId");
		attributeNames.put("dag_no", "DagNo");
		attributeNames.put("union_name", "unionName");
		attributeNames.put("city_corporatn", "cityCrprtn");
		attributeNames.put("dics_hight", "dicsHight");
		attributeNames.put("dics_width", "dicsWidth");
		attributeNames.put("dics_lngth", "dicsLngth");
		attributeNames.put("dics_cpacty", "dicsCpacty");
		attributeNames.put("total_cpacty", "totalCpacty");
		attributeNames.put("created_at", "createdAt");
		attributeNames.put("updated_at", "updatedAt");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("national_id", 2L);

		columnBitmasks.put("type", 4L);

		columnBitmasks.put("mouza", 8L);

		columnBitmasks.put("khatiyn", 16L);

		columnBitmasks.put("dag_no", 32L);

		columnBitmasks.put("division", 64L);

		columnBitmasks.put("district", 128L);

		columnBitmasks.put("upzilla", 256L);

		columnBitmasks.put("union_name", 512L);

		columnBitmasks.put("city_corporatn", 1024L);

		columnBitmasks.put("dics_hight", 2048L);

		columnBitmasks.put("dics_width", 4096L);

		columnBitmasks.put("dics_lngth", 8192L);

		columnBitmasks.put("dics_cpacty", 16384L);

		columnBitmasks.put("total_cpacty", 32768L);

		columnBitmasks.put("created_at", 65536L);

		columnBitmasks.put("updated_at", 131072L);

		columnBitmasks.put("flag", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfStoreDtls _escapedModel;

}