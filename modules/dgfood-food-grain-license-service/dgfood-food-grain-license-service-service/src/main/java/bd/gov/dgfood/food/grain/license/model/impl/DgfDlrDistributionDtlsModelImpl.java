/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfDlrDistributionDtls;
import bd.gov.dgfood.food.grain.license.model.DgfDlrDistributionDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfDlrDistributionDtls service. Represents a row in the &quot;dgf_dlr_distribution_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfDlrDistributionDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfDlrDistributionDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfDlrDistributionDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfDlrDistributionDtlsModelImpl
	extends BaseModelImpl<DgfDlrDistributionDtls>
	implements DgfDlrDistributionDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf dlr distribution dtls model instance should use the <code>DgfDlrDistributionDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_dlr_distribution_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"dealer_id", Types.BIGINT},
		{"beneficiaries_id", Types.BIGINT},
		{"beneficiaries_mobile_no", Types.VARCHAR}, {"card_no", Types.BIGINT},
		{"union_id", Types.BIGINT}, {"distribution_date", Types.TIMESTAMP},
		{"distribution_qty", Types.BIGINT}, {"status", Types.INTEGER},
		{"created_at", Types.TIMESTAMP}, {"updated_at", Types.TIMESTAMP},
		{"month", Types.INTEGER}, {"year", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dealer_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("beneficiaries_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("beneficiaries_mobile_no", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("card_no", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("union_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("distribution_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("distribution_qty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("created_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("month", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_dlr_distribution_dtls (id LONG not null primary key,dealer_id LONG,beneficiaries_id LONG,beneficiaries_mobile_no VARCHAR(75) null,card_no LONG,union_id LONG,distribution_date DATE null,distribution_qty LONG,status INTEGER,created_at DATE null,updated_at DATE null,month INTEGER,year INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_dlr_distribution_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfDlrDistributionDtls.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_dlr_distribution_dtls.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BENEFICIARIESID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEALERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MONTH_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long YEAR_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfDlrDistributionDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfDlrDistributionDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfDlrDistributionDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfDlrDistributionDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfDlrDistributionDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrDistributionDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfDlrDistributionDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfDlrDistributionDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfDlrDistributionDtls, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfDlrDistributionDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfDlrDistributionDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfDlrDistributionDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfDlrDistributionDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfDlrDistributionDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfDlrDistributionDtls, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DgfDlrDistributionDtls, Object>>();
		Map<String, BiConsumer<DgfDlrDistributionDtls, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DgfDlrDistributionDtls, ?>>();

		attributeGetterFunctions.put("id", DgfDlrDistributionDtls::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<DgfDlrDistributionDtls, Long>)
				DgfDlrDistributionDtls::setId);
		attributeGetterFunctions.put(
			"dealerId", DgfDlrDistributionDtls::getDealerId);
		attributeSetterBiConsumers.put(
			"dealerId",
			(BiConsumer<DgfDlrDistributionDtls, Long>)
				DgfDlrDistributionDtls::setDealerId);
		attributeGetterFunctions.put(
			"beneficiariesId", DgfDlrDistributionDtls::getBeneficiariesId);
		attributeSetterBiConsumers.put(
			"beneficiariesId",
			(BiConsumer<DgfDlrDistributionDtls, Long>)
				DgfDlrDistributionDtls::setBeneficiariesId);
		attributeGetterFunctions.put(
			"beneficiariesMobileNo",
			DgfDlrDistributionDtls::getBeneficiariesMobileNo);
		attributeSetterBiConsumers.put(
			"beneficiariesMobileNo",
			(BiConsumer<DgfDlrDistributionDtls, String>)
				DgfDlrDistributionDtls::setBeneficiariesMobileNo);
		attributeGetterFunctions.put(
			"cardNo", DgfDlrDistributionDtls::getCardNo);
		attributeSetterBiConsumers.put(
			"cardNo",
			(BiConsumer<DgfDlrDistributionDtls, Long>)
				DgfDlrDistributionDtls::setCardNo);
		attributeGetterFunctions.put(
			"unionId", DgfDlrDistributionDtls::getUnionId);
		attributeSetterBiConsumers.put(
			"unionId",
			(BiConsumer<DgfDlrDistributionDtls, Long>)
				DgfDlrDistributionDtls::setUnionId);
		attributeGetterFunctions.put(
			"distributionDate", DgfDlrDistributionDtls::getDistributionDate);
		attributeSetterBiConsumers.put(
			"distributionDate",
			(BiConsumer<DgfDlrDistributionDtls, Date>)
				DgfDlrDistributionDtls::setDistributionDate);
		attributeGetterFunctions.put(
			"distributionQty", DgfDlrDistributionDtls::getDistributionQty);
		attributeSetterBiConsumers.put(
			"distributionQty",
			(BiConsumer<DgfDlrDistributionDtls, Long>)
				DgfDlrDistributionDtls::setDistributionQty);
		attributeGetterFunctions.put(
			"status", DgfDlrDistributionDtls::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<DgfDlrDistributionDtls, Integer>)
				DgfDlrDistributionDtls::setStatus);
		attributeGetterFunctions.put(
			"createdAt", DgfDlrDistributionDtls::getCreatedAt);
		attributeSetterBiConsumers.put(
			"createdAt",
			(BiConsumer<DgfDlrDistributionDtls, Date>)
				DgfDlrDistributionDtls::setCreatedAt);
		attributeGetterFunctions.put(
			"updatedAt", DgfDlrDistributionDtls::getUpdatedAt);
		attributeSetterBiConsumers.put(
			"updatedAt",
			(BiConsumer<DgfDlrDistributionDtls, Date>)
				DgfDlrDistributionDtls::setUpdatedAt);
		attributeGetterFunctions.put("month", DgfDlrDistributionDtls::getMonth);
		attributeSetterBiConsumers.put(
			"month",
			(BiConsumer<DgfDlrDistributionDtls, Integer>)
				DgfDlrDistributionDtls::setMonth);
		attributeGetterFunctions.put("year", DgfDlrDistributionDtls::getYear);
		attributeSetterBiConsumers.put(
			"year",
			(BiConsumer<DgfDlrDistributionDtls, Integer>)
				DgfDlrDistributionDtls::setYear);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getDealerId() {
		return _dealerId;
	}

	@Override
	public void setDealerId(long dealerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealerId = dealerId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDealerId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dealer_id"));
	}

	@JSON
	@Override
	public long getBeneficiariesId() {
		return _beneficiariesId;
	}

	@Override
	public void setBeneficiariesId(long beneficiariesId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_beneficiariesId = beneficiariesId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBeneficiariesId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("beneficiaries_id"));
	}

	@JSON
	@Override
	public String getBeneficiariesMobileNo() {
		if (_beneficiariesMobileNo == null) {
			return "";
		}
		else {
			return _beneficiariesMobileNo;
		}
	}

	@Override
	public void setBeneficiariesMobileNo(String beneficiariesMobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_beneficiariesMobileNo = beneficiariesMobileNo;
	}

	@JSON
	@Override
	public long getCardNo() {
		return _cardNo;
	}

	@Override
	public void setCardNo(long cardNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cardNo = cardNo;
	}

	@JSON
	@Override
	public long getUnionId() {
		return _unionId;
	}

	@Override
	public void setUnionId(long unionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unionId = unionId;
	}

	@JSON
	@Override
	public Date getDistributionDate() {
		return _distributionDate;
	}

	@Override
	public void setDistributionDate(Date distributionDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_distributionDate = distributionDate;
	}

	@JSON
	@Override
	public long getDistributionQty() {
		return _distributionQty;
	}

	@Override
	public void setDistributionQty(long distributionQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_distributionQty = distributionQty;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public Date getCreatedAt() {
		return _createdAt;
	}

	@Override
	public void setCreatedAt(Date createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@JSON
	@Override
	public Date getUpdatedAt() {
		return _updatedAt;
	}

	@Override
	public void setUpdatedAt(Date updatedAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updatedAt = updatedAt;
	}

	@JSON
	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_month = month;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalMonth() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("month"));
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalYear() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("year"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfDlrDistributionDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfDlrDistributionDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfDlrDistributionDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfDlrDistributionDtlsImpl dgfDlrDistributionDtlsImpl =
			new DgfDlrDistributionDtlsImpl();

		dgfDlrDistributionDtlsImpl.setId(getId());
		dgfDlrDistributionDtlsImpl.setDealerId(getDealerId());
		dgfDlrDistributionDtlsImpl.setBeneficiariesId(getBeneficiariesId());
		dgfDlrDistributionDtlsImpl.setBeneficiariesMobileNo(
			getBeneficiariesMobileNo());
		dgfDlrDistributionDtlsImpl.setCardNo(getCardNo());
		dgfDlrDistributionDtlsImpl.setUnionId(getUnionId());
		dgfDlrDistributionDtlsImpl.setDistributionDate(getDistributionDate());
		dgfDlrDistributionDtlsImpl.setDistributionQty(getDistributionQty());
		dgfDlrDistributionDtlsImpl.setStatus(getStatus());
		dgfDlrDistributionDtlsImpl.setCreatedAt(getCreatedAt());
		dgfDlrDistributionDtlsImpl.setUpdatedAt(getUpdatedAt());
		dgfDlrDistributionDtlsImpl.setMonth(getMonth());
		dgfDlrDistributionDtlsImpl.setYear(getYear());

		dgfDlrDistributionDtlsImpl.resetOriginalValues();

		return dgfDlrDistributionDtlsImpl;
	}

	@Override
	public DgfDlrDistributionDtls cloneWithOriginalValues() {
		DgfDlrDistributionDtlsImpl dgfDlrDistributionDtlsImpl =
			new DgfDlrDistributionDtlsImpl();

		dgfDlrDistributionDtlsImpl.setId(
			this.<Long>getColumnOriginalValue("id"));
		dgfDlrDistributionDtlsImpl.setDealerId(
			this.<Long>getColumnOriginalValue("dealer_id"));
		dgfDlrDistributionDtlsImpl.setBeneficiariesId(
			this.<Long>getColumnOriginalValue("beneficiaries_id"));
		dgfDlrDistributionDtlsImpl.setBeneficiariesMobileNo(
			this.<String>getColumnOriginalValue("beneficiaries_mobile_no"));
		dgfDlrDistributionDtlsImpl.setCardNo(
			this.<Long>getColumnOriginalValue("card_no"));
		dgfDlrDistributionDtlsImpl.setUnionId(
			this.<Long>getColumnOriginalValue("union_id"));
		dgfDlrDistributionDtlsImpl.setDistributionDate(
			this.<Date>getColumnOriginalValue("distribution_date"));
		dgfDlrDistributionDtlsImpl.setDistributionQty(
			this.<Long>getColumnOriginalValue("distribution_qty"));
		dgfDlrDistributionDtlsImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		dgfDlrDistributionDtlsImpl.setCreatedAt(
			this.<Date>getColumnOriginalValue("created_at"));
		dgfDlrDistributionDtlsImpl.setUpdatedAt(
			this.<Date>getColumnOriginalValue("updated_at"));
		dgfDlrDistributionDtlsImpl.setMonth(
			this.<Integer>getColumnOriginalValue("month"));
		dgfDlrDistributionDtlsImpl.setYear(
			this.<Integer>getColumnOriginalValue("year"));

		return dgfDlrDistributionDtlsImpl;
	}

	@Override
	public int compareTo(DgfDlrDistributionDtls dgfDlrDistributionDtls) {
		long primaryKey = dgfDlrDistributionDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfDlrDistributionDtls)) {
			return false;
		}

		DgfDlrDistributionDtls dgfDlrDistributionDtls =
			(DgfDlrDistributionDtls)object;

		long primaryKey = dgfDlrDistributionDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfDlrDistributionDtls> toCacheModel() {
		DgfDlrDistributionDtlsCacheModel dgfDlrDistributionDtlsCacheModel =
			new DgfDlrDistributionDtlsCacheModel();

		dgfDlrDistributionDtlsCacheModel.id = getId();

		dgfDlrDistributionDtlsCacheModel.dealerId = getDealerId();

		dgfDlrDistributionDtlsCacheModel.beneficiariesId = getBeneficiariesId();

		dgfDlrDistributionDtlsCacheModel.beneficiariesMobileNo =
			getBeneficiariesMobileNo();

		String beneficiariesMobileNo =
			dgfDlrDistributionDtlsCacheModel.beneficiariesMobileNo;

		if ((beneficiariesMobileNo != null) &&
			(beneficiariesMobileNo.length() == 0)) {

			dgfDlrDistributionDtlsCacheModel.beneficiariesMobileNo = null;
		}

		dgfDlrDistributionDtlsCacheModel.cardNo = getCardNo();

		dgfDlrDistributionDtlsCacheModel.unionId = getUnionId();

		Date distributionDate = getDistributionDate();

		if (distributionDate != null) {
			dgfDlrDistributionDtlsCacheModel.distributionDate =
				distributionDate.getTime();
		}
		else {
			dgfDlrDistributionDtlsCacheModel.distributionDate = Long.MIN_VALUE;
		}

		dgfDlrDistributionDtlsCacheModel.distributionQty = getDistributionQty();

		dgfDlrDistributionDtlsCacheModel.status = getStatus();

		Date createdAt = getCreatedAt();

		if (createdAt != null) {
			dgfDlrDistributionDtlsCacheModel.createdAt = createdAt.getTime();
		}
		else {
			dgfDlrDistributionDtlsCacheModel.createdAt = Long.MIN_VALUE;
		}

		Date updatedAt = getUpdatedAt();

		if (updatedAt != null) {
			dgfDlrDistributionDtlsCacheModel.updatedAt = updatedAt.getTime();
		}
		else {
			dgfDlrDistributionDtlsCacheModel.updatedAt = Long.MIN_VALUE;
		}

		dgfDlrDistributionDtlsCacheModel.month = getMonth();

		dgfDlrDistributionDtlsCacheModel.year = getYear();

		return dgfDlrDistributionDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfDlrDistributionDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfDlrDistributionDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfDlrDistributionDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfDlrDistributionDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfDlrDistributionDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfDlrDistributionDtls.class, ModelWrapper.class);

	}

	private long _id;
	private long _dealerId;
	private long _beneficiariesId;
	private String _beneficiariesMobileNo;
	private long _cardNo;
	private long _unionId;
	private Date _distributionDate;
	private long _distributionQty;
	private int _status;
	private Date _createdAt;
	private Date _updatedAt;
	private int _month;
	private int _year;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DgfDlrDistributionDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfDlrDistributionDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id", _id);
		_columnOriginalValues.put("dealer_id", _dealerId);
		_columnOriginalValues.put("beneficiaries_id", _beneficiariesId);
		_columnOriginalValues.put(
			"beneficiaries_mobile_no", _beneficiariesMobileNo);
		_columnOriginalValues.put("card_no", _cardNo);
		_columnOriginalValues.put("union_id", _unionId);
		_columnOriginalValues.put("distribution_date", _distributionDate);
		_columnOriginalValues.put("distribution_qty", _distributionQty);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("created_at", _createdAt);
		_columnOriginalValues.put("updated_at", _updatedAt);
		_columnOriginalValues.put("month", _month);
		_columnOriginalValues.put("year", _year);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("dealer_id", "dealerId");
		attributeNames.put("beneficiaries_id", "beneficiariesId");
		attributeNames.put("beneficiaries_mobile_no", "beneficiariesMobileNo");
		attributeNames.put("card_no", "cardNo");
		attributeNames.put("union_id", "unionId");
		attributeNames.put("distribution_date", "distributionDate");
		attributeNames.put("distribution_qty", "distributionQty");
		attributeNames.put("created_at", "createdAt");
		attributeNames.put("updated_at", "updatedAt");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id", 1L);

		columnBitmasks.put("dealer_id", 2L);

		columnBitmasks.put("beneficiaries_id", 4L);

		columnBitmasks.put("beneficiaries_mobile_no", 8L);

		columnBitmasks.put("card_no", 16L);

		columnBitmasks.put("union_id", 32L);

		columnBitmasks.put("distribution_date", 64L);

		columnBitmasks.put("distribution_qty", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("created_at", 512L);

		columnBitmasks.put("updated_at", 1024L);

		columnBitmasks.put("month", 2048L);

		columnBitmasks.put("year", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfDlrDistributionDtls _escapedModel;

}