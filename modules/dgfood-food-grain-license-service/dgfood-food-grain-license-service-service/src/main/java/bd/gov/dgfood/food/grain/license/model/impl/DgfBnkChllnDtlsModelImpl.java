/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfBnkChllnDtls;
import bd.gov.dgfood.food.grain.license.model.DgfBnkChllnDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfBnkChllnDtls service. Represents a row in the &quot;dgf_bnk_chlln_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfBnkChllnDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfBnkChllnDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfBnkChllnDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfBnkChllnDtlsModelImpl
	extends BaseModelImpl<DgfBnkChllnDtls> implements DgfBnkChllnDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf bnk chlln dtls model instance should use the <code>DgfBnkChllnDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_bnk_chlln_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"bnkChllnId", Types.BIGINT}, {"trnPoNo", Types.BIGINT},
		{"paymentStatus", Types.BIGINT}, {"trnAmount", Types.BIGINT},
		{"pymntChllnDate", Types.TIMESTAMP}, {"bnkChllnDocId", Types.BIGINT},
		{"bnkChllnUpldBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bnkChllnId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trnPoNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("paymentStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trnAmount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pymntChllnDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bnkChllnDocId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bnkChllnUpldBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_bnk_chlln_dtls (bnkChllnId LONG not null primary key,trnPoNo LONG,paymentStatus LONG,trnAmount LONG,pymntChllnDate DATE null,bnkChllnDocId LONG,bnkChllnUpldBy LONG)";

	public static final String TABLE_SQL_DROP = "drop table dgf_bnk_chlln_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfBnkChllnDtls.bnkChllnId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_bnk_chlln_dtls.bnkChllnId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BNKCHLLNID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfBnkChllnDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bnkChllnId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBnkChllnId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bnkChllnId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfBnkChllnDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfBnkChllnDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfBnkChllnDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfBnkChllnDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfBnkChllnDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfBnkChllnDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfBnkChllnDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfBnkChllnDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfBnkChllnDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfBnkChllnDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfBnkChllnDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfBnkChllnDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfBnkChllnDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfBnkChllnDtls, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<DgfBnkChllnDtls, Object>>();
		Map<String, BiConsumer<DgfBnkChllnDtls, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DgfBnkChllnDtls, ?>>();

		attributeGetterFunctions.put(
			"bnkChllnId", DgfBnkChllnDtls::getBnkChllnId);
		attributeSetterBiConsumers.put(
			"bnkChllnId",
			(BiConsumer<DgfBnkChllnDtls, Long>)DgfBnkChllnDtls::setBnkChllnId);
		attributeGetterFunctions.put("trnPoNo", DgfBnkChllnDtls::getTrnPoNo);
		attributeSetterBiConsumers.put(
			"trnPoNo",
			(BiConsumer<DgfBnkChllnDtls, Long>)DgfBnkChllnDtls::setTrnPoNo);
		attributeGetterFunctions.put(
			"paymentStatus", DgfBnkChllnDtls::getPaymentStatus);
		attributeSetterBiConsumers.put(
			"paymentStatus",
			(BiConsumer<DgfBnkChllnDtls, Long>)
				DgfBnkChllnDtls::setPaymentStatus);
		attributeGetterFunctions.put(
			"trnAmount", DgfBnkChllnDtls::getTrnAmount);
		attributeSetterBiConsumers.put(
			"trnAmount",
			(BiConsumer<DgfBnkChllnDtls, Long>)DgfBnkChllnDtls::setTrnAmount);
		attributeGetterFunctions.put(
			"pymntChllnDate", DgfBnkChllnDtls::getPymntChllnDate);
		attributeSetterBiConsumers.put(
			"pymntChllnDate",
			(BiConsumer<DgfBnkChllnDtls, Date>)
				DgfBnkChllnDtls::setPymntChllnDate);
		attributeGetterFunctions.put(
			"bnkChllnDocId", DgfBnkChllnDtls::getBnkChllnDocId);
		attributeSetterBiConsumers.put(
			"bnkChllnDocId",
			(BiConsumer<DgfBnkChllnDtls, Long>)
				DgfBnkChllnDtls::setBnkChllnDocId);
		attributeGetterFunctions.put(
			"bnkChllnUpldBy", DgfBnkChllnDtls::getBnkChllnUpldBy);
		attributeSetterBiConsumers.put(
			"bnkChllnUpldBy",
			(BiConsumer<DgfBnkChllnDtls, Long>)
				DgfBnkChllnDtls::setBnkChllnUpldBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getBnkChllnId() {
		return _bnkChllnId;
	}

	@Override
	public void setBnkChllnId(long bnkChllnId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bnkChllnId = bnkChllnId;
	}

	@JSON
	@Override
	public long getTrnPoNo() {
		return _trnPoNo;
	}

	@Override
	public void setTrnPoNo(long trnPoNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trnPoNo = trnPoNo;
	}

	@JSON
	@Override
	public long getPaymentStatus() {
		return _paymentStatus;
	}

	@Override
	public void setPaymentStatus(long paymentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentStatus = paymentStatus;
	}

	@JSON
	@Override
	public long getTrnAmount() {
		return _trnAmount;
	}

	@Override
	public void setTrnAmount(long trnAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trnAmount = trnAmount;
	}

	@JSON
	@Override
	public Date getPymntChllnDate() {
		return _pymntChllnDate;
	}

	@Override
	public void setPymntChllnDate(Date pymntChllnDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pymntChllnDate = pymntChllnDate;
	}

	@JSON
	@Override
	public long getBnkChllnDocId() {
		return _bnkChllnDocId;
	}

	@Override
	public void setBnkChllnDocId(long bnkChllnDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bnkChllnDocId = bnkChllnDocId;
	}

	@JSON
	@Override
	public long getBnkChllnUpldBy() {
		return _bnkChllnUpldBy;
	}

	@Override
	public void setBnkChllnUpldBy(long bnkChllnUpldBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bnkChllnUpldBy = bnkChllnUpldBy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfBnkChllnDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfBnkChllnDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfBnkChllnDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfBnkChllnDtlsImpl dgfBnkChllnDtlsImpl = new DgfBnkChllnDtlsImpl();

		dgfBnkChllnDtlsImpl.setBnkChllnId(getBnkChllnId());
		dgfBnkChllnDtlsImpl.setTrnPoNo(getTrnPoNo());
		dgfBnkChllnDtlsImpl.setPaymentStatus(getPaymentStatus());
		dgfBnkChllnDtlsImpl.setTrnAmount(getTrnAmount());
		dgfBnkChllnDtlsImpl.setPymntChllnDate(getPymntChllnDate());
		dgfBnkChllnDtlsImpl.setBnkChllnDocId(getBnkChllnDocId());
		dgfBnkChllnDtlsImpl.setBnkChllnUpldBy(getBnkChllnUpldBy());

		dgfBnkChllnDtlsImpl.resetOriginalValues();

		return dgfBnkChllnDtlsImpl;
	}

	@Override
	public DgfBnkChllnDtls cloneWithOriginalValues() {
		DgfBnkChllnDtlsImpl dgfBnkChllnDtlsImpl = new DgfBnkChllnDtlsImpl();

		dgfBnkChllnDtlsImpl.setBnkChllnId(
			this.<Long>getColumnOriginalValue("bnkChllnId"));
		dgfBnkChllnDtlsImpl.setTrnPoNo(
			this.<Long>getColumnOriginalValue("trnPoNo"));
		dgfBnkChllnDtlsImpl.setPaymentStatus(
			this.<Long>getColumnOriginalValue("paymentStatus"));
		dgfBnkChllnDtlsImpl.setTrnAmount(
			this.<Long>getColumnOriginalValue("trnAmount"));
		dgfBnkChllnDtlsImpl.setPymntChllnDate(
			this.<Date>getColumnOriginalValue("pymntChllnDate"));
		dgfBnkChllnDtlsImpl.setBnkChllnDocId(
			this.<Long>getColumnOriginalValue("bnkChllnDocId"));
		dgfBnkChllnDtlsImpl.setBnkChllnUpldBy(
			this.<Long>getColumnOriginalValue("bnkChllnUpldBy"));

		return dgfBnkChllnDtlsImpl;
	}

	@Override
	public int compareTo(DgfBnkChllnDtls dgfBnkChllnDtls) {
		long primaryKey = dgfBnkChllnDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfBnkChllnDtls)) {
			return false;
		}

		DgfBnkChllnDtls dgfBnkChllnDtls = (DgfBnkChllnDtls)object;

		long primaryKey = dgfBnkChllnDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfBnkChllnDtls> toCacheModel() {
		DgfBnkChllnDtlsCacheModel dgfBnkChllnDtlsCacheModel =
			new DgfBnkChllnDtlsCacheModel();

		dgfBnkChllnDtlsCacheModel.bnkChllnId = getBnkChllnId();

		dgfBnkChllnDtlsCacheModel.trnPoNo = getTrnPoNo();

		dgfBnkChllnDtlsCacheModel.paymentStatus = getPaymentStatus();

		dgfBnkChllnDtlsCacheModel.trnAmount = getTrnAmount();

		Date pymntChllnDate = getPymntChllnDate();

		if (pymntChllnDate != null) {
			dgfBnkChllnDtlsCacheModel.pymntChllnDate = pymntChllnDate.getTime();
		}
		else {
			dgfBnkChllnDtlsCacheModel.pymntChllnDate = Long.MIN_VALUE;
		}

		dgfBnkChllnDtlsCacheModel.bnkChllnDocId = getBnkChllnDocId();

		dgfBnkChllnDtlsCacheModel.bnkChllnUpldBy = getBnkChllnUpldBy();

		return dgfBnkChllnDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfBnkChllnDtls, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfBnkChllnDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfBnkChllnDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DgfBnkChllnDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfBnkChllnDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfBnkChllnDtls.class, ModelWrapper.class);

	}

	private long _bnkChllnId;
	private long _trnPoNo;
	private long _paymentStatus;
	private long _trnAmount;
	private Date _pymntChllnDate;
	private long _bnkChllnDocId;
	private long _bnkChllnUpldBy;

	public <T> T getColumnValue(String columnName) {
		Function<DgfBnkChllnDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfBnkChllnDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("bnkChllnId", _bnkChllnId);
		_columnOriginalValues.put("trnPoNo", _trnPoNo);
		_columnOriginalValues.put("paymentStatus", _paymentStatus);
		_columnOriginalValues.put("trnAmount", _trnAmount);
		_columnOriginalValues.put("pymntChllnDate", _pymntChllnDate);
		_columnOriginalValues.put("bnkChllnDocId", _bnkChllnDocId);
		_columnOriginalValues.put("bnkChllnUpldBy", _bnkChllnUpldBy);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("bnkChllnId", 1L);

		columnBitmasks.put("trnPoNo", 2L);

		columnBitmasks.put("paymentStatus", 4L);

		columnBitmasks.put("trnAmount", 8L);

		columnBitmasks.put("pymntChllnDate", 16L);

		columnBitmasks.put("bnkChllnDocId", 32L);

		columnBitmasks.put("bnkChllnUpldBy", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfBnkChllnDtls _escapedModel;

}