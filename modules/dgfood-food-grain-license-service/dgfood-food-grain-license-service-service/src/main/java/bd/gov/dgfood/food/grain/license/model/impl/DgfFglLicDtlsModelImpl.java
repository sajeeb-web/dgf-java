/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfFglLicDtls;
import bd.gov.dgfood.food.grain.license.model.DgfFglLicDtlsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfFglLicDtls service. Represents a row in the &quot;dgf_fgl_lic_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfFglLicDtlsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfFglLicDtlsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfFglLicDtlsImpl
 * @generated
 */
@JSON(strict = true)
public class DgfFglLicDtlsModelImpl
	extends BaseModelImpl<DgfFglLicDtls> implements DgfFglLicDtlsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf fgl lic dtls model instance should use the <code>DgfFglLicDtls</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_fgl_lic_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"fglLicPrimaryId", Types.BIGINT}, {"nationalId", Types.VARCHAR},
		{"fglPrePrimaryId", Types.BIGINT}, {"fglApplicationNo", Types.VARCHAR},
		{"foodgrainLicenseNo", Types.VARCHAR},
		{"foodgrainLicenseType", Types.VARCHAR},
		{"tradeLicenseNo", Types.VARCHAR},
		{"tradeLicenseExpiryDate", Types.TIMESTAMP},
		{"foodgrainLicenseIssueDate", Types.TIMESTAMP},
		{"foodgrainLicenseExpiryDate", Types.TIMESTAMP},
		{"foodgrainLicenseIssuedBy", Types.BIGINT},
		{"fglLicenseVersion", Types.BIGINT}, {"productType", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fglLicPrimaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fglPrePrimaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fglApplicationNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseIssueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseIssuedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fglLicenseVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productType", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_fgl_lic_dtls (fglLicPrimaryId LONG not null primary key,nationalId VARCHAR(75) null,fglPrePrimaryId LONG,fglApplicationNo VARCHAR(75) null,foodgrainLicenseNo VARCHAR(75) null,foodgrainLicenseType VARCHAR(75) null,tradeLicenseNo VARCHAR(75) null,tradeLicenseExpiryDate DATE null,foodgrainLicenseIssueDate DATE null,foodgrainLicenseExpiryDate DATE null,foodgrainLicenseIssuedBy LONG,fglLicenseVersion LONG,productType VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table dgf_fgl_lic_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfFglLicDtls.fglLicPrimaryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_fgl_lic_dtls.fglLicPrimaryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLAPPLICATIONNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLPREPRIMARYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FOODGRAINLICENSENO_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLLICPRIMARYID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfFglLicDtlsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fglLicPrimaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFglLicPrimaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fglLicPrimaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfFglLicDtls.class;
	}

	@Override
	public String getModelClassName() {
		return DgfFglLicDtls.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfFglLicDtls, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfFglLicDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfFglLicDtls, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfFglLicDtls)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfFglLicDtls, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfFglLicDtls, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfFglLicDtls)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfFglLicDtls, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfFglLicDtls, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DgfFglLicDtls, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DgfFglLicDtls, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfFglLicDtls, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DgfFglLicDtls, Object>>();
		Map<String, BiConsumer<DgfFglLicDtls, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DgfFglLicDtls, ?>>();

		attributeGetterFunctions.put(
			"fglLicPrimaryId", DgfFglLicDtls::getFglLicPrimaryId);
		attributeSetterBiConsumers.put(
			"fglLicPrimaryId",
			(BiConsumer<DgfFglLicDtls, Long>)DgfFglLicDtls::setFglLicPrimaryId);
		attributeGetterFunctions.put(
			"nationalId", DgfFglLicDtls::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<DgfFglLicDtls, String>)DgfFglLicDtls::setNationalId);
		attributeGetterFunctions.put(
			"fglPrePrimaryId", DgfFglLicDtls::getFglPrePrimaryId);
		attributeSetterBiConsumers.put(
			"fglPrePrimaryId",
			(BiConsumer<DgfFglLicDtls, Long>)DgfFglLicDtls::setFglPrePrimaryId);
		attributeGetterFunctions.put(
			"fglApplicationNo", DgfFglLicDtls::getFglApplicationNo);
		attributeSetterBiConsumers.put(
			"fglApplicationNo",
			(BiConsumer<DgfFglLicDtls, String>)
				DgfFglLicDtls::setFglApplicationNo);
		attributeGetterFunctions.put(
			"foodgrainLicenseNo", DgfFglLicDtls::getFoodgrainLicenseNo);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseNo",
			(BiConsumer<DgfFglLicDtls, String>)
				DgfFglLicDtls::setFoodgrainLicenseNo);
		attributeGetterFunctions.put(
			"foodgrainLicenseType", DgfFglLicDtls::getFoodgrainLicenseType);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseType",
			(BiConsumer<DgfFglLicDtls, String>)
				DgfFglLicDtls::setFoodgrainLicenseType);
		attributeGetterFunctions.put(
			"tradeLicenseNo", DgfFglLicDtls::getTradeLicenseNo);
		attributeSetterBiConsumers.put(
			"tradeLicenseNo",
			(BiConsumer<DgfFglLicDtls, String>)
				DgfFglLicDtls::setTradeLicenseNo);
		attributeGetterFunctions.put(
			"tradeLicenseExpiryDate", DgfFglLicDtls::getTradeLicenseExpiryDate);
		attributeSetterBiConsumers.put(
			"tradeLicenseExpiryDate",
			(BiConsumer<DgfFglLicDtls, Date>)
				DgfFglLicDtls::setTradeLicenseExpiryDate);
		attributeGetterFunctions.put(
			"foodgrainLicenseIssueDate",
			DgfFglLicDtls::getFoodgrainLicenseIssueDate);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseIssueDate",
			(BiConsumer<DgfFglLicDtls, Date>)
				DgfFglLicDtls::setFoodgrainLicenseIssueDate);
		attributeGetterFunctions.put(
			"foodgrainLicenseExpiryDate",
			DgfFglLicDtls::getFoodgrainLicenseExpiryDate);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseExpiryDate",
			(BiConsumer<DgfFglLicDtls, Date>)
				DgfFglLicDtls::setFoodgrainLicenseExpiryDate);
		attributeGetterFunctions.put(
			"foodgrainLicenseIssuedBy",
			DgfFglLicDtls::getFoodgrainLicenseIssuedBy);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseIssuedBy",
			(BiConsumer<DgfFglLicDtls, Long>)
				DgfFglLicDtls::setFoodgrainLicenseIssuedBy);
		attributeGetterFunctions.put(
			"fglLicenseVersion", DgfFglLicDtls::getFglLicenseVersion);
		attributeSetterBiConsumers.put(
			"fglLicenseVersion",
			(BiConsumer<DgfFglLicDtls, Long>)
				DgfFglLicDtls::setFglLicenseVersion);
		attributeGetterFunctions.put(
			"productType", DgfFglLicDtls::getProductType);
		attributeSetterBiConsumers.put(
			"productType",
			(BiConsumer<DgfFglLicDtls, String>)DgfFglLicDtls::setProductType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFglLicPrimaryId() {
		return _fglLicPrimaryId;
	}

	@Override
	public void setFglLicPrimaryId(long fglLicPrimaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglLicPrimaryId = fglLicPrimaryId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("nationalId");
	}

	@JSON
	@Override
	public long getFglPrePrimaryId() {
		return _fglPrePrimaryId;
	}

	@Override
	public void setFglPrePrimaryId(long fglPrePrimaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglPrePrimaryId = fglPrePrimaryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFglPrePrimaryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("fglPrePrimaryId"));
	}

	@JSON
	@Override
	public String getFglApplicationNo() {
		if (_fglApplicationNo == null) {
			return "";
		}
		else {
			return _fglApplicationNo;
		}
	}

	@Override
	public void setFglApplicationNo(String fglApplicationNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglApplicationNo = fglApplicationNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFglApplicationNo() {
		return getColumnOriginalValue("fglApplicationNo");
	}

	@JSON
	@Override
	public String getFoodgrainLicenseNo() {
		if (_foodgrainLicenseNo == null) {
			return "";
		}
		else {
			return _foodgrainLicenseNo;
		}
	}

	@Override
	public void setFoodgrainLicenseNo(String foodgrainLicenseNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseNo = foodgrainLicenseNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFoodgrainLicenseNo() {
		return getColumnOriginalValue("foodgrainLicenseNo");
	}

	@JSON
	@Override
	public String getFoodgrainLicenseType() {
		if (_foodgrainLicenseType == null) {
			return "";
		}
		else {
			return _foodgrainLicenseType;
		}
	}

	@Override
	public void setFoodgrainLicenseType(String foodgrainLicenseType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseType = foodgrainLicenseType;
	}

	@JSON
	@Override
	public String getTradeLicenseNo() {
		if (_tradeLicenseNo == null) {
			return "";
		}
		else {
			return _tradeLicenseNo;
		}
	}

	@Override
	public void setTradeLicenseNo(String tradeLicenseNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseNo = tradeLicenseNo;
	}

	@JSON
	@Override
	public Date getTradeLicenseExpiryDate() {
		return _tradeLicenseExpiryDate;
	}

	@Override
	public void setTradeLicenseExpiryDate(Date tradeLicenseExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseExpiryDate = tradeLicenseExpiryDate;
	}

	@JSON
	@Override
	public Date getFoodgrainLicenseIssueDate() {
		return _foodgrainLicenseIssueDate;
	}

	@Override
	public void setFoodgrainLicenseIssueDate(Date foodgrainLicenseIssueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseIssueDate = foodgrainLicenseIssueDate;
	}

	@JSON
	@Override
	public Date getFoodgrainLicenseExpiryDate() {
		return _foodgrainLicenseExpiryDate;
	}

	@Override
	public void setFoodgrainLicenseExpiryDate(Date foodgrainLicenseExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseExpiryDate = foodgrainLicenseExpiryDate;
	}

	@JSON
	@Override
	public long getFoodgrainLicenseIssuedBy() {
		return _foodgrainLicenseIssuedBy;
	}

	@Override
	public void setFoodgrainLicenseIssuedBy(long foodgrainLicenseIssuedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseIssuedBy = foodgrainLicenseIssuedBy;
	}

	@JSON
	@Override
	public long getFglLicenseVersion() {
		return _fglLicenseVersion;
	}

	@Override
	public void setFglLicenseVersion(long fglLicenseVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fglLicenseVersion = fglLicenseVersion;
	}

	@JSON
	@Override
	public String getProductType() {
		if (_productType == null) {
			return "";
		}
		else {
			return _productType;
		}
	}

	@Override
	public void setProductType(String productType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productType = productType;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfFglLicDtls.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfFglLicDtls toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfFglLicDtls>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfFglLicDtlsImpl dgfFglLicDtlsImpl = new DgfFglLicDtlsImpl();

		dgfFglLicDtlsImpl.setFglLicPrimaryId(getFglLicPrimaryId());
		dgfFglLicDtlsImpl.setNationalId(getNationalId());
		dgfFglLicDtlsImpl.setFglPrePrimaryId(getFglPrePrimaryId());
		dgfFglLicDtlsImpl.setFglApplicationNo(getFglApplicationNo());
		dgfFglLicDtlsImpl.setFoodgrainLicenseNo(getFoodgrainLicenseNo());
		dgfFglLicDtlsImpl.setFoodgrainLicenseType(getFoodgrainLicenseType());
		dgfFglLicDtlsImpl.setTradeLicenseNo(getTradeLicenseNo());
		dgfFglLicDtlsImpl.setTradeLicenseExpiryDate(
			getTradeLicenseExpiryDate());
		dgfFglLicDtlsImpl.setFoodgrainLicenseIssueDate(
			getFoodgrainLicenseIssueDate());
		dgfFglLicDtlsImpl.setFoodgrainLicenseExpiryDate(
			getFoodgrainLicenseExpiryDate());
		dgfFglLicDtlsImpl.setFoodgrainLicenseIssuedBy(
			getFoodgrainLicenseIssuedBy());
		dgfFglLicDtlsImpl.setFglLicenseVersion(getFglLicenseVersion());
		dgfFglLicDtlsImpl.setProductType(getProductType());

		dgfFglLicDtlsImpl.resetOriginalValues();

		return dgfFglLicDtlsImpl;
	}

	@Override
	public DgfFglLicDtls cloneWithOriginalValues() {
		DgfFglLicDtlsImpl dgfFglLicDtlsImpl = new DgfFglLicDtlsImpl();

		dgfFglLicDtlsImpl.setFglLicPrimaryId(
			this.<Long>getColumnOriginalValue("fglLicPrimaryId"));
		dgfFglLicDtlsImpl.setNationalId(
			this.<String>getColumnOriginalValue("nationalId"));
		dgfFglLicDtlsImpl.setFglPrePrimaryId(
			this.<Long>getColumnOriginalValue("fglPrePrimaryId"));
		dgfFglLicDtlsImpl.setFglApplicationNo(
			this.<String>getColumnOriginalValue("fglApplicationNo"));
		dgfFglLicDtlsImpl.setFoodgrainLicenseNo(
			this.<String>getColumnOriginalValue("foodgrainLicenseNo"));
		dgfFglLicDtlsImpl.setFoodgrainLicenseType(
			this.<String>getColumnOriginalValue("foodgrainLicenseType"));
		dgfFglLicDtlsImpl.setTradeLicenseNo(
			this.<String>getColumnOriginalValue("tradeLicenseNo"));
		dgfFglLicDtlsImpl.setTradeLicenseExpiryDate(
			this.<Date>getColumnOriginalValue("tradeLicenseExpiryDate"));
		dgfFglLicDtlsImpl.setFoodgrainLicenseIssueDate(
			this.<Date>getColumnOriginalValue("foodgrainLicenseIssueDate"));
		dgfFglLicDtlsImpl.setFoodgrainLicenseExpiryDate(
			this.<Date>getColumnOriginalValue("foodgrainLicenseExpiryDate"));
		dgfFglLicDtlsImpl.setFoodgrainLicenseIssuedBy(
			this.<Long>getColumnOriginalValue("foodgrainLicenseIssuedBy"));
		dgfFglLicDtlsImpl.setFglLicenseVersion(
			this.<Long>getColumnOriginalValue("fglLicenseVersion"));
		dgfFglLicDtlsImpl.setProductType(
			this.<String>getColumnOriginalValue("productType"));

		return dgfFglLicDtlsImpl;
	}

	@Override
	public int compareTo(DgfFglLicDtls dgfFglLicDtls) {
		long primaryKey = dgfFglLicDtls.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfFglLicDtls)) {
			return false;
		}

		DgfFglLicDtls dgfFglLicDtls = (DgfFglLicDtls)object;

		long primaryKey = dgfFglLicDtls.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfFglLicDtls> toCacheModel() {
		DgfFglLicDtlsCacheModel dgfFglLicDtlsCacheModel =
			new DgfFglLicDtlsCacheModel();

		dgfFglLicDtlsCacheModel.fglLicPrimaryId = getFglLicPrimaryId();

		dgfFglLicDtlsCacheModel.nationalId = getNationalId();

		String nationalId = dgfFglLicDtlsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			dgfFglLicDtlsCacheModel.nationalId = null;
		}

		dgfFglLicDtlsCacheModel.fglPrePrimaryId = getFglPrePrimaryId();

		dgfFglLicDtlsCacheModel.fglApplicationNo = getFglApplicationNo();

		String fglApplicationNo = dgfFglLicDtlsCacheModel.fglApplicationNo;

		if ((fglApplicationNo != null) && (fglApplicationNo.length() == 0)) {
			dgfFglLicDtlsCacheModel.fglApplicationNo = null;
		}

		dgfFglLicDtlsCacheModel.foodgrainLicenseNo = getFoodgrainLicenseNo();

		String foodgrainLicenseNo = dgfFglLicDtlsCacheModel.foodgrainLicenseNo;

		if ((foodgrainLicenseNo != null) &&
			(foodgrainLicenseNo.length() == 0)) {

			dgfFglLicDtlsCacheModel.foodgrainLicenseNo = null;
		}

		dgfFglLicDtlsCacheModel.foodgrainLicenseType =
			getFoodgrainLicenseType();

		String foodgrainLicenseType =
			dgfFglLicDtlsCacheModel.foodgrainLicenseType;

		if ((foodgrainLicenseType != null) &&
			(foodgrainLicenseType.length() == 0)) {

			dgfFglLicDtlsCacheModel.foodgrainLicenseType = null;
		}

		dgfFglLicDtlsCacheModel.tradeLicenseNo = getTradeLicenseNo();

		String tradeLicenseNo = dgfFglLicDtlsCacheModel.tradeLicenseNo;

		if ((tradeLicenseNo != null) && (tradeLicenseNo.length() == 0)) {
			dgfFglLicDtlsCacheModel.tradeLicenseNo = null;
		}

		Date tradeLicenseExpiryDate = getTradeLicenseExpiryDate();

		if (tradeLicenseExpiryDate != null) {
			dgfFglLicDtlsCacheModel.tradeLicenseExpiryDate =
				tradeLicenseExpiryDate.getTime();
		}
		else {
			dgfFglLicDtlsCacheModel.tradeLicenseExpiryDate = Long.MIN_VALUE;
		}

		Date foodgrainLicenseIssueDate = getFoodgrainLicenseIssueDate();

		if (foodgrainLicenseIssueDate != null) {
			dgfFglLicDtlsCacheModel.foodgrainLicenseIssueDate =
				foodgrainLicenseIssueDate.getTime();
		}
		else {
			dgfFglLicDtlsCacheModel.foodgrainLicenseIssueDate = Long.MIN_VALUE;
		}

		Date foodgrainLicenseExpiryDate = getFoodgrainLicenseExpiryDate();

		if (foodgrainLicenseExpiryDate != null) {
			dgfFglLicDtlsCacheModel.foodgrainLicenseExpiryDate =
				foodgrainLicenseExpiryDate.getTime();
		}
		else {
			dgfFglLicDtlsCacheModel.foodgrainLicenseExpiryDate = Long.MIN_VALUE;
		}

		dgfFglLicDtlsCacheModel.foodgrainLicenseIssuedBy =
			getFoodgrainLicenseIssuedBy();

		dgfFglLicDtlsCacheModel.fglLicenseVersion = getFglLicenseVersion();

		dgfFglLicDtlsCacheModel.productType = getProductType();

		String productType = dgfFglLicDtlsCacheModel.productType;

		if ((productType != null) && (productType.length() == 0)) {
			dgfFglLicDtlsCacheModel.productType = null;
		}

		return dgfFglLicDtlsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfFglLicDtls, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfFglLicDtls, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfFglLicDtls, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DgfFglLicDtls)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DgfFglLicDtls>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DgfFglLicDtls.class, ModelWrapper.class);

	}

	private long _fglLicPrimaryId;
	private String _nationalId;
	private long _fglPrePrimaryId;
	private String _fglApplicationNo;
	private String _foodgrainLicenseNo;
	private String _foodgrainLicenseType;
	private String _tradeLicenseNo;
	private Date _tradeLicenseExpiryDate;
	private Date _foodgrainLicenseIssueDate;
	private Date _foodgrainLicenseExpiryDate;
	private long _foodgrainLicenseIssuedBy;
	private long _fglLicenseVersion;
	private String _productType;

	public <T> T getColumnValue(String columnName) {
		Function<DgfFglLicDtls, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfFglLicDtls)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("fglLicPrimaryId", _fglLicPrimaryId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("fglPrePrimaryId", _fglPrePrimaryId);
		_columnOriginalValues.put("fglApplicationNo", _fglApplicationNo);
		_columnOriginalValues.put("foodgrainLicenseNo", _foodgrainLicenseNo);
		_columnOriginalValues.put(
			"foodgrainLicenseType", _foodgrainLicenseType);
		_columnOriginalValues.put("tradeLicenseNo", _tradeLicenseNo);
		_columnOriginalValues.put(
			"tradeLicenseExpiryDate", _tradeLicenseExpiryDate);
		_columnOriginalValues.put(
			"foodgrainLicenseIssueDate", _foodgrainLicenseIssueDate);
		_columnOriginalValues.put(
			"foodgrainLicenseExpiryDate", _foodgrainLicenseExpiryDate);
		_columnOriginalValues.put(
			"foodgrainLicenseIssuedBy", _foodgrainLicenseIssuedBy);
		_columnOriginalValues.put("fglLicenseVersion", _fglLicenseVersion);
		_columnOriginalValues.put("productType", _productType);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("fglLicPrimaryId", 1L);

		columnBitmasks.put("nationalId", 2L);

		columnBitmasks.put("fglPrePrimaryId", 4L);

		columnBitmasks.put("fglApplicationNo", 8L);

		columnBitmasks.put("foodgrainLicenseNo", 16L);

		columnBitmasks.put("foodgrainLicenseType", 32L);

		columnBitmasks.put("tradeLicenseNo", 64L);

		columnBitmasks.put("tradeLicenseExpiryDate", 128L);

		columnBitmasks.put("foodgrainLicenseIssueDate", 256L);

		columnBitmasks.put("foodgrainLicenseExpiryDate", 512L);

		columnBitmasks.put("foodgrainLicenseIssuedBy", 1024L);

		columnBitmasks.put("fglLicenseVersion", 2048L);

		columnBitmasks.put("productType", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfFglLicDtls _escapedModel;

}