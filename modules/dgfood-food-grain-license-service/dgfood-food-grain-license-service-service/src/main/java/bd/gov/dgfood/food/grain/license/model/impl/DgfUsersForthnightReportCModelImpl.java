/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.grain.license.model.impl;

import bd.gov.dgfood.food.grain.license.model.DgfUsersForthnightReportC;
import bd.gov.dgfood.food.grain.license.model.DgfUsersForthnightReportCModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DgfUsersForthnightReportC service. Represents a row in the &quot;dgf_users_fortnight_report_c&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DgfUsersForthnightReportCModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DgfUsersForthnightReportCImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DgfUsersForthnightReportCImpl
 * @generated
 */
@JSON(strict = true)
public class DgfUsersForthnightReportCModelImpl
	extends BaseModelImpl<DgfUsersForthnightReportC>
	implements DgfUsersForthnightReportCModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dgf users forthnight report c model instance should use the <code>DgfUsersForthnightReportC</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_users_fortnight_report_c";

	public static final Object[][] TABLE_COLUMNS = {
		{"reportId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"usernationalId", Types.VARCHAR}, {"screenName", Types.VARCHAR},
		{"fullName", Types.VARCHAR}, {"productType", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"product", Types.VARCHAR}, {"daterecipt", Types.TIMESTAMP},
		{"receivedQuantity", Types.INTEGER},
		{"receivedQuantityUnit", Types.VARCHAR},
		{"lastDateApprove", Types.TIMESTAMP}, {"unsoldQuantity", Types.INTEGER},
		{"unsolddunit", Types.VARCHAR}, {"reasonForBeingUnsold", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("reportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("usernationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("product", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("daterecipt", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("receivedQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("receivedQuantityUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastDateApprove", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("unsoldQuantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("unsolddunit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reasonForBeingUnsold", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_users_fortnight_report_c (reportId LONG not null primary key,userId LONG,usernationalId VARCHAR(75) null,screenName VARCHAR(75) null,fullName VARCHAR(75) null,productType VARCHAR(75) null,startDate DATE null,endDate DATE null,product VARCHAR(75) null,daterecipt DATE null,receivedQuantity INTEGER,receivedQuantityUnit VARCHAR(75) null,lastDateApprove DATE null,unsoldQuantity INTEGER,unsolddunit VARCHAR(75) null,reasonForBeingUnsold VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_users_fortnight_report_c";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dgfUsersForthnightReportC.reportId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_users_fortnight_report_c.reportId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SCREENNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNATIONALID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REPORTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DgfUsersForthnightReportCModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DgfUsersForthnightReportC.class;
	}

	@Override
	public String getModelClassName() {
		return DgfUsersForthnightReportC.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DgfUsersForthnightReportC, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DgfUsersForthnightReportC, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfUsersForthnightReportC, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DgfUsersForthnightReportC)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DgfUsersForthnightReportC, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DgfUsersForthnightReportC, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DgfUsersForthnightReportC)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DgfUsersForthnightReportC, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DgfUsersForthnightReportC, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<DgfUsersForthnightReportC, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<DgfUsersForthnightReportC, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<DgfUsersForthnightReportC, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DgfUsersForthnightReportC, Object>>();
		Map<String, BiConsumer<DgfUsersForthnightReportC, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DgfUsersForthnightReportC, ?>>();

		attributeGetterFunctions.put(
			"reportId", DgfUsersForthnightReportC::getReportId);
		attributeSetterBiConsumers.put(
			"reportId",
			(BiConsumer<DgfUsersForthnightReportC, Long>)
				DgfUsersForthnightReportC::setReportId);
		attributeGetterFunctions.put(
			"userId", DgfUsersForthnightReportC::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DgfUsersForthnightReportC, Long>)
				DgfUsersForthnightReportC::setUserId);
		attributeGetterFunctions.put(
			"usernationalId", DgfUsersForthnightReportC::getUsernationalId);
		attributeSetterBiConsumers.put(
			"usernationalId",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setUsernationalId);
		attributeGetterFunctions.put(
			"screenName", DgfUsersForthnightReportC::getScreenName);
		attributeSetterBiConsumers.put(
			"screenName",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setScreenName);
		attributeGetterFunctions.put(
			"fullName", DgfUsersForthnightReportC::getFullName);
		attributeSetterBiConsumers.put(
			"fullName",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setFullName);
		attributeGetterFunctions.put(
			"productType", DgfUsersForthnightReportC::getProductType);
		attributeSetterBiConsumers.put(
			"productType",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setProductType);
		attributeGetterFunctions.put(
			"startDate", DgfUsersForthnightReportC::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<DgfUsersForthnightReportC, Date>)
				DgfUsersForthnightReportC::setStartDate);
		attributeGetterFunctions.put(
			"endDate", DgfUsersForthnightReportC::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<DgfUsersForthnightReportC, Date>)
				DgfUsersForthnightReportC::setEndDate);
		attributeGetterFunctions.put(
			"product", DgfUsersForthnightReportC::getProduct);
		attributeSetterBiConsumers.put(
			"product",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setProduct);
		attributeGetterFunctions.put(
			"daterecipt", DgfUsersForthnightReportC::getDaterecipt);
		attributeSetterBiConsumers.put(
			"daterecipt",
			(BiConsumer<DgfUsersForthnightReportC, Date>)
				DgfUsersForthnightReportC::setDaterecipt);
		attributeGetterFunctions.put(
			"receivedQuantity", DgfUsersForthnightReportC::getReceivedQuantity);
		attributeSetterBiConsumers.put(
			"receivedQuantity",
			(BiConsumer<DgfUsersForthnightReportC, Integer>)
				DgfUsersForthnightReportC::setReceivedQuantity);
		attributeGetterFunctions.put(
			"receivedQuantityUnit",
			DgfUsersForthnightReportC::getReceivedQuantityUnit);
		attributeSetterBiConsumers.put(
			"receivedQuantityUnit",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setReceivedQuantityUnit);
		attributeGetterFunctions.put(
			"lastDateApprove", DgfUsersForthnightReportC::getLastDateApprove);
		attributeSetterBiConsumers.put(
			"lastDateApprove",
			(BiConsumer<DgfUsersForthnightReportC, Date>)
				DgfUsersForthnightReportC::setLastDateApprove);
		attributeGetterFunctions.put(
			"unsoldQuantity", DgfUsersForthnightReportC::getUnsoldQuantity);
		attributeSetterBiConsumers.put(
			"unsoldQuantity",
			(BiConsumer<DgfUsersForthnightReportC, Integer>)
				DgfUsersForthnightReportC::setUnsoldQuantity);
		attributeGetterFunctions.put(
			"unsolddunit", DgfUsersForthnightReportC::getUnsolddunit);
		attributeSetterBiConsumers.put(
			"unsolddunit",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setUnsolddunit);
		attributeGetterFunctions.put(
			"reasonForBeingUnsold",
			DgfUsersForthnightReportC::getReasonForBeingUnsold);
		attributeSetterBiConsumers.put(
			"reasonForBeingUnsold",
			(BiConsumer<DgfUsersForthnightReportC, String>)
				DgfUsersForthnightReportC::setReasonForBeingUnsold);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportId = reportId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUsernationalId() {
		if (_usernationalId == null) {
			return "";
		}
		else {
			return _usernationalId;
		}
	}

	@Override
	public void setUsernationalId(String usernationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usernationalId = usernationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUsernationalId() {
		return getColumnOriginalValue("usernationalId");
	}

	@JSON
	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return "";
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_screenName = screenName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalScreenName() {
		return getColumnOriginalValue("screenName");
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullName = fullName;
	}

	@JSON
	@Override
	public String getProductType() {
		if (_productType == null) {
			return "";
		}
		else {
			return _productType;
		}
	}

	@Override
	public void setProductType(String productType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productType = productType;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getProduct() {
		if (_product == null) {
			return "";
		}
		else {
			return _product;
		}
	}

	@Override
	public void setProduct(String product) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_product = product;
	}

	@JSON
	@Override
	public Date getDaterecipt() {
		return _daterecipt;
	}

	@Override
	public void setDaterecipt(Date daterecipt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_daterecipt = daterecipt;
	}

	@JSON
	@Override
	public int getReceivedQuantity() {
		return _receivedQuantity;
	}

	@Override
	public void setReceivedQuantity(int receivedQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivedQuantity = receivedQuantity;
	}

	@JSON
	@Override
	public String getReceivedQuantityUnit() {
		if (_receivedQuantityUnit == null) {
			return "";
		}
		else {
			return _receivedQuantityUnit;
		}
	}

	@Override
	public void setReceivedQuantityUnit(String receivedQuantityUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivedQuantityUnit = receivedQuantityUnit;
	}

	@JSON
	@Override
	public Date getLastDateApprove() {
		return _lastDateApprove;
	}

	@Override
	public void setLastDateApprove(Date lastDateApprove) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastDateApprove = lastDateApprove;
	}

	@JSON
	@Override
	public int getUnsoldQuantity() {
		return _unsoldQuantity;
	}

	@Override
	public void setUnsoldQuantity(int unsoldQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unsoldQuantity = unsoldQuantity;
	}

	@JSON
	@Override
	public String getUnsolddunit() {
		if (_unsolddunit == null) {
			return "";
		}
		else {
			return _unsolddunit;
		}
	}

	@Override
	public void setUnsolddunit(String unsolddunit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unsolddunit = unsolddunit;
	}

	@JSON
	@Override
	public String getReasonForBeingUnsold() {
		if (_reasonForBeingUnsold == null) {
			return "";
		}
		else {
			return _reasonForBeingUnsold;
		}
	}

	@Override
	public void setReasonForBeingUnsold(String reasonForBeingUnsold) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reasonForBeingUnsold = reasonForBeingUnsold;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DgfUsersForthnightReportC.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DgfUsersForthnightReportC toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DgfUsersForthnightReportC>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DgfUsersForthnightReportCImpl dgfUsersForthnightReportCImpl =
			new DgfUsersForthnightReportCImpl();

		dgfUsersForthnightReportCImpl.setReportId(getReportId());
		dgfUsersForthnightReportCImpl.setUserId(getUserId());
		dgfUsersForthnightReportCImpl.setUsernationalId(getUsernationalId());
		dgfUsersForthnightReportCImpl.setScreenName(getScreenName());
		dgfUsersForthnightReportCImpl.setFullName(getFullName());
		dgfUsersForthnightReportCImpl.setProductType(getProductType());
		dgfUsersForthnightReportCImpl.setStartDate(getStartDate());
		dgfUsersForthnightReportCImpl.setEndDate(getEndDate());
		dgfUsersForthnightReportCImpl.setProduct(getProduct());
		dgfUsersForthnightReportCImpl.setDaterecipt(getDaterecipt());
		dgfUsersForthnightReportCImpl.setReceivedQuantity(
			getReceivedQuantity());
		dgfUsersForthnightReportCImpl.setReceivedQuantityUnit(
			getReceivedQuantityUnit());
		dgfUsersForthnightReportCImpl.setLastDateApprove(getLastDateApprove());
		dgfUsersForthnightReportCImpl.setUnsoldQuantity(getUnsoldQuantity());
		dgfUsersForthnightReportCImpl.setUnsolddunit(getUnsolddunit());
		dgfUsersForthnightReportCImpl.setReasonForBeingUnsold(
			getReasonForBeingUnsold());

		dgfUsersForthnightReportCImpl.resetOriginalValues();

		return dgfUsersForthnightReportCImpl;
	}

	@Override
	public DgfUsersForthnightReportC cloneWithOriginalValues() {
		DgfUsersForthnightReportCImpl dgfUsersForthnightReportCImpl =
			new DgfUsersForthnightReportCImpl();

		dgfUsersForthnightReportCImpl.setReportId(
			this.<Long>getColumnOriginalValue("reportId"));
		dgfUsersForthnightReportCImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		dgfUsersForthnightReportCImpl.setUsernationalId(
			this.<String>getColumnOriginalValue("usernationalId"));
		dgfUsersForthnightReportCImpl.setScreenName(
			this.<String>getColumnOriginalValue("screenName"));
		dgfUsersForthnightReportCImpl.setFullName(
			this.<String>getColumnOriginalValue("fullName"));
		dgfUsersForthnightReportCImpl.setProductType(
			this.<String>getColumnOriginalValue("productType"));
		dgfUsersForthnightReportCImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		dgfUsersForthnightReportCImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		dgfUsersForthnightReportCImpl.setProduct(
			this.<String>getColumnOriginalValue("product"));
		dgfUsersForthnightReportCImpl.setDaterecipt(
			this.<Date>getColumnOriginalValue("daterecipt"));
		dgfUsersForthnightReportCImpl.setReceivedQuantity(
			this.<Integer>getColumnOriginalValue("receivedQuantity"));
		dgfUsersForthnightReportCImpl.setReceivedQuantityUnit(
			this.<String>getColumnOriginalValue("receivedQuantityUnit"));
		dgfUsersForthnightReportCImpl.setLastDateApprove(
			this.<Date>getColumnOriginalValue("lastDateApprove"));
		dgfUsersForthnightReportCImpl.setUnsoldQuantity(
			this.<Integer>getColumnOriginalValue("unsoldQuantity"));
		dgfUsersForthnightReportCImpl.setUnsolddunit(
			this.<String>getColumnOriginalValue("unsolddunit"));
		dgfUsersForthnightReportCImpl.setReasonForBeingUnsold(
			this.<String>getColumnOriginalValue("reasonForBeingUnsold"));

		return dgfUsersForthnightReportCImpl;
	}

	@Override
	public int compareTo(DgfUsersForthnightReportC dgfUsersForthnightReportC) {
		long primaryKey = dgfUsersForthnightReportC.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DgfUsersForthnightReportC)) {
			return false;
		}

		DgfUsersForthnightReportC dgfUsersForthnightReportC =
			(DgfUsersForthnightReportC)object;

		long primaryKey = dgfUsersForthnightReportC.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DgfUsersForthnightReportC> toCacheModel() {
		DgfUsersForthnightReportCCacheModel
			dgfUsersForthnightReportCCacheModel =
				new DgfUsersForthnightReportCCacheModel();

		dgfUsersForthnightReportCCacheModel.reportId = getReportId();

		dgfUsersForthnightReportCCacheModel.userId = getUserId();

		dgfUsersForthnightReportCCacheModel.usernationalId =
			getUsernationalId();

		String usernationalId =
			dgfUsersForthnightReportCCacheModel.usernationalId;

		if ((usernationalId != null) && (usernationalId.length() == 0)) {
			dgfUsersForthnightReportCCacheModel.usernationalId = null;
		}

		dgfUsersForthnightReportCCacheModel.screenName = getScreenName();

		String screenName = dgfUsersForthnightReportCCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			dgfUsersForthnightReportCCacheModel.screenName = null;
		}

		dgfUsersForthnightReportCCacheModel.fullName = getFullName();

		String fullName = dgfUsersForthnightReportCCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			dgfUsersForthnightReportCCacheModel.fullName = null;
		}

		dgfUsersForthnightReportCCacheModel.productType = getProductType();

		String productType = dgfUsersForthnightReportCCacheModel.productType;

		if ((productType != null) && (productType.length() == 0)) {
			dgfUsersForthnightReportCCacheModel.productType = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			dgfUsersForthnightReportCCacheModel.startDate = startDate.getTime();
		}
		else {
			dgfUsersForthnightReportCCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			dgfUsersForthnightReportCCacheModel.endDate = endDate.getTime();
		}
		else {
			dgfUsersForthnightReportCCacheModel.endDate = Long.MIN_VALUE;
		}

		dgfUsersForthnightReportCCacheModel.product = getProduct();

		String product = dgfUsersForthnightReportCCacheModel.product;

		if ((product != null) && (product.length() == 0)) {
			dgfUsersForthnightReportCCacheModel.product = null;
		}

		Date daterecipt = getDaterecipt();

		if (daterecipt != null) {
			dgfUsersForthnightReportCCacheModel.daterecipt =
				daterecipt.getTime();
		}
		else {
			dgfUsersForthnightReportCCacheModel.daterecipt = Long.MIN_VALUE;
		}

		dgfUsersForthnightReportCCacheModel.receivedQuantity =
			getReceivedQuantity();

		dgfUsersForthnightReportCCacheModel.receivedQuantityUnit =
			getReceivedQuantityUnit();

		String receivedQuantityUnit =
			dgfUsersForthnightReportCCacheModel.receivedQuantityUnit;

		if ((receivedQuantityUnit != null) &&
			(receivedQuantityUnit.length() == 0)) {

			dgfUsersForthnightReportCCacheModel.receivedQuantityUnit = null;
		}

		Date lastDateApprove = getLastDateApprove();

		if (lastDateApprove != null) {
			dgfUsersForthnightReportCCacheModel.lastDateApprove =
				lastDateApprove.getTime();
		}
		else {
			dgfUsersForthnightReportCCacheModel.lastDateApprove =
				Long.MIN_VALUE;
		}

		dgfUsersForthnightReportCCacheModel.unsoldQuantity =
			getUnsoldQuantity();

		dgfUsersForthnightReportCCacheModel.unsolddunit = getUnsolddunit();

		String unsolddunit = dgfUsersForthnightReportCCacheModel.unsolddunit;

		if ((unsolddunit != null) && (unsolddunit.length() == 0)) {
			dgfUsersForthnightReportCCacheModel.unsolddunit = null;
		}

		dgfUsersForthnightReportCCacheModel.reasonForBeingUnsold =
			getReasonForBeingUnsold();

		String reasonForBeingUnsold =
			dgfUsersForthnightReportCCacheModel.reasonForBeingUnsold;

		if ((reasonForBeingUnsold != null) &&
			(reasonForBeingUnsold.length() == 0)) {

			dgfUsersForthnightReportCCacheModel.reasonForBeingUnsold = null;
		}

		return dgfUsersForthnightReportCCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DgfUsersForthnightReportC, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DgfUsersForthnightReportC, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DgfUsersForthnightReportC, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DgfUsersForthnightReportC)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, DgfUsersForthnightReportC>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						DgfUsersForthnightReportC.class, ModelWrapper.class);

	}

	private long _reportId;
	private long _userId;
	private String _usernationalId;
	private String _screenName;
	private String _fullName;
	private String _productType;
	private Date _startDate;
	private Date _endDate;
	private String _product;
	private Date _daterecipt;
	private int _receivedQuantity;
	private String _receivedQuantityUnit;
	private Date _lastDateApprove;
	private int _unsoldQuantity;
	private String _unsolddunit;
	private String _reasonForBeingUnsold;

	public <T> T getColumnValue(String columnName) {
		Function<DgfUsersForthnightReportC, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DgfUsersForthnightReportC)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("reportId", _reportId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("usernationalId", _usernationalId);
		_columnOriginalValues.put("screenName", _screenName);
		_columnOriginalValues.put("fullName", _fullName);
		_columnOriginalValues.put("productType", _productType);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("product", _product);
		_columnOriginalValues.put("daterecipt", _daterecipt);
		_columnOriginalValues.put("receivedQuantity", _receivedQuantity);
		_columnOriginalValues.put(
			"receivedQuantityUnit", _receivedQuantityUnit);
		_columnOriginalValues.put("lastDateApprove", _lastDateApprove);
		_columnOriginalValues.put("unsoldQuantity", _unsoldQuantity);
		_columnOriginalValues.put("unsolddunit", _unsolddunit);
		_columnOriginalValues.put(
			"reasonForBeingUnsold", _reasonForBeingUnsold);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("reportId", 1L);

		columnBitmasks.put("userId", 2L);

		columnBitmasks.put("usernationalId", 4L);

		columnBitmasks.put("screenName", 8L);

		columnBitmasks.put("fullName", 16L);

		columnBitmasks.put("productType", 32L);

		columnBitmasks.put("startDate", 64L);

		columnBitmasks.put("endDate", 128L);

		columnBitmasks.put("product", 256L);

		columnBitmasks.put("daterecipt", 512L);

		columnBitmasks.put("receivedQuantity", 1024L);

		columnBitmasks.put("receivedQuantityUnit", 2048L);

		columnBitmasks.put("lastDateApprove", 4096L);

		columnBitmasks.put("unsoldQuantity", 8192L);

		columnBitmasks.put("unsolddunit", 16384L);

		columnBitmasks.put("reasonForBeingUnsold", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DgfUsersForthnightReportC _escapedModel;

}