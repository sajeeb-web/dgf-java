/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.friendly.program.model.impl;

import bd.gov.dgfood.food.friendly.program.model.FfpbDetails;
import bd.gov.dgfood.food.friendly.program.model.FfpbDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FfpbDetails service. Represents a row in the &quot;dgf_ffpb_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FfpbDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FfpbDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FfpbDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class FfpbDetailsModelImpl
	extends BaseModelImpl<FfpbDetails> implements FfpbDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ffpb details model instance should use the <code>FfpbDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_ffpb_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"ffpRegstrId", Types.BIGINT}, {"nationalId", Types.BIGINT},
		{"dlrRegNo", Types.BIGINT}, {"ffpCardNo", Types.VARCHAR},
		{"dateOfBirth", Types.TIMESTAMP}, {"mobileNo", Types.VARCHAR},
		{"emialId", Types.VARCHAR}, {"maritalStatus", Types.BIGINT},
		{"gender", Types.BIGINT}, {"spouseNid", Types.BIGINT},
		{"prstAddrRegion", Types.VARCHAR}, {"prstAddrDisrict", Types.VARCHAR},
		{"prstAddrUpzilla", Types.VARCHAR}, {"prstAddrUnion", Types.VARCHAR},
		{"prstAddrVillage", Types.VARCHAR}, {"prstAddrWard", Types.VARCHAR},
		{"prstAddrZip", Types.BIGINT}, {"prstAddrPstoffc", Types.BIGINT},
		{"prstAddrHoseaddr", Types.VARCHAR}, {"ffpApplCrtdBy", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"ffpApplMdfyBy", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"applApprejCmnts", Types.VARCHAR},
		{"ffpbApplStatus", Types.BIGINT}, {"version", Types.FLOAT},
		{"status", Types.BIGINT}, {"statusByUserId", Types.BIGINT},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ffpRegstrId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlrRegNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ffpCardNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("mobileNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emialId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gender", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("spouseNid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("prstAddrRegion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prstAddrDisrict", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prstAddrUpzilla", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prstAddrUnion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prstAddrVillage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prstAddrWard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prstAddrZip", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("prstAddrPstoffc", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("prstAddrHoseaddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ffpApplCrtdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ffpApplMdfyBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applApprejCmnts", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ffpbApplStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_ffpb_details (ffpRegstrId LONG not null primary key,nationalId LONG,dlrRegNo LONG,ffpCardNo VARCHAR(30) null,dateOfBirth DATE null,mobileNo VARCHAR(12) null,emialId VARCHAR(30) null,maritalStatus LONG,gender LONG,spouseNid LONG,prstAddrRegion VARCHAR(5) null,prstAddrDisrict VARCHAR(5) null,prstAddrUpzilla VARCHAR(5) null,prstAddrUnion VARCHAR(5) null,prstAddrVillage VARCHAR(30) null,prstAddrWard VARCHAR(30) null,prstAddrZip LONG,prstAddrPstoffc LONG,prstAddrHoseaddr VARCHAR(75) null,ffpApplCrtdBy LONG,createDate DATE null,ffpApplMdfyBy LONG,modifiedDate DATE null,groupId LONG,companyId LONG,applApprejCmnts VARCHAR(50) null,ffpbApplStatus LONG,version DOUBLE,status LONG,statusByUserId LONG,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table dgf_ffpb_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ffpbDetails.ffpRegstrId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_ffpb_details.ffpRegstrId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FFPREGSTRID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MOBILENO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FfpbDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ffpRegstrId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFfpRegstrId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ffpRegstrId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FfpbDetails.class;
	}

	@Override
	public String getModelClassName() {
		return FfpbDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FfpbDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FfpbDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FfpbDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FfpbDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FfpbDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FfpbDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FfpbDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FfpbDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FfpbDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FfpbDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FfpbDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FfpbDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FfpbDetails, Object>>();
		Map<String, BiConsumer<FfpbDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FfpbDetails, ?>>();

		attributeGetterFunctions.put(
			"ffpRegstrId", FfpbDetails::getFfpRegstrId);
		attributeSetterBiConsumers.put(
			"ffpRegstrId",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setFfpRegstrId);
		attributeGetterFunctions.put("nationalId", FfpbDetails::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setNationalId);
		attributeGetterFunctions.put("dlrRegNo", FfpbDetails::getDlrRegNo);
		attributeSetterBiConsumers.put(
			"dlrRegNo",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setDlrRegNo);
		attributeGetterFunctions.put("ffpCardNo", FfpbDetails::getFfpCardNo);
		attributeSetterBiConsumers.put(
			"ffpCardNo",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setFfpCardNo);
		attributeGetterFunctions.put(
			"dateOfBirth", FfpbDetails::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth",
			(BiConsumer<FfpbDetails, Date>)FfpbDetails::setDateOfBirth);
		attributeGetterFunctions.put("mobileNo", FfpbDetails::getMobileNo);
		attributeSetterBiConsumers.put(
			"mobileNo",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setMobileNo);
		attributeGetterFunctions.put("emialId", FfpbDetails::getEmialId);
		attributeSetterBiConsumers.put(
			"emialId",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setEmialId);
		attributeGetterFunctions.put(
			"maritalStatus", FfpbDetails::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setMaritalStatus);
		attributeGetterFunctions.put("gender", FfpbDetails::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<FfpbDetails, Long>)FfpbDetails::setGender);
		attributeGetterFunctions.put("spouseNid", FfpbDetails::getSpouseNid);
		attributeSetterBiConsumers.put(
			"spouseNid",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setSpouseNid);
		attributeGetterFunctions.put(
			"prstAddrRegion", FfpbDetails::getPrstAddrRegion);
		attributeSetterBiConsumers.put(
			"prstAddrRegion",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setPrstAddrRegion);
		attributeGetterFunctions.put(
			"prstAddrDisrict", FfpbDetails::getPrstAddrDisrict);
		attributeSetterBiConsumers.put(
			"prstAddrDisrict",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setPrstAddrDisrict);
		attributeGetterFunctions.put(
			"prstAddrUpzilla", FfpbDetails::getPrstAddrUpzilla);
		attributeSetterBiConsumers.put(
			"prstAddrUpzilla",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setPrstAddrUpzilla);
		attributeGetterFunctions.put(
			"prstAddrUnion", FfpbDetails::getPrstAddrUnion);
		attributeSetterBiConsumers.put(
			"prstAddrUnion",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setPrstAddrUnion);
		attributeGetterFunctions.put(
			"prstAddrVillage", FfpbDetails::getPrstAddrVillage);
		attributeSetterBiConsumers.put(
			"prstAddrVillage",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setPrstAddrVillage);
		attributeGetterFunctions.put(
			"prstAddrWard", FfpbDetails::getPrstAddrWard);
		attributeSetterBiConsumers.put(
			"prstAddrWard",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setPrstAddrWard);
		attributeGetterFunctions.put(
			"prstAddrZip", FfpbDetails::getPrstAddrZip);
		attributeSetterBiConsumers.put(
			"prstAddrZip",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setPrstAddrZip);
		attributeGetterFunctions.put(
			"prstAddrPstoffc", FfpbDetails::getPrstAddrPstoffc);
		attributeSetterBiConsumers.put(
			"prstAddrPstoffc",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setPrstAddrPstoffc);
		attributeGetterFunctions.put(
			"prstAddrHoseaddr", FfpbDetails::getPrstAddrHoseaddr);
		attributeSetterBiConsumers.put(
			"prstAddrHoseaddr",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setPrstAddrHoseaddr);
		attributeGetterFunctions.put(
			"ffpApplCrtdBy", FfpbDetails::getFfpApplCrtdBy);
		attributeSetterBiConsumers.put(
			"ffpApplCrtdBy",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setFfpApplCrtdBy);
		attributeGetterFunctions.put("createDate", FfpbDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FfpbDetails, Date>)FfpbDetails::setCreateDate);
		attributeGetterFunctions.put(
			"ffpApplMdfyBy", FfpbDetails::getFfpApplMdfyBy);
		attributeSetterBiConsumers.put(
			"ffpApplMdfyBy",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setFfpApplMdfyBy);
		attributeGetterFunctions.put(
			"modifiedDate", FfpbDetails::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FfpbDetails, Date>)FfpbDetails::setModifiedDate);
		attributeGetterFunctions.put("groupId", FfpbDetails::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<FfpbDetails, Long>)FfpbDetails::setGroupId);
		attributeGetterFunctions.put("companyId", FfpbDetails::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setCompanyId);
		attributeGetterFunctions.put(
			"applApprejCmnts", FfpbDetails::getApplApprejCmnts);
		attributeSetterBiConsumers.put(
			"applApprejCmnts",
			(BiConsumer<FfpbDetails, String>)FfpbDetails::setApplApprejCmnts);
		attributeGetterFunctions.put(
			"ffpbApplStatus", FfpbDetails::getFfpbApplStatus);
		attributeSetterBiConsumers.put(
			"ffpbApplStatus",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setFfpbApplStatus);
		attributeGetterFunctions.put("version", FfpbDetails::getVersion);
		attributeSetterBiConsumers.put(
			"version", (BiConsumer<FfpbDetails, Float>)FfpbDetails::setVersion);
		attributeGetterFunctions.put("status", FfpbDetails::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<FfpbDetails, Long>)FfpbDetails::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FfpbDetails::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FfpbDetails, Long>)FfpbDetails::setStatusByUserId);
		attributeGetterFunctions.put("statusDate", FfpbDetails::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FfpbDetails, Date>)FfpbDetails::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFfpRegstrId() {
		return _ffpRegstrId;
	}

	@Override
	public void setFfpRegstrId(long ffpRegstrId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ffpRegstrId = ffpRegstrId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFfpRegstrId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ffpRegstrId"));
	}

	@JSON
	@Override
	public long getNationalId() {
		return _nationalId;
	}

	@Override
	public void setNationalId(long nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNationalId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("nationalId"));
	}

	@JSON
	@Override
	public long getDlrRegNo() {
		return _dlrRegNo;
	}

	@Override
	public void setDlrRegNo(long dlrRegNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegNo = dlrRegNo;
	}

	@JSON
	@Override
	public String getFfpCardNo() {
		if (_ffpCardNo == null) {
			return "";
		}
		else {
			return _ffpCardNo;
		}
	}

	@Override
	public void setFfpCardNo(String ffpCardNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ffpCardNo = ffpCardNo;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public String getMobileNo() {
		if (_mobileNo == null) {
			return "";
		}
		else {
			return _mobileNo;
		}
	}

	@Override
	public void setMobileNo(String mobileNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNo = mobileNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalMobileNo() {
		return getColumnOriginalValue("mobileNo");
	}

	@JSON
	@Override
	public String getEmialId() {
		if (_emialId == null) {
			return "";
		}
		else {
			return _emialId;
		}
	}

	@Override
	public void setEmialId(String emialId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emialId = emialId;
	}

	@JSON
	@Override
	public long getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(long maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public long getGender() {
		return _gender;
	}

	@Override
	public void setGender(long gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public long getSpouseNid() {
		return _spouseNid;
	}

	@Override
	public void setSpouseNid(long spouseNid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseNid = spouseNid;
	}

	@JSON
	@Override
	public String getPrstAddrRegion() {
		if (_prstAddrRegion == null) {
			return "";
		}
		else {
			return _prstAddrRegion;
		}
	}

	@Override
	public void setPrstAddrRegion(String prstAddrRegion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrRegion = prstAddrRegion;
	}

	@JSON
	@Override
	public String getPrstAddrDisrict() {
		if (_prstAddrDisrict == null) {
			return "";
		}
		else {
			return _prstAddrDisrict;
		}
	}

	@Override
	public void setPrstAddrDisrict(String prstAddrDisrict) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrDisrict = prstAddrDisrict;
	}

	@JSON
	@Override
	public String getPrstAddrUpzilla() {
		if (_prstAddrUpzilla == null) {
			return "";
		}
		else {
			return _prstAddrUpzilla;
		}
	}

	@Override
	public void setPrstAddrUpzilla(String prstAddrUpzilla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrUpzilla = prstAddrUpzilla;
	}

	@JSON
	@Override
	public String getPrstAddrUnion() {
		if (_prstAddrUnion == null) {
			return "";
		}
		else {
			return _prstAddrUnion;
		}
	}

	@Override
	public void setPrstAddrUnion(String prstAddrUnion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrUnion = prstAddrUnion;
	}

	@JSON
	@Override
	public String getPrstAddrVillage() {
		if (_prstAddrVillage == null) {
			return "";
		}
		else {
			return _prstAddrVillage;
		}
	}

	@Override
	public void setPrstAddrVillage(String prstAddrVillage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrVillage = prstAddrVillage;
	}

	@JSON
	@Override
	public String getPrstAddrWard() {
		if (_prstAddrWard == null) {
			return "";
		}
		else {
			return _prstAddrWard;
		}
	}

	@Override
	public void setPrstAddrWard(String prstAddrWard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrWard = prstAddrWard;
	}

	@JSON
	@Override
	public long getPrstAddrZip() {
		return _prstAddrZip;
	}

	@Override
	public void setPrstAddrZip(long prstAddrZip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrZip = prstAddrZip;
	}

	@JSON
	@Override
	public long getPrstAddrPstoffc() {
		return _prstAddrPstoffc;
	}

	@Override
	public void setPrstAddrPstoffc(long prstAddrPstoffc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrPstoffc = prstAddrPstoffc;
	}

	@JSON
	@Override
	public String getPrstAddrHoseaddr() {
		if (_prstAddrHoseaddr == null) {
			return "";
		}
		else {
			return _prstAddrHoseaddr;
		}
	}

	@Override
	public void setPrstAddrHoseaddr(String prstAddrHoseaddr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prstAddrHoseaddr = prstAddrHoseaddr;
	}

	@JSON
	@Override
	public long getFfpApplCrtdBy() {
		return _ffpApplCrtdBy;
	}

	@Override
	public void setFfpApplCrtdBy(long ffpApplCrtdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ffpApplCrtdBy = ffpApplCrtdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getFfpApplMdfyBy() {
		return _ffpApplMdfyBy;
	}

	@Override
	public void setFfpApplMdfyBy(long ffpApplMdfyBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ffpApplMdfyBy = ffpApplMdfyBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public String getApplApprejCmnts() {
		if (_applApprejCmnts == null) {
			return "";
		}
		else {
			return _applApprejCmnts;
		}
	}

	@Override
	public void setApplApprejCmnts(String applApprejCmnts) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applApprejCmnts = applApprejCmnts;
	}

	@JSON
	@Override
	public long getFfpbApplStatus() {
		return _ffpbApplStatus;
	}

	@Override
	public void setFfpbApplStatus(long ffpbApplStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ffpbApplStatus = ffpbApplStatus;
	}

	@JSON
	@Override
	public float getVersion() {
		return _version;
	}

	@Override
	public void setVersion(float version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FfpbDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FfpbDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FfpbDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FfpbDetailsImpl ffpbDetailsImpl = new FfpbDetailsImpl();

		ffpbDetailsImpl.setFfpRegstrId(getFfpRegstrId());
		ffpbDetailsImpl.setNationalId(getNationalId());
		ffpbDetailsImpl.setDlrRegNo(getDlrRegNo());
		ffpbDetailsImpl.setFfpCardNo(getFfpCardNo());
		ffpbDetailsImpl.setDateOfBirth(getDateOfBirth());
		ffpbDetailsImpl.setMobileNo(getMobileNo());
		ffpbDetailsImpl.setEmialId(getEmialId());
		ffpbDetailsImpl.setMaritalStatus(getMaritalStatus());
		ffpbDetailsImpl.setGender(getGender());
		ffpbDetailsImpl.setSpouseNid(getSpouseNid());
		ffpbDetailsImpl.setPrstAddrRegion(getPrstAddrRegion());
		ffpbDetailsImpl.setPrstAddrDisrict(getPrstAddrDisrict());
		ffpbDetailsImpl.setPrstAddrUpzilla(getPrstAddrUpzilla());
		ffpbDetailsImpl.setPrstAddrUnion(getPrstAddrUnion());
		ffpbDetailsImpl.setPrstAddrVillage(getPrstAddrVillage());
		ffpbDetailsImpl.setPrstAddrWard(getPrstAddrWard());
		ffpbDetailsImpl.setPrstAddrZip(getPrstAddrZip());
		ffpbDetailsImpl.setPrstAddrPstoffc(getPrstAddrPstoffc());
		ffpbDetailsImpl.setPrstAddrHoseaddr(getPrstAddrHoseaddr());
		ffpbDetailsImpl.setFfpApplCrtdBy(getFfpApplCrtdBy());
		ffpbDetailsImpl.setCreateDate(getCreateDate());
		ffpbDetailsImpl.setFfpApplMdfyBy(getFfpApplMdfyBy());
		ffpbDetailsImpl.setModifiedDate(getModifiedDate());
		ffpbDetailsImpl.setGroupId(getGroupId());
		ffpbDetailsImpl.setCompanyId(getCompanyId());
		ffpbDetailsImpl.setApplApprejCmnts(getApplApprejCmnts());
		ffpbDetailsImpl.setFfpbApplStatus(getFfpbApplStatus());
		ffpbDetailsImpl.setVersion(getVersion());
		ffpbDetailsImpl.setStatus(getStatus());
		ffpbDetailsImpl.setStatusByUserId(getStatusByUserId());
		ffpbDetailsImpl.setStatusDate(getStatusDate());

		ffpbDetailsImpl.resetOriginalValues();

		return ffpbDetailsImpl;
	}

	@Override
	public FfpbDetails cloneWithOriginalValues() {
		FfpbDetailsImpl ffpbDetailsImpl = new FfpbDetailsImpl();

		ffpbDetailsImpl.setFfpRegstrId(
			this.<Long>getColumnOriginalValue("ffpRegstrId"));
		ffpbDetailsImpl.setNationalId(
			this.<Long>getColumnOriginalValue("nationalId"));
		ffpbDetailsImpl.setDlrRegNo(
			this.<Long>getColumnOriginalValue("dlrRegNo"));
		ffpbDetailsImpl.setFfpCardNo(
			this.<String>getColumnOriginalValue("ffpCardNo"));
		ffpbDetailsImpl.setDateOfBirth(
			this.<Date>getColumnOriginalValue("dateOfBirth"));
		ffpbDetailsImpl.setMobileNo(
			this.<String>getColumnOriginalValue("mobileNo"));
		ffpbDetailsImpl.setEmialId(
			this.<String>getColumnOriginalValue("emialId"));
		ffpbDetailsImpl.setMaritalStatus(
			this.<Long>getColumnOriginalValue("maritalStatus"));
		ffpbDetailsImpl.setGender(this.<Long>getColumnOriginalValue("gender"));
		ffpbDetailsImpl.setSpouseNid(
			this.<Long>getColumnOriginalValue("spouseNid"));
		ffpbDetailsImpl.setPrstAddrRegion(
			this.<String>getColumnOriginalValue("prstAddrRegion"));
		ffpbDetailsImpl.setPrstAddrDisrict(
			this.<String>getColumnOriginalValue("prstAddrDisrict"));
		ffpbDetailsImpl.setPrstAddrUpzilla(
			this.<String>getColumnOriginalValue("prstAddrUpzilla"));
		ffpbDetailsImpl.setPrstAddrUnion(
			this.<String>getColumnOriginalValue("prstAddrUnion"));
		ffpbDetailsImpl.setPrstAddrVillage(
			this.<String>getColumnOriginalValue("prstAddrVillage"));
		ffpbDetailsImpl.setPrstAddrWard(
			this.<String>getColumnOriginalValue("prstAddrWard"));
		ffpbDetailsImpl.setPrstAddrZip(
			this.<Long>getColumnOriginalValue("prstAddrZip"));
		ffpbDetailsImpl.setPrstAddrPstoffc(
			this.<Long>getColumnOriginalValue("prstAddrPstoffc"));
		ffpbDetailsImpl.setPrstAddrHoseaddr(
			this.<String>getColumnOriginalValue("prstAddrHoseaddr"));
		ffpbDetailsImpl.setFfpApplCrtdBy(
			this.<Long>getColumnOriginalValue("ffpApplCrtdBy"));
		ffpbDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ffpbDetailsImpl.setFfpApplMdfyBy(
			this.<Long>getColumnOriginalValue("ffpApplMdfyBy"));
		ffpbDetailsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ffpbDetailsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ffpbDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ffpbDetailsImpl.setApplApprejCmnts(
			this.<String>getColumnOriginalValue("applApprejCmnts"));
		ffpbDetailsImpl.setFfpbApplStatus(
			this.<Long>getColumnOriginalValue("ffpbApplStatus"));
		ffpbDetailsImpl.setVersion(
			this.<Float>getColumnOriginalValue("version"));
		ffpbDetailsImpl.setStatus(this.<Long>getColumnOriginalValue("status"));
		ffpbDetailsImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		ffpbDetailsImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return ffpbDetailsImpl;
	}

	@Override
	public int compareTo(FfpbDetails ffpbDetails) {
		long primaryKey = ffpbDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FfpbDetails)) {
			return false;
		}

		FfpbDetails ffpbDetails = (FfpbDetails)object;

		long primaryKey = ffpbDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FfpbDetails> toCacheModel() {
		FfpbDetailsCacheModel ffpbDetailsCacheModel =
			new FfpbDetailsCacheModel();

		ffpbDetailsCacheModel.ffpRegstrId = getFfpRegstrId();

		ffpbDetailsCacheModel.nationalId = getNationalId();

		ffpbDetailsCacheModel.dlrRegNo = getDlrRegNo();

		ffpbDetailsCacheModel.ffpCardNo = getFfpCardNo();

		String ffpCardNo = ffpbDetailsCacheModel.ffpCardNo;

		if ((ffpCardNo != null) && (ffpCardNo.length() == 0)) {
			ffpbDetailsCacheModel.ffpCardNo = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			ffpbDetailsCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			ffpbDetailsCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		ffpbDetailsCacheModel.mobileNo = getMobileNo();

		String mobileNo = ffpbDetailsCacheModel.mobileNo;

		if ((mobileNo != null) && (mobileNo.length() == 0)) {
			ffpbDetailsCacheModel.mobileNo = null;
		}

		ffpbDetailsCacheModel.emialId = getEmialId();

		String emialId = ffpbDetailsCacheModel.emialId;

		if ((emialId != null) && (emialId.length() == 0)) {
			ffpbDetailsCacheModel.emialId = null;
		}

		ffpbDetailsCacheModel.maritalStatus = getMaritalStatus();

		ffpbDetailsCacheModel.gender = getGender();

		ffpbDetailsCacheModel.spouseNid = getSpouseNid();

		ffpbDetailsCacheModel.prstAddrRegion = getPrstAddrRegion();

		String prstAddrRegion = ffpbDetailsCacheModel.prstAddrRegion;

		if ((prstAddrRegion != null) && (prstAddrRegion.length() == 0)) {
			ffpbDetailsCacheModel.prstAddrRegion = null;
		}

		ffpbDetailsCacheModel.prstAddrDisrict = getPrstAddrDisrict();

		String prstAddrDisrict = ffpbDetailsCacheModel.prstAddrDisrict;

		if ((prstAddrDisrict != null) && (prstAddrDisrict.length() == 0)) {
			ffpbDetailsCacheModel.prstAddrDisrict = null;
		}

		ffpbDetailsCacheModel.prstAddrUpzilla = getPrstAddrUpzilla();

		String prstAddrUpzilla = ffpbDetailsCacheModel.prstAddrUpzilla;

		if ((prstAddrUpzilla != null) && (prstAddrUpzilla.length() == 0)) {
			ffpbDetailsCacheModel.prstAddrUpzilla = null;
		}

		ffpbDetailsCacheModel.prstAddrUnion = getPrstAddrUnion();

		String prstAddrUnion = ffpbDetailsCacheModel.prstAddrUnion;

		if ((prstAddrUnion != null) && (prstAddrUnion.length() == 0)) {
			ffpbDetailsCacheModel.prstAddrUnion = null;
		}

		ffpbDetailsCacheModel.prstAddrVillage = getPrstAddrVillage();

		String prstAddrVillage = ffpbDetailsCacheModel.prstAddrVillage;

		if ((prstAddrVillage != null) && (prstAddrVillage.length() == 0)) {
			ffpbDetailsCacheModel.prstAddrVillage = null;
		}

		ffpbDetailsCacheModel.prstAddrWard = getPrstAddrWard();

		String prstAddrWard = ffpbDetailsCacheModel.prstAddrWard;

		if ((prstAddrWard != null) && (prstAddrWard.length() == 0)) {
			ffpbDetailsCacheModel.prstAddrWard = null;
		}

		ffpbDetailsCacheModel.prstAddrZip = getPrstAddrZip();

		ffpbDetailsCacheModel.prstAddrPstoffc = getPrstAddrPstoffc();

		ffpbDetailsCacheModel.prstAddrHoseaddr = getPrstAddrHoseaddr();

		String prstAddrHoseaddr = ffpbDetailsCacheModel.prstAddrHoseaddr;

		if ((prstAddrHoseaddr != null) && (prstAddrHoseaddr.length() == 0)) {
			ffpbDetailsCacheModel.prstAddrHoseaddr = null;
		}

		ffpbDetailsCacheModel.ffpApplCrtdBy = getFfpApplCrtdBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ffpbDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			ffpbDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		ffpbDetailsCacheModel.ffpApplMdfyBy = getFfpApplMdfyBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ffpbDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ffpbDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ffpbDetailsCacheModel.groupId = getGroupId();

		ffpbDetailsCacheModel.companyId = getCompanyId();

		ffpbDetailsCacheModel.applApprejCmnts = getApplApprejCmnts();

		String applApprejCmnts = ffpbDetailsCacheModel.applApprejCmnts;

		if ((applApprejCmnts != null) && (applApprejCmnts.length() == 0)) {
			ffpbDetailsCacheModel.applApprejCmnts = null;
		}

		ffpbDetailsCacheModel.ffpbApplStatus = getFfpbApplStatus();

		ffpbDetailsCacheModel.version = getVersion();

		ffpbDetailsCacheModel.status = getStatus();

		ffpbDetailsCacheModel.statusByUserId = getStatusByUserId();

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			ffpbDetailsCacheModel.statusDate = statusDate.getTime();
		}
		else {
			ffpbDetailsCacheModel.statusDate = Long.MIN_VALUE;
		}

		return ffpbDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FfpbDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FfpbDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FfpbDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FfpbDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FfpbDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FfpbDetails.class, ModelWrapper.class);

	}

	private long _ffpRegstrId;
	private long _nationalId;
	private long _dlrRegNo;
	private String _ffpCardNo;
	private Date _dateOfBirth;
	private String _mobileNo;
	private String _emialId;
	private long _maritalStatus;
	private long _gender;
	private long _spouseNid;
	private String _prstAddrRegion;
	private String _prstAddrDisrict;
	private String _prstAddrUpzilla;
	private String _prstAddrUnion;
	private String _prstAddrVillage;
	private String _prstAddrWard;
	private long _prstAddrZip;
	private long _prstAddrPstoffc;
	private String _prstAddrHoseaddr;
	private long _ffpApplCrtdBy;
	private Date _createDate;
	private long _ffpApplMdfyBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _groupId;
	private long _companyId;
	private String _applApprejCmnts;
	private long _ffpbApplStatus;
	private float _version;
	private long _status;
	private long _statusByUserId;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		Function<FfpbDetails, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FfpbDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ffpRegstrId", _ffpRegstrId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("dlrRegNo", _dlrRegNo);
		_columnOriginalValues.put("ffpCardNo", _ffpCardNo);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("mobileNo", _mobileNo);
		_columnOriginalValues.put("emialId", _emialId);
		_columnOriginalValues.put("maritalStatus", _maritalStatus);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("spouseNid", _spouseNid);
		_columnOriginalValues.put("prstAddrRegion", _prstAddrRegion);
		_columnOriginalValues.put("prstAddrDisrict", _prstAddrDisrict);
		_columnOriginalValues.put("prstAddrUpzilla", _prstAddrUpzilla);
		_columnOriginalValues.put("prstAddrUnion", _prstAddrUnion);
		_columnOriginalValues.put("prstAddrVillage", _prstAddrVillage);
		_columnOriginalValues.put("prstAddrWard", _prstAddrWard);
		_columnOriginalValues.put("prstAddrZip", _prstAddrZip);
		_columnOriginalValues.put("prstAddrPstoffc", _prstAddrPstoffc);
		_columnOriginalValues.put("prstAddrHoseaddr", _prstAddrHoseaddr);
		_columnOriginalValues.put("ffpApplCrtdBy", _ffpApplCrtdBy);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("ffpApplMdfyBy", _ffpApplMdfyBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("applApprejCmnts", _applApprejCmnts);
		_columnOriginalValues.put("ffpbApplStatus", _ffpbApplStatus);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ffpRegstrId", 1L);

		columnBitmasks.put("nationalId", 2L);

		columnBitmasks.put("dlrRegNo", 4L);

		columnBitmasks.put("ffpCardNo", 8L);

		columnBitmasks.put("dateOfBirth", 16L);

		columnBitmasks.put("mobileNo", 32L);

		columnBitmasks.put("emialId", 64L);

		columnBitmasks.put("maritalStatus", 128L);

		columnBitmasks.put("gender", 256L);

		columnBitmasks.put("spouseNid", 512L);

		columnBitmasks.put("prstAddrRegion", 1024L);

		columnBitmasks.put("prstAddrDisrict", 2048L);

		columnBitmasks.put("prstAddrUpzilla", 4096L);

		columnBitmasks.put("prstAddrUnion", 8192L);

		columnBitmasks.put("prstAddrVillage", 16384L);

		columnBitmasks.put("prstAddrWard", 32768L);

		columnBitmasks.put("prstAddrZip", 65536L);

		columnBitmasks.put("prstAddrPstoffc", 131072L);

		columnBitmasks.put("prstAddrHoseaddr", 262144L);

		columnBitmasks.put("ffpApplCrtdBy", 524288L);

		columnBitmasks.put("createDate", 1048576L);

		columnBitmasks.put("ffpApplMdfyBy", 2097152L);

		columnBitmasks.put("modifiedDate", 4194304L);

		columnBitmasks.put("groupId", 8388608L);

		columnBitmasks.put("companyId", 16777216L);

		columnBitmasks.put("applApprejCmnts", 33554432L);

		columnBitmasks.put("ffpbApplStatus", 67108864L);

		columnBitmasks.put("version", 134217728L);

		columnBitmasks.put("status", 268435456L);

		columnBitmasks.put("statusByUserId", 536870912L);

		columnBitmasks.put("statusDate", 1073741824L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FfpbDetails _escapedModel;

}