/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.friendly.program.model.impl;

import bd.gov.dgfood.food.friendly.program.model.InvtoryDetails;
import bd.gov.dgfood.food.friendly.program.model.InvtoryDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the InvtoryDetails service. Represents a row in the &quot;dgf_ffp_invtory_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>InvtoryDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InvtoryDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see InvtoryDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class InvtoryDetailsModelImpl
	extends BaseModelImpl<InvtoryDetails> implements InvtoryDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a invtory details model instance should use the <code>InvtoryDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_ffp_invtory_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"inventoryId", Types.BIGINT}, {"dlrRegNo", Types.BIGINT},
		{"allcNtfyNo", Types.BIGINT}, {"fromDate", Types.TIMESTAMP},
		{"toDate", Types.TIMESTAMP}, {"commodityId", Types.BIGINT},
		{"commodityName", Types.VARCHAR}, {"noOfIndents", Types.BIGINT},
		{"receivedQty", Types.FLOAT}, {"soldQty", Types.FLOAT},
		{"balanceQty", Types.FLOAT}, {"createDate", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createdBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("inventoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlrRegNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("allcNtfyNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commodityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commodityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noOfIndents", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("receivedQty", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("soldQty", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("balanceQty", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("createDate", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_ffp_invtory_dtls (inventoryId LONG not null primary key,dlrRegNo LONG,allcNtfyNo LONG,fromDate DATE null,toDate DATE null,commodityId LONG,commodityName VARCHAR(30) null,noOfIndents LONG,receivedQty DOUBLE,soldQty DOUBLE,balanceQty DOUBLE,createDate LONG,companyId LONG,createdBy LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_ffp_invtory_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY invtoryDetails.inventoryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_ffp_invtory_dtls.inventoryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ALLCNTFYNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLRREGNO_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long INVENTORYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public InvtoryDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _inventoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInventoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _inventoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InvtoryDetails.class;
	}

	@Override
	public String getModelClassName() {
		return InvtoryDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<InvtoryDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<InvtoryDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<InvtoryDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((InvtoryDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<InvtoryDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<InvtoryDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(InvtoryDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<InvtoryDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<InvtoryDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<InvtoryDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<InvtoryDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<InvtoryDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<InvtoryDetails, Object>>();
		Map<String, BiConsumer<InvtoryDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<InvtoryDetails, ?>>();

		attributeGetterFunctions.put(
			"inventoryId", InvtoryDetails::getInventoryId);
		attributeSetterBiConsumers.put(
			"inventoryId",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setInventoryId);
		attributeGetterFunctions.put("dlrRegNo", InvtoryDetails::getDlrRegNo);
		attributeSetterBiConsumers.put(
			"dlrRegNo",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setDlrRegNo);
		attributeGetterFunctions.put(
			"allcNtfyNo", InvtoryDetails::getAllcNtfyNo);
		attributeSetterBiConsumers.put(
			"allcNtfyNo",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setAllcNtfyNo);
		attributeGetterFunctions.put("fromDate", InvtoryDetails::getFromDate);
		attributeSetterBiConsumers.put(
			"fromDate",
			(BiConsumer<InvtoryDetails, Date>)InvtoryDetails::setFromDate);
		attributeGetterFunctions.put("toDate", InvtoryDetails::getToDate);
		attributeSetterBiConsumers.put(
			"toDate",
			(BiConsumer<InvtoryDetails, Date>)InvtoryDetails::setToDate);
		attributeGetterFunctions.put(
			"commodityId", InvtoryDetails::getCommodityId);
		attributeSetterBiConsumers.put(
			"commodityId",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setCommodityId);
		attributeGetterFunctions.put(
			"commodityName", InvtoryDetails::getCommodityName);
		attributeSetterBiConsumers.put(
			"commodityName",
			(BiConsumer<InvtoryDetails, String>)
				InvtoryDetails::setCommodityName);
		attributeGetterFunctions.put(
			"noOfIndents", InvtoryDetails::getNoOfIndents);
		attributeSetterBiConsumers.put(
			"noOfIndents",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setNoOfIndents);
		attributeGetterFunctions.put(
			"receivedQty", InvtoryDetails::getReceivedQty);
		attributeSetterBiConsumers.put(
			"receivedQty",
			(BiConsumer<InvtoryDetails, Float>)InvtoryDetails::setReceivedQty);
		attributeGetterFunctions.put("soldQty", InvtoryDetails::getSoldQty);
		attributeSetterBiConsumers.put(
			"soldQty",
			(BiConsumer<InvtoryDetails, Float>)InvtoryDetails::setSoldQty);
		attributeGetterFunctions.put(
			"balanceQty", InvtoryDetails::getBalanceQty);
		attributeSetterBiConsumers.put(
			"balanceQty",
			(BiConsumer<InvtoryDetails, Float>)InvtoryDetails::setBalanceQty);
		attributeGetterFunctions.put(
			"createDate", InvtoryDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setCreateDate);
		attributeGetterFunctions.put("companyId", InvtoryDetails::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setCompanyId);
		attributeGetterFunctions.put("createdBy", InvtoryDetails::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<InvtoryDetails, Long>)InvtoryDetails::setCreatedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getInventoryId() {
		return _inventoryId;
	}

	@Override
	public void setInventoryId(long inventoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inventoryId = inventoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalInventoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("inventoryId"));
	}

	@JSON
	@Override
	public long getDlrRegNo() {
		return _dlrRegNo;
	}

	@Override
	public void setDlrRegNo(long dlrRegNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegNo = dlrRegNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDlrRegNo() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dlrRegNo"));
	}

	@JSON
	@Override
	public long getAllcNtfyNo() {
		return _allcNtfyNo;
	}

	@Override
	public void setAllcNtfyNo(long allcNtfyNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allcNtfyNo = allcNtfyNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAllcNtfyNo() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("allcNtfyNo"));
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fromDate = fromDate;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_toDate = toDate;
	}

	@JSON
	@Override
	public long getCommodityId() {
		return _commodityId;
	}

	@Override
	public void setCommodityId(long commodityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityId = commodityId;
	}

	@JSON
	@Override
	public String getCommodityName() {
		if (_commodityName == null) {
			return "";
		}
		else {
			return _commodityName;
		}
	}

	@Override
	public void setCommodityName(String commodityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityName = commodityName;
	}

	@JSON
	@Override
	public long getNoOfIndents() {
		return _noOfIndents;
	}

	@Override
	public void setNoOfIndents(long noOfIndents) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noOfIndents = noOfIndents;
	}

	@JSON
	@Override
	public float getReceivedQty() {
		return _receivedQty;
	}

	@Override
	public void setReceivedQty(float receivedQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivedQty = receivedQty;
	}

	@JSON
	@Override
	public float getSoldQty() {
		return _soldQty;
	}

	@Override
	public void setSoldQty(float soldQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_soldQty = soldQty;
	}

	@JSON
	@Override
	public float getBalanceQty() {
		return _balanceQty;
	}

	@Override
	public void setBalanceQty(float balanceQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_balanceQty = balanceQty;
	}

	@JSON
	@Override
	public long getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(long createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), InvtoryDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InvtoryDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, InvtoryDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InvtoryDetailsImpl invtoryDetailsImpl = new InvtoryDetailsImpl();

		invtoryDetailsImpl.setInventoryId(getInventoryId());
		invtoryDetailsImpl.setDlrRegNo(getDlrRegNo());
		invtoryDetailsImpl.setAllcNtfyNo(getAllcNtfyNo());
		invtoryDetailsImpl.setFromDate(getFromDate());
		invtoryDetailsImpl.setToDate(getToDate());
		invtoryDetailsImpl.setCommodityId(getCommodityId());
		invtoryDetailsImpl.setCommodityName(getCommodityName());
		invtoryDetailsImpl.setNoOfIndents(getNoOfIndents());
		invtoryDetailsImpl.setReceivedQty(getReceivedQty());
		invtoryDetailsImpl.setSoldQty(getSoldQty());
		invtoryDetailsImpl.setBalanceQty(getBalanceQty());
		invtoryDetailsImpl.setCreateDate(getCreateDate());
		invtoryDetailsImpl.setCompanyId(getCompanyId());
		invtoryDetailsImpl.setCreatedBy(getCreatedBy());

		invtoryDetailsImpl.resetOriginalValues();

		return invtoryDetailsImpl;
	}

	@Override
	public InvtoryDetails cloneWithOriginalValues() {
		InvtoryDetailsImpl invtoryDetailsImpl = new InvtoryDetailsImpl();

		invtoryDetailsImpl.setInventoryId(
			this.<Long>getColumnOriginalValue("inventoryId"));
		invtoryDetailsImpl.setDlrRegNo(
			this.<Long>getColumnOriginalValue("dlrRegNo"));
		invtoryDetailsImpl.setAllcNtfyNo(
			this.<Long>getColumnOriginalValue("allcNtfyNo"));
		invtoryDetailsImpl.setFromDate(
			this.<Date>getColumnOriginalValue("fromDate"));
		invtoryDetailsImpl.setToDate(
			this.<Date>getColumnOriginalValue("toDate"));
		invtoryDetailsImpl.setCommodityId(
			this.<Long>getColumnOriginalValue("commodityId"));
		invtoryDetailsImpl.setCommodityName(
			this.<String>getColumnOriginalValue("commodityName"));
		invtoryDetailsImpl.setNoOfIndents(
			this.<Long>getColumnOriginalValue("noOfIndents"));
		invtoryDetailsImpl.setReceivedQty(
			this.<Float>getColumnOriginalValue("receivedQty"));
		invtoryDetailsImpl.setSoldQty(
			this.<Float>getColumnOriginalValue("soldQty"));
		invtoryDetailsImpl.setBalanceQty(
			this.<Float>getColumnOriginalValue("balanceQty"));
		invtoryDetailsImpl.setCreateDate(
			this.<Long>getColumnOriginalValue("createDate"));
		invtoryDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		invtoryDetailsImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));

		return invtoryDetailsImpl;
	}

	@Override
	public int compareTo(InvtoryDetails invtoryDetails) {
		long primaryKey = invtoryDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof InvtoryDetails)) {
			return false;
		}

		InvtoryDetails invtoryDetails = (InvtoryDetails)object;

		long primaryKey = invtoryDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<InvtoryDetails> toCacheModel() {
		InvtoryDetailsCacheModel invtoryDetailsCacheModel =
			new InvtoryDetailsCacheModel();

		invtoryDetailsCacheModel.inventoryId = getInventoryId();

		invtoryDetailsCacheModel.dlrRegNo = getDlrRegNo();

		invtoryDetailsCacheModel.allcNtfyNo = getAllcNtfyNo();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			invtoryDetailsCacheModel.fromDate = fromDate.getTime();
		}
		else {
			invtoryDetailsCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			invtoryDetailsCacheModel.toDate = toDate.getTime();
		}
		else {
			invtoryDetailsCacheModel.toDate = Long.MIN_VALUE;
		}

		invtoryDetailsCacheModel.commodityId = getCommodityId();

		invtoryDetailsCacheModel.commodityName = getCommodityName();

		String commodityName = invtoryDetailsCacheModel.commodityName;

		if ((commodityName != null) && (commodityName.length() == 0)) {
			invtoryDetailsCacheModel.commodityName = null;
		}

		invtoryDetailsCacheModel.noOfIndents = getNoOfIndents();

		invtoryDetailsCacheModel.receivedQty = getReceivedQty();

		invtoryDetailsCacheModel.soldQty = getSoldQty();

		invtoryDetailsCacheModel.balanceQty = getBalanceQty();

		invtoryDetailsCacheModel.createDate = getCreateDate();

		invtoryDetailsCacheModel.companyId = getCompanyId();

		invtoryDetailsCacheModel.createdBy = getCreatedBy();

		return invtoryDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<InvtoryDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<InvtoryDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<InvtoryDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((InvtoryDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, InvtoryDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					InvtoryDetails.class, ModelWrapper.class);

	}

	private long _inventoryId;
	private long _dlrRegNo;
	private long _allcNtfyNo;
	private Date _fromDate;
	private Date _toDate;
	private long _commodityId;
	private String _commodityName;
	private long _noOfIndents;
	private float _receivedQty;
	private float _soldQty;
	private float _balanceQty;
	private long _createDate;
	private long _companyId;
	private long _createdBy;

	public <T> T getColumnValue(String columnName) {
		Function<InvtoryDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((InvtoryDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("inventoryId", _inventoryId);
		_columnOriginalValues.put("dlrRegNo", _dlrRegNo);
		_columnOriginalValues.put("allcNtfyNo", _allcNtfyNo);
		_columnOriginalValues.put("fromDate", _fromDate);
		_columnOriginalValues.put("toDate", _toDate);
		_columnOriginalValues.put("commodityId", _commodityId);
		_columnOriginalValues.put("commodityName", _commodityName);
		_columnOriginalValues.put("noOfIndents", _noOfIndents);
		_columnOriginalValues.put("receivedQty", _receivedQty);
		_columnOriginalValues.put("soldQty", _soldQty);
		_columnOriginalValues.put("balanceQty", _balanceQty);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createdBy", _createdBy);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("inventoryId", 1L);

		columnBitmasks.put("dlrRegNo", 2L);

		columnBitmasks.put("allcNtfyNo", 4L);

		columnBitmasks.put("fromDate", 8L);

		columnBitmasks.put("toDate", 16L);

		columnBitmasks.put("commodityId", 32L);

		columnBitmasks.put("commodityName", 64L);

		columnBitmasks.put("noOfIndents", 128L);

		columnBitmasks.put("receivedQty", 256L);

		columnBitmasks.put("soldQty", 512L);

		columnBitmasks.put("balanceQty", 1024L);

		columnBitmasks.put("createDate", 2048L);

		columnBitmasks.put("companyId", 4096L);

		columnBitmasks.put("createdBy", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private InvtoryDetails _escapedModel;

}