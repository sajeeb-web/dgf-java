/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.friendly.program.model.impl;

import bd.gov.dgfood.food.friendly.program.model.DlrFfpOmsAllcNtfyDetails;
import bd.gov.dgfood.food.friendly.program.model.DlrFfpOmsAllcNtfyDetailsModel;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DlrFfpOmsAllcNtfyDetails service. Represents a row in the &quot;dgf_ffp_oms_allc_ntfy_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DlrFfpOmsAllcNtfyDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DlrFfpOmsAllcNtfyDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DlrFfpOmsAllcNtfyDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class DlrFfpOmsAllcNtfyDetailsModelImpl
	extends BaseModelImpl<DlrFfpOmsAllcNtfyDetails>
	implements DlrFfpOmsAllcNtfyDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dlr ffp oms allc ntfy details model instance should use the <code>DlrFfpOmsAllcNtfyDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_ffp_oms_allc_ntfy_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"allocNtfyId", Types.VARCHAR}, {"prgrmType", Types.VARCHAR},
		{"salesOrgName", Types.VARCHAR}, {"dstrbtnChnnl", Types.VARCHAR},
		{"year", Types.BIGINT}, {"salesOffice", Types.VARCHAR},
		{"memoNo", Types.VARCHAR}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"duration", Types.VARCHAR},
		{"commodityId", Types.BIGINT}, {"commodityName", Types.VARCHAR},
		{"econmcPrice", Types.BIGINT}, {"salePrceToEndCstmr", Types.BIGINT},
		{"unitPrice", Types.VARCHAR}, {"maxAlltmntPDay", Types.FLOAT},
		{"maxSellQtyPCstmr", Types.FLOAT}, {"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("allocNtfyId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prgrmType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salesOrgName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dstrbtnChnnl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salesOffice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memoNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("duration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commodityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commodityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("econmcPrice", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salePrceToEndCstmr", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("unitPrice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxAlltmntPDay", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("maxSellQtyPCstmr", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_ffp_oms_allc_ntfy_dtls (allocNtfyId VARCHAR(30) not null primary key,prgrmType VARCHAR(30) null,salesOrgName VARCHAR(30) null,dstrbtnChnnl VARCHAR(30) null,year LONG,salesOffice VARCHAR(30) null,memoNo VARCHAR(30) null,startDate DATE null,endDate DATE null,duration VARCHAR(75) null,commodityId LONG,commodityName VARCHAR(30) null,econmcPrice LONG,salePrceToEndCstmr LONG,unitPrice VARCHAR(30) null,maxAlltmntPDay DOUBLE,maxSellQtyPCstmr DOUBLE,createDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_ffp_oms_allc_ntfy_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dlrFfpOmsAllcNtfyDetails.allocNtfyId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_ffp_oms_allc_ntfy_dtls.allocNtfyId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ALLOCNTFYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DlrFfpOmsAllcNtfyDetailsModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _allocNtfyId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setAllocNtfyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _allocNtfyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DlrFfpOmsAllcNtfyDetails.class;
	}

	@Override
	public String getModelClassName() {
		return DlrFfpOmsAllcNtfyDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DlrFfpOmsAllcNtfyDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DlrFfpOmsAllcNtfyDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DlrFfpOmsAllcNtfyDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DlrFfpOmsAllcNtfyDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DlrFfpOmsAllcNtfyDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DlrFfpOmsAllcNtfyDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<DlrFfpOmsAllcNtfyDetails, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>();
		Map<String, BiConsumer<DlrFfpOmsAllcNtfyDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DlrFfpOmsAllcNtfyDetails, ?>>();

		attributeGetterFunctions.put(
			"allocNtfyId", DlrFfpOmsAllcNtfyDetails::getAllocNtfyId);
		attributeSetterBiConsumers.put(
			"allocNtfyId",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setAllocNtfyId);
		attributeGetterFunctions.put(
			"prgrmType", DlrFfpOmsAllcNtfyDetails::getPrgrmType);
		attributeSetterBiConsumers.put(
			"prgrmType",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setPrgrmType);
		attributeGetterFunctions.put(
			"salesOrgName", DlrFfpOmsAllcNtfyDetails::getSalesOrgName);
		attributeSetterBiConsumers.put(
			"salesOrgName",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setSalesOrgName);
		attributeGetterFunctions.put(
			"dstrbtnChnnl", DlrFfpOmsAllcNtfyDetails::getDstrbtnChnnl);
		attributeSetterBiConsumers.put(
			"dstrbtnChnnl",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setDstrbtnChnnl);
		attributeGetterFunctions.put("year", DlrFfpOmsAllcNtfyDetails::getYear);
		attributeSetterBiConsumers.put(
			"year",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Long>)
				DlrFfpOmsAllcNtfyDetails::setYear);
		attributeGetterFunctions.put(
			"salesOffice", DlrFfpOmsAllcNtfyDetails::getSalesOffice);
		attributeSetterBiConsumers.put(
			"salesOffice",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setSalesOffice);
		attributeGetterFunctions.put(
			"memoNo", DlrFfpOmsAllcNtfyDetails::getMemoNo);
		attributeSetterBiConsumers.put(
			"memoNo",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setMemoNo);
		attributeGetterFunctions.put(
			"startDate", DlrFfpOmsAllcNtfyDetails::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Date>)
				DlrFfpOmsAllcNtfyDetails::setStartDate);
		attributeGetterFunctions.put(
			"endDate", DlrFfpOmsAllcNtfyDetails::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Date>)
				DlrFfpOmsAllcNtfyDetails::setEndDate);
		attributeGetterFunctions.put(
			"duration", DlrFfpOmsAllcNtfyDetails::getDuration);
		attributeSetterBiConsumers.put(
			"duration",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setDuration);
		attributeGetterFunctions.put(
			"commodityId", DlrFfpOmsAllcNtfyDetails::getCommodityId);
		attributeSetterBiConsumers.put(
			"commodityId",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Long>)
				DlrFfpOmsAllcNtfyDetails::setCommodityId);
		attributeGetterFunctions.put(
			"commodityName", DlrFfpOmsAllcNtfyDetails::getCommodityName);
		attributeSetterBiConsumers.put(
			"commodityName",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setCommodityName);
		attributeGetterFunctions.put(
			"econmcPrice", DlrFfpOmsAllcNtfyDetails::getEconmcPrice);
		attributeSetterBiConsumers.put(
			"econmcPrice",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Long>)
				DlrFfpOmsAllcNtfyDetails::setEconmcPrice);
		attributeGetterFunctions.put(
			"salePrceToEndCstmr",
			DlrFfpOmsAllcNtfyDetails::getSalePrceToEndCstmr);
		attributeSetterBiConsumers.put(
			"salePrceToEndCstmr",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Long>)
				DlrFfpOmsAllcNtfyDetails::setSalePrceToEndCstmr);
		attributeGetterFunctions.put(
			"unitPrice", DlrFfpOmsAllcNtfyDetails::getUnitPrice);
		attributeSetterBiConsumers.put(
			"unitPrice",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, String>)
				DlrFfpOmsAllcNtfyDetails::setUnitPrice);
		attributeGetterFunctions.put(
			"maxAlltmntPDay", DlrFfpOmsAllcNtfyDetails::getMaxAlltmntPDay);
		attributeSetterBiConsumers.put(
			"maxAlltmntPDay",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Float>)
				DlrFfpOmsAllcNtfyDetails::setMaxAlltmntPDay);
		attributeGetterFunctions.put(
			"maxSellQtyPCstmr", DlrFfpOmsAllcNtfyDetails::getMaxSellQtyPCstmr);
		attributeSetterBiConsumers.put(
			"maxSellQtyPCstmr",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Float>)
				DlrFfpOmsAllcNtfyDetails::setMaxSellQtyPCstmr);
		attributeGetterFunctions.put(
			"createDate", DlrFfpOmsAllcNtfyDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DlrFfpOmsAllcNtfyDetails, Date>)
				DlrFfpOmsAllcNtfyDetails::setCreateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getAllocNtfyId() {
		if (_allocNtfyId == null) {
			return "";
		}
		else {
			return _allocNtfyId;
		}
	}

	@Override
	public void setAllocNtfyId(String allocNtfyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allocNtfyId = allocNtfyId;
	}

	@JSON
	@Override
	public String getPrgrmType() {
		if (_prgrmType == null) {
			return "";
		}
		else {
			return _prgrmType;
		}
	}

	@Override
	public void setPrgrmType(String prgrmType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prgrmType = prgrmType;
	}

	@JSON
	@Override
	public String getSalesOrgName() {
		if (_salesOrgName == null) {
			return "";
		}
		else {
			return _salesOrgName;
		}
	}

	@Override
	public void setSalesOrgName(String salesOrgName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesOrgName = salesOrgName;
	}

	@JSON
	@Override
	public String getDstrbtnChnnl() {
		if (_dstrbtnChnnl == null) {
			return "";
		}
		else {
			return _dstrbtnChnnl;
		}
	}

	@Override
	public void setDstrbtnChnnl(String dstrbtnChnnl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dstrbtnChnnl = dstrbtnChnnl;
	}

	@JSON
	@Override
	public long getYear() {
		return _year;
	}

	@Override
	public void setYear(long year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@JSON
	@Override
	public String getSalesOffice() {
		if (_salesOffice == null) {
			return "";
		}
		else {
			return _salesOffice;
		}
	}

	@Override
	public void setSalesOffice(String salesOffice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesOffice = salesOffice;
	}

	@JSON
	@Override
	public String getMemoNo() {
		if (_memoNo == null) {
			return "";
		}
		else {
			return _memoNo;
		}
	}

	@Override
	public void setMemoNo(String memoNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_memoNo = memoNo;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getDuration() {
		if (_duration == null) {
			return "";
		}
		else {
			return _duration;
		}
	}

	@Override
	public void setDuration(String duration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duration = duration;
	}

	@JSON
	@Override
	public long getCommodityId() {
		return _commodityId;
	}

	@Override
	public void setCommodityId(long commodityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityId = commodityId;
	}

	@JSON
	@Override
	public String getCommodityName() {
		if (_commodityName == null) {
			return "";
		}
		else {
			return _commodityName;
		}
	}

	@Override
	public void setCommodityName(String commodityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityName = commodityName;
	}

	@JSON
	@Override
	public long getEconmcPrice() {
		return _econmcPrice;
	}

	@Override
	public void setEconmcPrice(long econmcPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_econmcPrice = econmcPrice;
	}

	@JSON
	@Override
	public long getSalePrceToEndCstmr() {
		return _salePrceToEndCstmr;
	}

	@Override
	public void setSalePrceToEndCstmr(long salePrceToEndCstmr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salePrceToEndCstmr = salePrceToEndCstmr;
	}

	@JSON
	@Override
	public String getUnitPrice() {
		if (_unitPrice == null) {
			return "";
		}
		else {
			return _unitPrice;
		}
	}

	@Override
	public void setUnitPrice(String unitPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public float getMaxAlltmntPDay() {
		return _maxAlltmntPDay;
	}

	@Override
	public void setMaxAlltmntPDay(float maxAlltmntPDay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxAlltmntPDay = maxAlltmntPDay;
	}

	@JSON
	@Override
	public float getMaxSellQtyPCstmr() {
		return _maxSellQtyPCstmr;
	}

	@Override
	public void setMaxSellQtyPCstmr(float maxSellQtyPCstmr) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxSellQtyPCstmr = maxSellQtyPCstmr;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public DlrFfpOmsAllcNtfyDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DlrFfpOmsAllcNtfyDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DlrFfpOmsAllcNtfyDetailsImpl dlrFfpOmsAllcNtfyDetailsImpl =
			new DlrFfpOmsAllcNtfyDetailsImpl();

		dlrFfpOmsAllcNtfyDetailsImpl.setAllocNtfyId(getAllocNtfyId());
		dlrFfpOmsAllcNtfyDetailsImpl.setPrgrmType(getPrgrmType());
		dlrFfpOmsAllcNtfyDetailsImpl.setSalesOrgName(getSalesOrgName());
		dlrFfpOmsAllcNtfyDetailsImpl.setDstrbtnChnnl(getDstrbtnChnnl());
		dlrFfpOmsAllcNtfyDetailsImpl.setYear(getYear());
		dlrFfpOmsAllcNtfyDetailsImpl.setSalesOffice(getSalesOffice());
		dlrFfpOmsAllcNtfyDetailsImpl.setMemoNo(getMemoNo());
		dlrFfpOmsAllcNtfyDetailsImpl.setStartDate(getStartDate());
		dlrFfpOmsAllcNtfyDetailsImpl.setEndDate(getEndDate());
		dlrFfpOmsAllcNtfyDetailsImpl.setDuration(getDuration());
		dlrFfpOmsAllcNtfyDetailsImpl.setCommodityId(getCommodityId());
		dlrFfpOmsAllcNtfyDetailsImpl.setCommodityName(getCommodityName());
		dlrFfpOmsAllcNtfyDetailsImpl.setEconmcPrice(getEconmcPrice());
		dlrFfpOmsAllcNtfyDetailsImpl.setSalePrceToEndCstmr(
			getSalePrceToEndCstmr());
		dlrFfpOmsAllcNtfyDetailsImpl.setUnitPrice(getUnitPrice());
		dlrFfpOmsAllcNtfyDetailsImpl.setMaxAlltmntPDay(getMaxAlltmntPDay());
		dlrFfpOmsAllcNtfyDetailsImpl.setMaxSellQtyPCstmr(getMaxSellQtyPCstmr());
		dlrFfpOmsAllcNtfyDetailsImpl.setCreateDate(getCreateDate());

		dlrFfpOmsAllcNtfyDetailsImpl.resetOriginalValues();

		return dlrFfpOmsAllcNtfyDetailsImpl;
	}

	@Override
	public DlrFfpOmsAllcNtfyDetails cloneWithOriginalValues() {
		DlrFfpOmsAllcNtfyDetailsImpl dlrFfpOmsAllcNtfyDetailsImpl =
			new DlrFfpOmsAllcNtfyDetailsImpl();

		dlrFfpOmsAllcNtfyDetailsImpl.setAllocNtfyId(
			this.<String>getColumnOriginalValue("allocNtfyId"));
		dlrFfpOmsAllcNtfyDetailsImpl.setPrgrmType(
			this.<String>getColumnOriginalValue("prgrmType"));
		dlrFfpOmsAllcNtfyDetailsImpl.setSalesOrgName(
			this.<String>getColumnOriginalValue("salesOrgName"));
		dlrFfpOmsAllcNtfyDetailsImpl.setDstrbtnChnnl(
			this.<String>getColumnOriginalValue("dstrbtnChnnl"));
		dlrFfpOmsAllcNtfyDetailsImpl.setYear(
			this.<Long>getColumnOriginalValue("year"));
		dlrFfpOmsAllcNtfyDetailsImpl.setSalesOffice(
			this.<String>getColumnOriginalValue("salesOffice"));
		dlrFfpOmsAllcNtfyDetailsImpl.setMemoNo(
			this.<String>getColumnOriginalValue("memoNo"));
		dlrFfpOmsAllcNtfyDetailsImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		dlrFfpOmsAllcNtfyDetailsImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		dlrFfpOmsAllcNtfyDetailsImpl.setDuration(
			this.<String>getColumnOriginalValue("duration"));
		dlrFfpOmsAllcNtfyDetailsImpl.setCommodityId(
			this.<Long>getColumnOriginalValue("commodityId"));
		dlrFfpOmsAllcNtfyDetailsImpl.setCommodityName(
			this.<String>getColumnOriginalValue("commodityName"));
		dlrFfpOmsAllcNtfyDetailsImpl.setEconmcPrice(
			this.<Long>getColumnOriginalValue("econmcPrice"));
		dlrFfpOmsAllcNtfyDetailsImpl.setSalePrceToEndCstmr(
			this.<Long>getColumnOriginalValue("salePrceToEndCstmr"));
		dlrFfpOmsAllcNtfyDetailsImpl.setUnitPrice(
			this.<String>getColumnOriginalValue("unitPrice"));
		dlrFfpOmsAllcNtfyDetailsImpl.setMaxAlltmntPDay(
			this.<Float>getColumnOriginalValue("maxAlltmntPDay"));
		dlrFfpOmsAllcNtfyDetailsImpl.setMaxSellQtyPCstmr(
			this.<Float>getColumnOriginalValue("maxSellQtyPCstmr"));
		dlrFfpOmsAllcNtfyDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return dlrFfpOmsAllcNtfyDetailsImpl;
	}

	@Override
	public int compareTo(DlrFfpOmsAllcNtfyDetails dlrFfpOmsAllcNtfyDetails) {
		String primaryKey = dlrFfpOmsAllcNtfyDetails.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DlrFfpOmsAllcNtfyDetails)) {
			return false;
		}

		DlrFfpOmsAllcNtfyDetails dlrFfpOmsAllcNtfyDetails =
			(DlrFfpOmsAllcNtfyDetails)object;

		String primaryKey = dlrFfpOmsAllcNtfyDetails.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DlrFfpOmsAllcNtfyDetails> toCacheModel() {
		DlrFfpOmsAllcNtfyDetailsCacheModel dlrFfpOmsAllcNtfyDetailsCacheModel =
			new DlrFfpOmsAllcNtfyDetailsCacheModel();

		dlrFfpOmsAllcNtfyDetailsCacheModel.allocNtfyId = getAllocNtfyId();

		String allocNtfyId = dlrFfpOmsAllcNtfyDetailsCacheModel.allocNtfyId;

		if ((allocNtfyId != null) && (allocNtfyId.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.allocNtfyId = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.prgrmType = getPrgrmType();

		String prgrmType = dlrFfpOmsAllcNtfyDetailsCacheModel.prgrmType;

		if ((prgrmType != null) && (prgrmType.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.prgrmType = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.salesOrgName = getSalesOrgName();

		String salesOrgName = dlrFfpOmsAllcNtfyDetailsCacheModel.salesOrgName;

		if ((salesOrgName != null) && (salesOrgName.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.salesOrgName = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.dstrbtnChnnl = getDstrbtnChnnl();

		String dstrbtnChnnl = dlrFfpOmsAllcNtfyDetailsCacheModel.dstrbtnChnnl;

		if ((dstrbtnChnnl != null) && (dstrbtnChnnl.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.dstrbtnChnnl = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.year = getYear();

		dlrFfpOmsAllcNtfyDetailsCacheModel.salesOffice = getSalesOffice();

		String salesOffice = dlrFfpOmsAllcNtfyDetailsCacheModel.salesOffice;

		if ((salesOffice != null) && (salesOffice.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.salesOffice = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.memoNo = getMemoNo();

		String memoNo = dlrFfpOmsAllcNtfyDetailsCacheModel.memoNo;

		if ((memoNo != null) && (memoNo.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.memoNo = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.startDate = startDate.getTime();
		}
		else {
			dlrFfpOmsAllcNtfyDetailsCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.endDate = endDate.getTime();
		}
		else {
			dlrFfpOmsAllcNtfyDetailsCacheModel.endDate = Long.MIN_VALUE;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.duration = getDuration();

		String duration = dlrFfpOmsAllcNtfyDetailsCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.duration = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.commodityId = getCommodityId();

		dlrFfpOmsAllcNtfyDetailsCacheModel.commodityName = getCommodityName();

		String commodityName = dlrFfpOmsAllcNtfyDetailsCacheModel.commodityName;

		if ((commodityName != null) && (commodityName.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.commodityName = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.econmcPrice = getEconmcPrice();

		dlrFfpOmsAllcNtfyDetailsCacheModel.salePrceToEndCstmr =
			getSalePrceToEndCstmr();

		dlrFfpOmsAllcNtfyDetailsCacheModel.unitPrice = getUnitPrice();

		String unitPrice = dlrFfpOmsAllcNtfyDetailsCacheModel.unitPrice;

		if ((unitPrice != null) && (unitPrice.length() == 0)) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.unitPrice = null;
		}

		dlrFfpOmsAllcNtfyDetailsCacheModel.maxAlltmntPDay = getMaxAlltmntPDay();

		dlrFfpOmsAllcNtfyDetailsCacheModel.maxSellQtyPCstmr =
			getMaxSellQtyPCstmr();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dlrFfpOmsAllcNtfyDetailsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			dlrFfpOmsAllcNtfyDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		return dlrFfpOmsAllcNtfyDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DlrFfpOmsAllcNtfyDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DlrFfpOmsAllcNtfyDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DlrFfpOmsAllcNtfyDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, DlrFfpOmsAllcNtfyDetails>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						DlrFfpOmsAllcNtfyDetails.class, ModelWrapper.class);

	}

	private String _allocNtfyId;
	private String _prgrmType;
	private String _salesOrgName;
	private String _dstrbtnChnnl;
	private long _year;
	private String _salesOffice;
	private String _memoNo;
	private Date _startDate;
	private Date _endDate;
	private String _duration;
	private long _commodityId;
	private String _commodityName;
	private long _econmcPrice;
	private long _salePrceToEndCstmr;
	private String _unitPrice;
	private float _maxAlltmntPDay;
	private float _maxSellQtyPCstmr;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		Function<DlrFfpOmsAllcNtfyDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DlrFfpOmsAllcNtfyDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("allocNtfyId", _allocNtfyId);
		_columnOriginalValues.put("prgrmType", _prgrmType);
		_columnOriginalValues.put("salesOrgName", _salesOrgName);
		_columnOriginalValues.put("dstrbtnChnnl", _dstrbtnChnnl);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("salesOffice", _salesOffice);
		_columnOriginalValues.put("memoNo", _memoNo);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("duration", _duration);
		_columnOriginalValues.put("commodityId", _commodityId);
		_columnOriginalValues.put("commodityName", _commodityName);
		_columnOriginalValues.put("econmcPrice", _econmcPrice);
		_columnOriginalValues.put("salePrceToEndCstmr", _salePrceToEndCstmr);
		_columnOriginalValues.put("unitPrice", _unitPrice);
		_columnOriginalValues.put("maxAlltmntPDay", _maxAlltmntPDay);
		_columnOriginalValues.put("maxSellQtyPCstmr", _maxSellQtyPCstmr);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("allocNtfyId", 1L);

		columnBitmasks.put("prgrmType", 2L);

		columnBitmasks.put("salesOrgName", 4L);

		columnBitmasks.put("dstrbtnChnnl", 8L);

		columnBitmasks.put("year", 16L);

		columnBitmasks.put("salesOffice", 32L);

		columnBitmasks.put("memoNo", 64L);

		columnBitmasks.put("startDate", 128L);

		columnBitmasks.put("endDate", 256L);

		columnBitmasks.put("duration", 512L);

		columnBitmasks.put("commodityId", 1024L);

		columnBitmasks.put("commodityName", 2048L);

		columnBitmasks.put("econmcPrice", 4096L);

		columnBitmasks.put("salePrceToEndCstmr", 8192L);

		columnBitmasks.put("unitPrice", 16384L);

		columnBitmasks.put("maxAlltmntPDay", 32768L);

		columnBitmasks.put("maxSellQtyPCstmr", 65536L);

		columnBitmasks.put("createDate", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DlrFfpOmsAllcNtfyDetails _escapedModel;

}