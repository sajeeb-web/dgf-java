/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.friendly.program.model.impl;

import bd.gov.dgfood.food.friendly.program.model.DlrDistributionDetails;
import bd.gov.dgfood.food.friendly.program.model.DlrDistributionDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DlrDistributionDetails service. Represents a row in the &quot;dgf_ffp_dlr_dstrbn_dtls&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DlrDistributionDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DlrDistributionDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DlrDistributionDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class DlrDistributionDetailsModelImpl
	extends BaseModelImpl<DlrDistributionDetails>
	implements DlrDistributionDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dlr distribution details model instance should use the <code>DlrDistributionDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "dgf_ffp_dlr_dstrbn_dtls";

	public static final Object[][] TABLE_COLUMNS = {
		{"dstrbnId", Types.BIGINT}, {"dlrRegNo", Types.BIGINT},
		{"ffpRegstrId", Types.BIGINT}, {"selLingDate", Types.TIMESTAMP},
		{"commodityId", Types.BIGINT}, {"commodityName", Types.VARCHAR},
		{"sellingPrice", Types.VARCHAR}, {"sellingQty", Types.BIGINT},
		{"stockBfrSelling", Types.BIGINT}, {"stockAfterSelling", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"inventoryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dstrbnId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dlrRegNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ffpRegstrId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("selLingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commodityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commodityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sellingPrice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sellingQty", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stockBfrSelling", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stockAfterSelling", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inventoryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dgf_ffp_dlr_dstrbn_dtls (dstrbnId LONG not null primary key,dlrRegNo LONG,ffpRegstrId LONG,selLingDate DATE null,commodityId LONG,commodityName VARCHAR(30) null,sellingPrice VARCHAR(4) null,sellingQty LONG,stockBfrSelling LONG,stockAfterSelling LONG,createDate DATE null,createdBy LONG,companyId LONG,inventoryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table dgf_ffp_dlr_dstrbn_dtls";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dlrDistributionDetails.dstrbnId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dgf_ffp_dlr_dstrbn_dtls.dstrbnId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DLRREGNO_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DSTRBNID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FFPREGSTRID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long INVENTORYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DlrDistributionDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dstrbnId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDstrbnId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dstrbnId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DlrDistributionDetails.class;
	}

	@Override
	public String getModelClassName() {
		return DlrDistributionDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DlrDistributionDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DlrDistributionDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DlrDistributionDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DlrDistributionDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DlrDistributionDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DlrDistributionDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DlrDistributionDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DlrDistributionDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DlrDistributionDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DlrDistributionDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DlrDistributionDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DlrDistributionDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DlrDistributionDetails, Object>>();
		Map<String, BiConsumer<DlrDistributionDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<DlrDistributionDetails, ?>>();

		attributeGetterFunctions.put(
			"dstrbnId", DlrDistributionDetails::getDstrbnId);
		attributeSetterBiConsumers.put(
			"dstrbnId",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setDstrbnId);
		attributeGetterFunctions.put(
			"dlrRegNo", DlrDistributionDetails::getDlrRegNo);
		attributeSetterBiConsumers.put(
			"dlrRegNo",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setDlrRegNo);
		attributeGetterFunctions.put(
			"ffpRegstrId", DlrDistributionDetails::getFfpRegstrId);
		attributeSetterBiConsumers.put(
			"ffpRegstrId",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setFfpRegstrId);
		attributeGetterFunctions.put(
			"selLingDate", DlrDistributionDetails::getSelLingDate);
		attributeSetterBiConsumers.put(
			"selLingDate",
			(BiConsumer<DlrDistributionDetails, Date>)
				DlrDistributionDetails::setSelLingDate);
		attributeGetterFunctions.put(
			"commodityId", DlrDistributionDetails::getCommodityId);
		attributeSetterBiConsumers.put(
			"commodityId",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setCommodityId);
		attributeGetterFunctions.put(
			"commodityName", DlrDistributionDetails::getCommodityName);
		attributeSetterBiConsumers.put(
			"commodityName",
			(BiConsumer<DlrDistributionDetails, String>)
				DlrDistributionDetails::setCommodityName);
		attributeGetterFunctions.put(
			"sellingPrice", DlrDistributionDetails::getSellingPrice);
		attributeSetterBiConsumers.put(
			"sellingPrice",
			(BiConsumer<DlrDistributionDetails, String>)
				DlrDistributionDetails::setSellingPrice);
		attributeGetterFunctions.put(
			"sellingQty", DlrDistributionDetails::getSellingQty);
		attributeSetterBiConsumers.put(
			"sellingQty",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setSellingQty);
		attributeGetterFunctions.put(
			"stockBfrSelling", DlrDistributionDetails::getStockBfrSelling);
		attributeSetterBiConsumers.put(
			"stockBfrSelling",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setStockBfrSelling);
		attributeGetterFunctions.put(
			"stockAfterSelling", DlrDistributionDetails::getStockAfterSelling);
		attributeSetterBiConsumers.put(
			"stockAfterSelling",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setStockAfterSelling);
		attributeGetterFunctions.put(
			"createDate", DlrDistributionDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DlrDistributionDetails, Date>)
				DlrDistributionDetails::setCreateDate);
		attributeGetterFunctions.put(
			"createdBy", DlrDistributionDetails::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setCreatedBy);
		attributeGetterFunctions.put(
			"companyId", DlrDistributionDetails::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setCompanyId);
		attributeGetterFunctions.put(
			"inventoryId", DlrDistributionDetails::getInventoryId);
		attributeSetterBiConsumers.put(
			"inventoryId",
			(BiConsumer<DlrDistributionDetails, Long>)
				DlrDistributionDetails::setInventoryId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDstrbnId() {
		return _dstrbnId;
	}

	@Override
	public void setDstrbnId(long dstrbnId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dstrbnId = dstrbnId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDstrbnId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dstrbnId"));
	}

	@JSON
	@Override
	public long getDlrRegNo() {
		return _dlrRegNo;
	}

	@Override
	public void setDlrRegNo(long dlrRegNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlrRegNo = dlrRegNo;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDlrRegNo() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("dlrRegNo"));
	}

	@JSON
	@Override
	public long getFfpRegstrId() {
		return _ffpRegstrId;
	}

	@Override
	public void setFfpRegstrId(long ffpRegstrId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ffpRegstrId = ffpRegstrId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFfpRegstrId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ffpRegstrId"));
	}

	@JSON
	@Override
	public Date getSelLingDate() {
		return _selLingDate;
	}

	@Override
	public void setSelLingDate(Date selLingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_selLingDate = selLingDate;
	}

	@JSON
	@Override
	public long getCommodityId() {
		return _commodityId;
	}

	@Override
	public void setCommodityId(long commodityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityId = commodityId;
	}

	@JSON
	@Override
	public String getCommodityName() {
		if (_commodityName == null) {
			return "";
		}
		else {
			return _commodityName;
		}
	}

	@Override
	public void setCommodityName(String commodityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityName = commodityName;
	}

	@JSON
	@Override
	public String getSellingPrice() {
		if (_sellingPrice == null) {
			return "";
		}
		else {
			return _sellingPrice;
		}
	}

	@Override
	public void setSellingPrice(String sellingPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sellingPrice = sellingPrice;
	}

	@JSON
	@Override
	public long getSellingQty() {
		return _sellingQty;
	}

	@Override
	public void setSellingQty(long sellingQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sellingQty = sellingQty;
	}

	@JSON
	@Override
	public long getStockBfrSelling() {
		return _stockBfrSelling;
	}

	@Override
	public void setStockBfrSelling(long stockBfrSelling) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stockBfrSelling = stockBfrSelling;
	}

	@JSON
	@Override
	public long getStockAfterSelling() {
		return _stockAfterSelling;
	}

	@Override
	public void setStockAfterSelling(long stockAfterSelling) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stockAfterSelling = stockAfterSelling;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getInventoryId() {
		return _inventoryId;
	}

	@Override
	public void setInventoryId(long inventoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inventoryId = inventoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalInventoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("inventoryId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DlrDistributionDetails.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DlrDistributionDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DlrDistributionDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DlrDistributionDetailsImpl dlrDistributionDetailsImpl =
			new DlrDistributionDetailsImpl();

		dlrDistributionDetailsImpl.setDstrbnId(getDstrbnId());
		dlrDistributionDetailsImpl.setDlrRegNo(getDlrRegNo());
		dlrDistributionDetailsImpl.setFfpRegstrId(getFfpRegstrId());
		dlrDistributionDetailsImpl.setSelLingDate(getSelLingDate());
		dlrDistributionDetailsImpl.setCommodityId(getCommodityId());
		dlrDistributionDetailsImpl.setCommodityName(getCommodityName());
		dlrDistributionDetailsImpl.setSellingPrice(getSellingPrice());
		dlrDistributionDetailsImpl.setSellingQty(getSellingQty());
		dlrDistributionDetailsImpl.setStockBfrSelling(getStockBfrSelling());
		dlrDistributionDetailsImpl.setStockAfterSelling(getStockAfterSelling());
		dlrDistributionDetailsImpl.setCreateDate(getCreateDate());
		dlrDistributionDetailsImpl.setCreatedBy(getCreatedBy());
		dlrDistributionDetailsImpl.setCompanyId(getCompanyId());
		dlrDistributionDetailsImpl.setInventoryId(getInventoryId());

		dlrDistributionDetailsImpl.resetOriginalValues();

		return dlrDistributionDetailsImpl;
	}

	@Override
	public DlrDistributionDetails cloneWithOriginalValues() {
		DlrDistributionDetailsImpl dlrDistributionDetailsImpl =
			new DlrDistributionDetailsImpl();

		dlrDistributionDetailsImpl.setDstrbnId(
			this.<Long>getColumnOriginalValue("dstrbnId"));
		dlrDistributionDetailsImpl.setDlrRegNo(
			this.<Long>getColumnOriginalValue("dlrRegNo"));
		dlrDistributionDetailsImpl.setFfpRegstrId(
			this.<Long>getColumnOriginalValue("ffpRegstrId"));
		dlrDistributionDetailsImpl.setSelLingDate(
			this.<Date>getColumnOriginalValue("selLingDate"));
		dlrDistributionDetailsImpl.setCommodityId(
			this.<Long>getColumnOriginalValue("commodityId"));
		dlrDistributionDetailsImpl.setCommodityName(
			this.<String>getColumnOriginalValue("commodityName"));
		dlrDistributionDetailsImpl.setSellingPrice(
			this.<String>getColumnOriginalValue("sellingPrice"));
		dlrDistributionDetailsImpl.setSellingQty(
			this.<Long>getColumnOriginalValue("sellingQty"));
		dlrDistributionDetailsImpl.setStockBfrSelling(
			this.<Long>getColumnOriginalValue("stockBfrSelling"));
		dlrDistributionDetailsImpl.setStockAfterSelling(
			this.<Long>getColumnOriginalValue("stockAfterSelling"));
		dlrDistributionDetailsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		dlrDistributionDetailsImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		dlrDistributionDetailsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		dlrDistributionDetailsImpl.setInventoryId(
			this.<Long>getColumnOriginalValue("inventoryId"));

		return dlrDistributionDetailsImpl;
	}

	@Override
	public int compareTo(DlrDistributionDetails dlrDistributionDetails) {
		long primaryKey = dlrDistributionDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DlrDistributionDetails)) {
			return false;
		}

		DlrDistributionDetails dlrDistributionDetails =
			(DlrDistributionDetails)object;

		long primaryKey = dlrDistributionDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DlrDistributionDetails> toCacheModel() {
		DlrDistributionDetailsCacheModel dlrDistributionDetailsCacheModel =
			new DlrDistributionDetailsCacheModel();

		dlrDistributionDetailsCacheModel.dstrbnId = getDstrbnId();

		dlrDistributionDetailsCacheModel.dlrRegNo = getDlrRegNo();

		dlrDistributionDetailsCacheModel.ffpRegstrId = getFfpRegstrId();

		Date selLingDate = getSelLingDate();

		if (selLingDate != null) {
			dlrDistributionDetailsCacheModel.selLingDate =
				selLingDate.getTime();
		}
		else {
			dlrDistributionDetailsCacheModel.selLingDate = Long.MIN_VALUE;
		}

		dlrDistributionDetailsCacheModel.commodityId = getCommodityId();

		dlrDistributionDetailsCacheModel.commodityName = getCommodityName();

		String commodityName = dlrDistributionDetailsCacheModel.commodityName;

		if ((commodityName != null) && (commodityName.length() == 0)) {
			dlrDistributionDetailsCacheModel.commodityName = null;
		}

		dlrDistributionDetailsCacheModel.sellingPrice = getSellingPrice();

		String sellingPrice = dlrDistributionDetailsCacheModel.sellingPrice;

		if ((sellingPrice != null) && (sellingPrice.length() == 0)) {
			dlrDistributionDetailsCacheModel.sellingPrice = null;
		}

		dlrDistributionDetailsCacheModel.sellingQty = getSellingQty();

		dlrDistributionDetailsCacheModel.stockBfrSelling = getStockBfrSelling();

		dlrDistributionDetailsCacheModel.stockAfterSelling =
			getStockAfterSelling();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dlrDistributionDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			dlrDistributionDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		dlrDistributionDetailsCacheModel.createdBy = getCreatedBy();

		dlrDistributionDetailsCacheModel.companyId = getCompanyId();

		dlrDistributionDetailsCacheModel.inventoryId = getInventoryId();

		return dlrDistributionDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DlrDistributionDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DlrDistributionDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DlrDistributionDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DlrDistributionDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DlrDistributionDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DlrDistributionDetails.class, ModelWrapper.class);

	}

	private long _dstrbnId;
	private long _dlrRegNo;
	private long _ffpRegstrId;
	private Date _selLingDate;
	private long _commodityId;
	private String _commodityName;
	private String _sellingPrice;
	private long _sellingQty;
	private long _stockBfrSelling;
	private long _stockAfterSelling;
	private Date _createDate;
	private long _createdBy;
	private long _companyId;
	private long _inventoryId;

	public <T> T getColumnValue(String columnName) {
		Function<DlrDistributionDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DlrDistributionDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("dstrbnId", _dstrbnId);
		_columnOriginalValues.put("dlrRegNo", _dlrRegNo);
		_columnOriginalValues.put("ffpRegstrId", _ffpRegstrId);
		_columnOriginalValues.put("selLingDate", _selLingDate);
		_columnOriginalValues.put("commodityId", _commodityId);
		_columnOriginalValues.put("commodityName", _commodityName);
		_columnOriginalValues.put("sellingPrice", _sellingPrice);
		_columnOriginalValues.put("sellingQty", _sellingQty);
		_columnOriginalValues.put("stockBfrSelling", _stockBfrSelling);
		_columnOriginalValues.put("stockAfterSelling", _stockAfterSelling);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("inventoryId", _inventoryId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("dstrbnId", 1L);

		columnBitmasks.put("dlrRegNo", 2L);

		columnBitmasks.put("ffpRegstrId", 4L);

		columnBitmasks.put("selLingDate", 8L);

		columnBitmasks.put("commodityId", 16L);

		columnBitmasks.put("commodityName", 32L);

		columnBitmasks.put("sellingPrice", 64L);

		columnBitmasks.put("sellingQty", 128L);

		columnBitmasks.put("stockBfrSelling", 256L);

		columnBitmasks.put("stockAfterSelling", 512L);

		columnBitmasks.put("createDate", 1024L);

		columnBitmasks.put("createdBy", 2048L);

		columnBitmasks.put("companyId", 4096L);

		columnBitmasks.put("inventoryId", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DlrDistributionDetails _escapedModel;

}